ERROR - 2025-05-06 13:32:44,416 - readyaml.py:28 -[readyaml:get_testcase_yaml] - [./data/loginName.yaml]文件未找到，请检查路径是否正确
ERROR - 2025-05-06 13:32:44,419 - conftest.py:33 -[conftest:system_login] - 登录接口出现异常，导致后续接口无法继续运行，请检查程序！，'NoneType' object is not subscriptable
ERROR - 2025-05-06 13:34:30,018 - readyaml.py:28 -[readyaml:get_testcase_yaml] - [./data/loginName.yaml]文件未找到，请检查路径是否正确
ERROR - 2025-05-06 13:34:30,019 - conftest.py:34 -[conftest:system_login] - 登录接口出现异常，导致后续接口无法继续运行，请检查程序！，'NoneType' object is not subscriptable
ERROR - 2025-05-06 13:34:46,365 - readyaml.py:28 -[readyaml:get_testcase_yaml] - [./data/loginName.yaml]文件未找到，请检查路径是否正确
ERROR - 2025-05-06 13:34:46,366 - conftest.py:34 -[conftest:system_login] - 登录接口出现异常，导致后续接口无法继续运行，请检查程序！，'NoneType' object is not subscriptable
ERROR - 2025-05-06 13:35:48,568 - readyaml.py:28 -[readyaml:get_testcase_yaml] - [./data/loginName.yaml]文件未找到，请检查路径是否正确
ERROR - 2025-05-06 13:35:48,569 - conftest.py:33 -[conftest:system_login] - 登录接口出现异常，导致后续接口无法继续运行，请检查程序！，'NoneType' object is not subscriptable
INFO - 2025-05-06 13:36:18,441 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
ERROR - 2025-05-06 13:36:18,442 - readyaml.py:113 -[readyaml:get_extract_yaml] - 【extract.yaml】没有找到：cookie,--'NoneType' object is not subscriptable
ERROR - 2025-05-06 13:36:18,443 - readyaml.py:113 -[readyaml:get_extract_yaml] - 【extract.yaml】没有找到：cookie,--'NoneType' object is not subscriptable
INFO - 2025-05-06 13:36:18,443 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：商品列表
INFO - 2025-05-06 13:36:18,443 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/goodsList
INFO - 2025-05-06 13:36:18,443 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：Get
INFO - 2025-05-06 13:36:18,444 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：获取商品列表
INFO - 2025-05-06 13:36:18,444 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8', 'token': 'None'}
INFO - 2025-05-06 13:36:18,444 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:36:18,444 - sendrequest.py:150 -[sendrequest:run_main] - 请求参数：{'params': {'msgType': 'getHandsetListOfCust', 'page': 1, 'size': 20}}
INFO - 2025-05-06 13:36:18,447 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "api_info": "today:21 max:10000 all[90=21+33+36];expires:2030-12-31",
  "cache": 0,
  "error_code": "0000",
  "goodsList": [
    {
      "goodsId": "18382788819",
      "goods_count": "233",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/bcf848aa71c6389607ae7a84b70f1543.jpeg",
      "goods_name": "\u30102\u4ef6\u5957\u3011\u5957\u88c5\u79cb\u51ac\u65b0\u6b3e\u4eff\u736d\u5154\u6bdb\u9489\u73e0\u76ae\u8349\u6bdb\u6bdb\u77ed\u5916\u5957\u52a0\u539a\u5927\u8863\u5973\u88c5",
      "original_price": "",
      "unit_price": "\uffe599.00"
    },
    {
      "goodsId": "33809635011",
      "goods_count": "521",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/176019babfdecffa1d9f98f40b7e99b4.jpeg",
      "goods_name": "\u597d\u5947\u5c0f\u68ee\u6797\u5fc3\u94bb\u88c5\u7eb8\u5c3f\u88e4M22\u62c9\u62c9\u88e4L18/XL14\u8d85\u8584\u900f\u6c14\u88e4\u578b\u5c3f\u4e0d\u6e7f 1\u4ef6\u88c5",
      "original_price": "",
      "unit_price": "\uffe5108.00"
    },
    {
      "goodsId": "56996760797",
      "goods_count": "1181",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u51bb\u5e72\u9e21\u5c0f\u80f8\u6574\u5757\u589e\u80a5\u8425\u517b\u53d1\u816e\u72d7\u72d7\u96f6\u98df\u65b0\u624b\u517b\u732b\u96f6\u98df\u5e7c\u732b\u96f6\u98df100g",
      "original_price": "",
      "unit_price": "\uffe517.80"
    },
    {
      "goodsId": "82193785267",
      "goods_count": "3000+",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u3010\u81ea\u8425\u3011ISB\u4f0a\u73ca\u5a1c\u610f\u5927\u5229\u6c34\u679c\u7cfb\u5217\u5ba0\u7269\u72ac\u732b\u6c90\u6d74\u9732\u9664\u81ed\u9999\u6ce2\u62a4\u6bdb\u7d20",
      "original_price": "",
      "unit_price": "\uffe5650.00"
    },
    {
      "goodsId": "74190550836",
      "goods_count": "1000+",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u3010\u65b0\u54c1\u96f60CM\u5d4c\u5165\u5f0f\u3011\u6d77\u5c14\u7535\u51b0\u7bb1410L\u5bb6\u7528\u6cd5\u5f0f\u56db\u95e8\u591a\u95e8\u5b98\u65b9\u6b63\u54c1",
      "original_price": "",
      "unit_price": "\uffe55746.00"
    }
  ],
  "reason": "",
  "request_id": "request_id",
  "secache": "c98b29872e8a4b28859db207944ba817",
  "secache_date": "2025-05-06 13:36:12",
  "secache_time": 1746509772000,
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:36:18,448 - apiutil.py:183 -[apiutil:extract_data_list] - json提取到参数：{'goodsId': ['18382788819', '33809635011', '56996760797', '82193785267', '74190550836']}
INFO - 2025-05-06 13:36:18,448 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': '0000'}}]
INFO - 2025-05-06 13:36:18,449 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【0000】,实际结果【0000】
INFO - 2025-05-06 13:36:18,449 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:36:18,449 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:36:18,450 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
ERROR - 2025-05-06 13:36:18,452 - readyaml.py:113 -[readyaml:get_extract_yaml] - 【extract.yaml】没有找到：token,--'token'
ERROR - 2025-05-06 13:36:18,452 - readyaml.py:113 -[readyaml:get_extract_yaml] - 【extract.yaml】没有找到：token,--'token'
INFO - 2025-05-06 13:36:18,452 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：新增用户
INFO - 2025-05-06 13:36:18,452 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/addUser
INFO - 2025-05-06 13:36:18,452 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:36:18,452 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：正常新增用户
INFO - 2025-05-06 13:36:18,452 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:36:18,453 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:36:18,453 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789890', 'role_id': 123456789, 'dates': '2023-12-31', 'phone': 13800000000, 'token': 'None'}}
INFO - 2025-05-06 13:36:18,458 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：<!doctype html>
<html lang=en>
  <head>
    <title>KeyError: &#39;token&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "3Pv5OqYGgocJHOylQscb";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>KeyError</h1>
<div class="detail">
  <p class="errormsg">KeyError: &#39;token&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2183485322096">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2183485320656">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2183485322240">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2183485321808">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2183485320944">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2183485322528">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2183485322672">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\row_Test-Automation-Framework-main\mock_server\api_server\base\flask_service.py"</cite>,
      line <em class="line">180</em>,
      in <code class="function">add_user</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>@api.route(&#39;/dar/user/addUser&#39;, methods=[&#39;post&#39;])</pre>
<pre class="line before"><span class="ws"></span>def add_user():</pre>
<pre class="line before"><span class="ws">    </span>&#34;&#34;&#34;新增用户接口&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">    </span>get_token = {&#39;token&#39;: global_params[&#39;token&#39;]}
<span class="ws">    </span>                      ^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>username = flask.request.form.get(&#39;username&#39;)</pre>
<pre class="line after"><span class="ws">    </span>password = flask.request.form.get(&#39;password&#39;)</pre>
<pre class="line after"><span class="ws">    </span>role_id = flask.request.form.get(&#39;role_id&#39;)</pre>
<pre class="line after"><span class="ws">    </span>dates = flask.request.form.get(&#39;dates&#39;)</pre>
<pre class="line after"><span class="ws">    </span>phone = flask.request.form.get(&#39;phone&#39;)</pre></div>
</div>
</ul>
  <blockquote>KeyError: &#39;token&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\row_Test-Automation-Framework-main\mock_server\api_server\base\flask_service.py&#34;, line 180, in add_user
    get_token = {&#39;token&#39;: global_params[&#39;token&#39;]}
                          ^^^^^^^^^^^^^^^^^^^^^^^
KeyError: &#39;token&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\row_Test-Automation-Framework-main\mock_server\api_server\base\flask_service.py", line 180, in add_user
    get_token = {'token': global_params['token']}
                          ^^^^^^^^^^^^^^^^^^^^^^^
KeyError: 'token'


-->

INFO - 2025-05-06 13:36:18,630 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:36:18,631 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:36:18,632 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：新增用户
INFO - 2025-05-06 13:36:18,632 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/addUser
INFO - 2025-05-06 13:36:18,632 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:36:18,632 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效新增·缺少token
INFO - 2025-05-06 13:36:18,632 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:36:18,632 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:36:18,632 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789890', 'role_id': 123456789, 'dates': '2023-12-31', 'phone': 13800000000, 'token': None}}
INFO - 2025-05-06 13:36:18,637 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：<!doctype html>
<html lang=en>
  <head>
    <title>KeyError: &#39;token&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "3Pv5OqYGgocJHOylQscb";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>KeyError</h1>
<div class="detail">
  <p class="errormsg">KeyError: &#39;token&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2183486313600">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2183486313888">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2183486313312">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2183486314176">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2183486313744">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2183486314032">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2183486314320">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\row_Test-Automation-Framework-main\mock_server\api_server\base\flask_service.py"</cite>,
      line <em class="line">180</em>,
      in <code class="function">add_user</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>@api.route(&#39;/dar/user/addUser&#39;, methods=[&#39;post&#39;])</pre>
<pre class="line before"><span class="ws"></span>def add_user():</pre>
<pre class="line before"><span class="ws">    </span>&#34;&#34;&#34;新增用户接口&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">    </span>get_token = {&#39;token&#39;: global_params[&#39;token&#39;]}
<span class="ws">    </span>                      ^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>username = flask.request.form.get(&#39;username&#39;)</pre>
<pre class="line after"><span class="ws">    </span>password = flask.request.form.get(&#39;password&#39;)</pre>
<pre class="line after"><span class="ws">    </span>role_id = flask.request.form.get(&#39;role_id&#39;)</pre>
<pre class="line after"><span class="ws">    </span>dates = flask.request.form.get(&#39;dates&#39;)</pre>
<pre class="line after"><span class="ws">    </span>phone = flask.request.form.get(&#39;phone&#39;)</pre></div>
</div>
</ul>
  <blockquote>KeyError: &#39;token&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\row_Test-Automation-Framework-main\mock_server\api_server\base\flask_service.py&#34;, line 180, in add_user
    get_token = {&#39;token&#39;: global_params[&#39;token&#39;]}
                          ^^^^^^^^^^^^^^^^^^^^^^^
KeyError: &#39;token&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\row_Test-Automation-Framework-main\mock_server\api_server\base\flask_service.py", line 180, in add_user
    get_token = {'token': global_params['token']}
                          ^^^^^^^^^^^^^^^^^^^^^^^
KeyError: 'token'


-->

INFO - 2025-05-06 13:36:18,654 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:36:18,655 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:36:18,656 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：新增用户
INFO - 2025-05-06 13:36:18,656 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/addUser
INFO - 2025-05-06 13:36:18,656 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:36:18,656 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效新增·缺少必填参数username
INFO - 2025-05-06 13:36:18,656 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:36:18,656 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:36:18,656 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'password': 'tset6789890', 'role_id': 123456789, 'dates': '2023-12-31', 'phone': 13800000000, 'token': None}}
INFO - 2025-05-06 13:36:18,672 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：<!doctype html>
<html lang=en>
  <head>
    <title>KeyError: &#39;token&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "3Pv5OqYGgocJHOylQscb";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>KeyError</h1>
<div class="detail">
  <p class="errormsg">KeyError: &#39;token&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2183486314464">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2183486313168">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2183486313456">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2183486314608">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2183486314752">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2183486314896">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2183486315040">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\row_Test-Automation-Framework-main\mock_server\api_server\base\flask_service.py"</cite>,
      line <em class="line">180</em>,
      in <code class="function">add_user</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>@api.route(&#39;/dar/user/addUser&#39;, methods=[&#39;post&#39;])</pre>
<pre class="line before"><span class="ws"></span>def add_user():</pre>
<pre class="line before"><span class="ws">    </span>&#34;&#34;&#34;新增用户接口&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">    </span>get_token = {&#39;token&#39;: global_params[&#39;token&#39;]}
<span class="ws">    </span>                      ^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>username = flask.request.form.get(&#39;username&#39;)</pre>
<pre class="line after"><span class="ws">    </span>password = flask.request.form.get(&#39;password&#39;)</pre>
<pre class="line after"><span class="ws">    </span>role_id = flask.request.form.get(&#39;role_id&#39;)</pre>
<pre class="line after"><span class="ws">    </span>dates = flask.request.form.get(&#39;dates&#39;)</pre>
<pre class="line after"><span class="ws">    </span>phone = flask.request.form.get(&#39;phone&#39;)</pre></div>
</div>
</ul>
  <blockquote>KeyError: &#39;token&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\row_Test-Automation-Framework-main\mock_server\api_server\base\flask_service.py&#34;, line 180, in add_user
    get_token = {&#39;token&#39;: global_params[&#39;token&#39;]}
                          ^^^^^^^^^^^^^^^^^^^^^^^
KeyError: &#39;token&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\row_Test-Automation-Framework-main\mock_server\api_server\base\flask_service.py", line 180, in add_user
    get_token = {'token': global_params['token']}
                          ^^^^^^^^^^^^^^^^^^^^^^^
KeyError: 'token'


-->

INFO - 2025-05-06 13:36:18,688 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:36:18,688 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:36:18,689 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：新增用户
INFO - 2025-05-06 13:36:18,690 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/addUser
INFO - 2025-05-06 13:36:18,690 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:36:18,690 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效新增·缺少必填参数role_id
INFO - 2025-05-06 13:36:18,690 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:36:18,690 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:36:18,690 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789890', 'dates': '2023-12-31', 'phone': 13800000000, 'token': None}}
INFO - 2025-05-06 13:36:18,721 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：<!doctype html>
<html lang=en>
  <head>
    <title>KeyError: &#39;token&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "3Pv5OqYGgocJHOylQscb";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>KeyError</h1>
<div class="detail">
  <p class="errormsg">KeyError: &#39;token&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2183486315184">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2183486315328">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2183486315472">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2183486315616">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2183486315760">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2183486315904">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2183486316048">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\row_Test-Automation-Framework-main\mock_server\api_server\base\flask_service.py"</cite>,
      line <em class="line">180</em>,
      in <code class="function">add_user</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>@api.route(&#39;/dar/user/addUser&#39;, methods=[&#39;post&#39;])</pre>
<pre class="line before"><span class="ws"></span>def add_user():</pre>
<pre class="line before"><span class="ws">    </span>&#34;&#34;&#34;新增用户接口&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">    </span>get_token = {&#39;token&#39;: global_params[&#39;token&#39;]}
<span class="ws">    </span>                      ^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>username = flask.request.form.get(&#39;username&#39;)</pre>
<pre class="line after"><span class="ws">    </span>password = flask.request.form.get(&#39;password&#39;)</pre>
<pre class="line after"><span class="ws">    </span>role_id = flask.request.form.get(&#39;role_id&#39;)</pre>
<pre class="line after"><span class="ws">    </span>dates = flask.request.form.get(&#39;dates&#39;)</pre>
<pre class="line after"><span class="ws">    </span>phone = flask.request.form.get(&#39;phone&#39;)</pre></div>
</div>
</ul>
  <blockquote>KeyError: &#39;token&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\row_Test-Automation-Framework-main\mock_server\api_server\base\flask_service.py&#34;, line 180, in add_user
    get_token = {&#39;token&#39;: global_params[&#39;token&#39;]}
                          ^^^^^^^^^^^^^^^^^^^^^^^
KeyError: &#39;token&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\row_Test-Automation-Framework-main\mock_server\api_server\base\flask_service.py", line 180, in add_user
    get_token = {'token': global_params['token']}
                          ^^^^^^^^^^^^^^^^^^^^^^^
KeyError: 'token'


-->

INFO - 2025-05-06 13:36:18,738 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:36:18,739 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
ERROR - 2025-05-06 13:36:18,741 - readyaml.py:113 -[readyaml:get_extract_yaml] - 【extract.yaml】没有找到：token,--'token'
ERROR - 2025-05-06 13:36:18,741 - readyaml.py:113 -[readyaml:get_extract_yaml] - 【extract.yaml】没有找到：token,--'token'
INFO - 2025-05-06 13:36:18,741 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：新增用户
INFO - 2025-05-06 13:36:18,742 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/addUser
INFO - 2025-05-06 13:36:18,742 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:36:18,742 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：正常新增用户
INFO - 2025-05-06 13:36:18,742 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:36:18,742 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:36:18,742 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789890', 'role_id': 123456789, 'dates': '2023-12-31', 'phone': 13800000000, 'token': 'None'}}
INFO - 2025-05-06 13:36:18,747 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：<!doctype html>
<html lang=en>
  <head>
    <title>KeyError: &#39;token&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "3Pv5OqYGgocJHOylQscb";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>KeyError</h1>
<div class="detail">
  <p class="errormsg">KeyError: &#39;token&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2183486316192">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2183486316336">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2183486316480">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2183486316624">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2183486316768">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2183486316912">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2183486317056">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\row_Test-Automation-Framework-main\mock_server\api_server\base\flask_service.py"</cite>,
      line <em class="line">180</em>,
      in <code class="function">add_user</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>@api.route(&#39;/dar/user/addUser&#39;, methods=[&#39;post&#39;])</pre>
<pre class="line before"><span class="ws"></span>def add_user():</pre>
<pre class="line before"><span class="ws">    </span>&#34;&#34;&#34;新增用户接口&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">    </span>get_token = {&#39;token&#39;: global_params[&#39;token&#39;]}
<span class="ws">    </span>                      ^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>username = flask.request.form.get(&#39;username&#39;)</pre>
<pre class="line after"><span class="ws">    </span>password = flask.request.form.get(&#39;password&#39;)</pre>
<pre class="line after"><span class="ws">    </span>role_id = flask.request.form.get(&#39;role_id&#39;)</pre>
<pre class="line after"><span class="ws">    </span>dates = flask.request.form.get(&#39;dates&#39;)</pre>
<pre class="line after"><span class="ws">    </span>phone = flask.request.form.get(&#39;phone&#39;)</pre></div>
</div>
</ul>
  <blockquote>KeyError: &#39;token&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\row_Test-Automation-Framework-main\mock_server\api_server\base\flask_service.py&#34;, line 180, in add_user
    get_token = {&#39;token&#39;: global_params[&#39;token&#39;]}
                          ^^^^^^^^^^^^^^^^^^^^^^^
KeyError: &#39;token&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\row_Test-Automation-Framework-main\mock_server\api_server\base\flask_service.py", line 180, in add_user
    get_token = {'token': global_params['token']}
                          ^^^^^^^^^^^^^^^^^^^^^^^
KeyError: 'token'


-->

INFO - 2025-05-06 13:36:18,764 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:36:18,765 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:36:18,766 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：新增用户
INFO - 2025-05-06 13:36:18,766 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/addUser
INFO - 2025-05-06 13:36:18,766 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:36:18,766 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效新增·缺少token
INFO - 2025-05-06 13:36:18,766 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:36:18,766 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:36:18,767 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789890', 'role_id': 123456789, 'dates': '2023-12-31', 'phone': 13800000000, 'token': None}}
INFO - 2025-05-06 13:36:18,798 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：<!doctype html>
<html lang=en>
  <head>
    <title>KeyError: &#39;token&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "3Pv5OqYGgocJHOylQscb";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>KeyError</h1>
<div class="detail">
  <p class="errormsg">KeyError: &#39;token&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2183486317200">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2183486317344">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2183486317488">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2183486317632">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2183486317776">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2183486317920">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2183486318064">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\row_Test-Automation-Framework-main\mock_server\api_server\base\flask_service.py"</cite>,
      line <em class="line">180</em>,
      in <code class="function">add_user</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>@api.route(&#39;/dar/user/addUser&#39;, methods=[&#39;post&#39;])</pre>
<pre class="line before"><span class="ws"></span>def add_user():</pre>
<pre class="line before"><span class="ws">    </span>&#34;&#34;&#34;新增用户接口&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">    </span>get_token = {&#39;token&#39;: global_params[&#39;token&#39;]}
<span class="ws">    </span>                      ^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>username = flask.request.form.get(&#39;username&#39;)</pre>
<pre class="line after"><span class="ws">    </span>password = flask.request.form.get(&#39;password&#39;)</pre>
<pre class="line after"><span class="ws">    </span>role_id = flask.request.form.get(&#39;role_id&#39;)</pre>
<pre class="line after"><span class="ws">    </span>dates = flask.request.form.get(&#39;dates&#39;)</pre>
<pre class="line after"><span class="ws">    </span>phone = flask.request.form.get(&#39;phone&#39;)</pre></div>
</div>
</ul>
  <blockquote>KeyError: &#39;token&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\row_Test-Automation-Framework-main\mock_server\api_server\base\flask_service.py&#34;, line 180, in add_user
    get_token = {&#39;token&#39;: global_params[&#39;token&#39;]}
                          ^^^^^^^^^^^^^^^^^^^^^^^
KeyError: &#39;token&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\row_Test-Automation-Framework-main\mock_server\api_server\base\flask_service.py", line 180, in add_user
    get_token = {'token': global_params['token']}
                          ^^^^^^^^^^^^^^^^^^^^^^^
KeyError: 'token'


-->

INFO - 2025-05-06 13:36:18,816 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:36:18,817 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:36:18,818 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：新增用户
INFO - 2025-05-06 13:36:18,818 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/addUser
INFO - 2025-05-06 13:36:18,819 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:36:18,819 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效新增·缺少必填参数username
INFO - 2025-05-06 13:36:18,819 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:36:18,819 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:36:18,819 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'password': 'tset6789890', 'role_id': 123456789, 'dates': '2023-12-31', 'phone': 13800000000, 'token': None}}
INFO - 2025-05-06 13:36:18,843 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：<!doctype html>
<html lang=en>
  <head>
    <title>KeyError: &#39;token&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "3Pv5OqYGgocJHOylQscb";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>KeyError</h1>
<div class="detail">
  <p class="errormsg">KeyError: &#39;token&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2183486318208">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2183486318352">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2183486318496">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2183486318640">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2183486318784">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2183486318928">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2183486319072">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\row_Test-Automation-Framework-main\mock_server\api_server\base\flask_service.py"</cite>,
      line <em class="line">180</em>,
      in <code class="function">add_user</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>@api.route(&#39;/dar/user/addUser&#39;, methods=[&#39;post&#39;])</pre>
<pre class="line before"><span class="ws"></span>def add_user():</pre>
<pre class="line before"><span class="ws">    </span>&#34;&#34;&#34;新增用户接口&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">    </span>get_token = {&#39;token&#39;: global_params[&#39;token&#39;]}
<span class="ws">    </span>                      ^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>username = flask.request.form.get(&#39;username&#39;)</pre>
<pre class="line after"><span class="ws">    </span>password = flask.request.form.get(&#39;password&#39;)</pre>
<pre class="line after"><span class="ws">    </span>role_id = flask.request.form.get(&#39;role_id&#39;)</pre>
<pre class="line after"><span class="ws">    </span>dates = flask.request.form.get(&#39;dates&#39;)</pre>
<pre class="line after"><span class="ws">    </span>phone = flask.request.form.get(&#39;phone&#39;)</pre></div>
</div>
</ul>
  <blockquote>KeyError: &#39;token&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\row_Test-Automation-Framework-main\mock_server\api_server\base\flask_service.py&#34;, line 180, in add_user
    get_token = {&#39;token&#39;: global_params[&#39;token&#39;]}
                          ^^^^^^^^^^^^^^^^^^^^^^^
KeyError: &#39;token&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\row_Test-Automation-Framework-main\mock_server\api_server\base\flask_service.py", line 180, in add_user
    get_token = {'token': global_params['token']}
                          ^^^^^^^^^^^^^^^^^^^^^^^
KeyError: 'token'


-->

INFO - 2025-05-06 13:36:18,858 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:36:18,859 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:36:18,860 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：新增用户
INFO - 2025-05-06 13:36:18,860 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/addUser
INFO - 2025-05-06 13:36:18,860 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:36:18,860 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效新增·缺少必填参数role_id
INFO - 2025-05-06 13:36:18,860 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:36:18,860 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:36:18,860 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789890', 'dates': '2023-12-31', 'phone': 13800000000, 'token': None}}
INFO - 2025-05-06 13:36:18,865 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：<!doctype html>
<html lang=en>
  <head>
    <title>KeyError: &#39;token&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "3Pv5OqYGgocJHOylQscb";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>KeyError</h1>
<div class="detail">
  <p class="errormsg">KeyError: &#39;token&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2183486319360">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2183486319504">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2183486319648">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2183486319792">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2183486319936">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2183486320080">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2183486320224">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\row_Test-Automation-Framework-main\mock_server\api_server\base\flask_service.py"</cite>,
      line <em class="line">180</em>,
      in <code class="function">add_user</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>@api.route(&#39;/dar/user/addUser&#39;, methods=[&#39;post&#39;])</pre>
<pre class="line before"><span class="ws"></span>def add_user():</pre>
<pre class="line before"><span class="ws">    </span>&#34;&#34;&#34;新增用户接口&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">    </span>get_token = {&#39;token&#39;: global_params[&#39;token&#39;]}
<span class="ws">    </span>                      ^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>username = flask.request.form.get(&#39;username&#39;)</pre>
<pre class="line after"><span class="ws">    </span>password = flask.request.form.get(&#39;password&#39;)</pre>
<pre class="line after"><span class="ws">    </span>role_id = flask.request.form.get(&#39;role_id&#39;)</pre>
<pre class="line after"><span class="ws">    </span>dates = flask.request.form.get(&#39;dates&#39;)</pre>
<pre class="line after"><span class="ws">    </span>phone = flask.request.form.get(&#39;phone&#39;)</pre></div>
</div>
</ul>
  <blockquote>KeyError: &#39;token&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\row_Test-Automation-Framework-main\mock_server\api_server\base\flask_service.py&#34;, line 180, in add_user
    get_token = {&#39;token&#39;: global_params[&#39;token&#39;]}
                          ^^^^^^^^^^^^^^^^^^^^^^^
KeyError: &#39;token&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\row_Test-Automation-Framework-main\mock_server\api_server\base\flask_service.py", line 180, in add_user
    get_token = {'token': global_params['token']}
                          ^^^^^^^^^^^^^^^^^^^^^^^
KeyError: 'token'


-->

INFO - 2025-05-06 13:36:18,880 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:36:18,882 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:36:18,883 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：商品详情
INFO - 2025-05-06 13:36:18,883 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/productDetail
INFO - 2025-05-06 13:36:18,884 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:36:18,884 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：获取商品详情
INFO - 2025-05-06 13:36:18,884 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:36:18,884 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:36:18,884 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'pro_id': '18382788819,33809635011,56996760797,82193785267,74190550836', 'page': 1, 'size': 20}}
INFO - 2025-05-06 13:36:18,904 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error": "\u4e0d\u5b58\u5728\u8be5\u5546\u54c1",
  "error_code": "4000",
  "goodsId": "",
  "item": {},
  "secache_date": "2025-05-06 13:36:18",
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:36:18,904 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': '4000'}}]
INFO - 2025-05-06 13:36:18,904 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【4000】,实际结果【4000】
INFO - 2025-05-06 13:36:18,904 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:36:18,905 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:36:18,906 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:36:18,907 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：修改用户
INFO - 2025-05-06 13:36:18,907 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/updateUser
INFO - 2025-05-06 13:36:18,908 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:36:18,908 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：正常修改用户信息
INFO - 2025-05-06 13:36:18,908 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:36:18,908 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:36:18,908 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789#$123', 'role_id': 89588181111112343, 'dates': '2023-12-31', 'phone': 13800000000}}
INFO - 2025-05-06 13:36:18,911 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u66f4\u65b0\u6210\u529f",
  "msg_code": 200
}

INFO - 2025-05-06 13:36:18,911 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'status_code': 200}}, {'contains': {'msg': '更新成功'}}]
INFO - 2025-05-06 13:36:18,911 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【更新成功】,实际结果【更新成功】
INFO - 2025-05-06 13:36:18,911 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:36:18,912 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:36:18,913 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:36:18,914 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：修改用户
INFO - 2025-05-06 13:36:18,914 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/updateUser
INFO - 2025-05-06 13:36:18,914 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:36:18,914 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：正常修改用户信息
INFO - 2025-05-06 13:36:18,914 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:36:18,914 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:36:18,914 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789#$123', 'role_id': 89588181111112343, 'dates': '2023-12-31', 'phone': 13800000000}}
INFO - 2025-05-06 13:36:18,916 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u66f4\u65b0\u6210\u529f",
  "msg_code": 200
}

INFO - 2025-05-06 13:36:18,917 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'status_code': 200}}, {'contains': {'msg': '更新成功'}}]
INFO - 2025-05-06 13:36:18,917 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【更新成功】,实际结果【更新成功】
INFO - 2025-05-06 13:36:18,917 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:36:18,917 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:36:18,918 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:36:18,920 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：提交订单
INFO - 2025-05-06 13:36:18,920 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/placeAnOrder
INFO - 2025-05-06 13:36:18,920 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:36:18,920 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：提交订单
INFO - 2025-05-06 13:36:18,920 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:36:18,920 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:36:18,920 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'goods_id': '82193785267', 'number': 2, 'propertyChildIds': '2:9', 'inviter_id': '127839112', 'price': '128', 'freight_insurance': '0.0', 'discount_code': '002399', 'consignee_info': {'name': '张三', 'phone': 13800000000, 'address': '北京市海淀区西三环北路74号院4栋3单元1008'}}}
INFO - 2025-05-06 13:36:18,923 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "crateTime": "2025-05-06 13:36:18",
  "error": "",
  "error_code": "0000",
  "message": "\u63d0\u4ea4\u8ba2\u5355\u6210\u529f",
  "orderNumber": "898210283369558255045",
  "translate_language": "zh-CN",
  "userId": "9623557772977266982"
}

INFO - 2025-05-06 13:36:18,924 - apiutil.py:154 -[apiutil:extract_data] - 提取接口的返回值：
INFO - 2025-05-06 13:36:18,924 - apiutil.py:154 -[apiutil:extract_data] - 提取接口的返回值：
INFO - 2025-05-06 13:36:18,924 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'message': '提交订单成功'}}, {'eq': {'error_code': '0000'}}]
INFO - 2025-05-06 13:36:18,924 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'message': '提交订单成功'}，等于预期结果：{'message': '提交订单成功'}
INFO - 2025-05-06 13:36:18,924 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'error_code': '0000'}，等于预期结果：{'error_code': '0000'}
INFO - 2025-05-06 13:36:18,925 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:36:18,925 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:36:18,926 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:36:18,927 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-05-06 13:36:18,927 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-05-06 13:36:18,927 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:36:18,928 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：有效删除用户
INFO - 2025-05-06 13:36:18,928 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:36:18,928 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:36:18,928 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 123839387391912}}
INFO - 2025-05-06 13:36:18,948 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u5220\u9664\u6210\u529f!",
  "msg_code": 200
}

INFO - 2025-05-06 13:36:18,948 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除成功'}}]
INFO - 2025-05-06 13:36:18,948 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除成功】,实际结果【删除成功!】
INFO - 2025-05-06 13:36:18,948 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:36:18,949 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:36:18,950 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:36:18,951 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-05-06 13:36:18,951 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-05-06 13:36:18,951 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:36:18,951 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效删除用户·userid不存在
INFO - 2025-05-06 13:36:18,951 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:36:18,951 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:36:18,951 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 1238393873922}}
INFO - 2025-05-06 13:36:18,978 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u5220\u9664\u5931\u8d25\uff0c\u7528\u6237id\u4e0d\u5b58\u5728!",
  "msg_code": 9001
}

INFO - 2025-05-06 13:36:18,978 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除失败'}}]
INFO - 2025-05-06 13:36:18,979 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除失败】,实际结果【删除失败，用户id不存在!】
INFO - 2025-05-06 13:36:18,979 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:36:18,979 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:36:18,980 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:36:18,981 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-05-06 13:36:18,982 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-05-06 13:36:18,982 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:36:18,982 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效删除用户·userid为空
INFO - 2025-05-06 13:36:18,982 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:36:18,982 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:36:18,982 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 1238393873922}}
INFO - 2025-05-06 13:36:19,009 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u5220\u9664\u5931\u8d25\uff0c\u7528\u6237id\u4e0d\u5b58\u5728!",
  "msg_code": 9001
}

INFO - 2025-05-06 13:36:19,009 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除失败'}}]
INFO - 2025-05-06 13:36:19,010 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除失败】,实际结果【删除失败，用户id不存在!】
INFO - 2025-05-06 13:36:19,010 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:36:19,010 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:36:19,011 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:36:19,012 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-05-06 13:36:19,012 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-05-06 13:36:19,012 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:36:19,012 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效删除用户·缺少必填参数
INFO - 2025-05-06 13:36:19,012 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:36:19,012 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:36:19,025 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u5220\u9664\u5931\u8d25\uff0c\u7528\u6237id\u4e0d\u5b58\u5728!",
  "msg_code": 9001
}

INFO - 2025-05-06 13:36:19,025 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除失败'}}]
INFO - 2025-05-06 13:36:19,025 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除失败】,实际结果【删除失败，用户id不存在!】
INFO - 2025-05-06 13:36:19,025 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:36:19,026 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:36:19,028 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:36:19,030 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-05-06 13:36:19,030 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-05-06 13:36:19,030 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:36:19,030 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：有效删除用户
INFO - 2025-05-06 13:36:19,030 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:36:19,030 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:36:19,031 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 123839387391912}}
INFO - 2025-05-06 13:36:19,033 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u5220\u9664\u6210\u529f!",
  "msg_code": 200
}

INFO - 2025-05-06 13:36:19,033 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除成功'}}]
INFO - 2025-05-06 13:36:19,033 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除成功】,实际结果【删除成功!】
INFO - 2025-05-06 13:36:19,034 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:36:19,034 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:36:19,035 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:36:19,036 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-05-06 13:36:19,036 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-05-06 13:36:19,036 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:36:19,036 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效删除用户·userid不存在
INFO - 2025-05-06 13:36:19,036 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:36:19,036 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:36:19,036 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 1238393873922}}
INFO - 2025-05-06 13:36:19,038 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u5220\u9664\u5931\u8d25\uff0c\u7528\u6237id\u4e0d\u5b58\u5728!",
  "msg_code": 9001
}

INFO - 2025-05-06 13:36:19,038 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除失败'}}]
INFO - 2025-05-06 13:36:19,038 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除失败】,实际结果【删除失败，用户id不存在!】
INFO - 2025-05-06 13:36:19,039 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:36:19,039 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:36:19,039 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:36:19,041 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-05-06 13:36:19,041 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-05-06 13:36:19,041 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:36:19,041 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效删除用户·userid为空
INFO - 2025-05-06 13:36:19,041 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:36:19,041 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:36:19,041 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 1238393873922}}
INFO - 2025-05-06 13:36:19,055 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u5220\u9664\u5931\u8d25\uff0c\u7528\u6237id\u4e0d\u5b58\u5728!",
  "msg_code": 9001
}

INFO - 2025-05-06 13:36:19,055 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除失败'}}]
INFO - 2025-05-06 13:36:19,056 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除失败】,实际结果【删除失败，用户id不存在!】
INFO - 2025-05-06 13:36:19,056 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:36:19,056 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:36:19,057 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:36:19,058 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-05-06 13:36:19,059 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-05-06 13:36:19,059 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:36:19,059 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效删除用户·缺少必填参数
INFO - 2025-05-06 13:36:19,059 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:36:19,059 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:36:19,071 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u5220\u9664\u5931\u8d25\uff0c\u7528\u6237id\u4e0d\u5b58\u5728!",
  "msg_code": 9001
}

INFO - 2025-05-06 13:36:19,071 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除失败'}}]
INFO - 2025-05-06 13:36:19,071 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除失败】,实际结果【删除失败，用户id不存在!】
INFO - 2025-05-06 13:36:19,071 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:36:19,072 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:36:19,073 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:36:19,076 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：订单支付
INFO - 2025-05-06 13:36:19,076 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/orderPay
INFO - 2025-05-06 13:36:19,076 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:36:19,076 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：订单支付
INFO - 2025-05-06 13:36:19,076 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:36:19,076 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:36:19,076 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'orderNumber': '898210283369558255045', 'userId': '9623557772977266982', 'timeStamp': '1746509779'}}
INFO - 2025-05-06 13:36:19,102 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "createTime": "2025-05-06 13:36:19",
  "error": "",
  "error_code": "0000",
  "message": "\u8ba2\u5355\u652f\u4ed8\u6210\u529f",
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:36:19,102 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'message': '订单支付成功'}}, {'contains': {'error_code': '0000'}}]
INFO - 2025-05-06 13:36:19,102 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【订单支付成功】,实际结果【订单支付成功】
INFO - 2025-05-06 13:36:19,103 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【0000】,实际结果【0000】
INFO - 2025-05-06 13:36:19,103 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:36:19,103 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:36:19,105 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:36:19,106 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：用户查询
INFO - 2025-05-06 13:36:19,106 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/queryUser
INFO - 2025-05-06 13:36:19,106 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:36:19,106 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：有效查询用户
INFO - 2025-05-06 13:36:19,106 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:36:19,106 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:36:19,106 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 123839387391912}}
INFO - 2025-05-06 13:36:19,134 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u67e5\u8be2\u6210\u529f!",
  "msg_code": 200
}

INFO - 2025-05-06 13:36:19,135 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '查询成功'}}, {'eq': {'msg_code': 200}}]
INFO - 2025-05-06 13:36:19,135 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【查询成功】,实际结果【查询成功!】
INFO - 2025-05-06 13:36:19,136 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'msg_code': 200}，等于预期结果：{'msg_code': 200}
INFO - 2025-05-06 13:36:19,136 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:36:19,137 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:36:19,140 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:36:19,142 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：用户查询
INFO - 2025-05-06 13:36:19,143 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/queryUser
INFO - 2025-05-06 13:36:19,143 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:36:19,143 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：有效查询用户
INFO - 2025-05-06 13:36:19,143 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:36:19,143 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:36:19,143 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 123839387391912}}
INFO - 2025-05-06 13:36:19,163 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u67e5\u8be2\u6210\u529f!",
  "msg_code": 200
}

INFO - 2025-05-06 13:36:19,163 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '查询成功'}}, {'eq': {'msg_code': 200}}]
INFO - 2025-05-06 13:36:19,163 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【查询成功】,实际结果【查询成功!】
INFO - 2025-05-06 13:36:19,163 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'msg_code': 200}，等于预期结果：{'msg_code': 200}
INFO - 2025-05-06 13:36:19,163 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:36:19,164 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:36:19,165 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
ERROR - 2025-05-06 13:36:19,167 - readyaml.py:113 -[readyaml:get_extract_yaml] - 【extract.yaml】没有找到：token,--'token'
ERROR - 2025-05-06 13:36:19,167 - readyaml.py:113 -[readyaml:get_extract_yaml] - 【extract.yaml】没有找到：token,--'token'
INFO - 2025-05-06 13:36:19,167 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：商品列表
INFO - 2025-05-06 13:36:19,167 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/goodsList
INFO - 2025-05-06 13:36:19,167 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：Get
INFO - 2025-05-06 13:36:19,168 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：获取商品列表
INFO - 2025-05-06 13:36:19,168 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8', 'token': 'None'}
INFO - 2025-05-06 13:36:19,168 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:36:19,168 - sendrequest.py:150 -[sendrequest:run_main] - 请求参数：{'params': {'msgType': 'getHandsetListOfCust', 'page': 1, 'size': 20}}
INFO - 2025-05-06 13:36:19,196 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "api_info": "today:21 max:10000 all[90=21+33+36];expires:2030-12-31",
  "cache": 0,
  "error_code": "0000",
  "goodsList": [
    {
      "goodsId": "18382788819",
      "goods_count": "233",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/bcf848aa71c6389607ae7a84b70f1543.jpeg",
      "goods_name": "\u30102\u4ef6\u5957\u3011\u5957\u88c5\u79cb\u51ac\u65b0\u6b3e\u4eff\u736d\u5154\u6bdb\u9489\u73e0\u76ae\u8349\u6bdb\u6bdb\u77ed\u5916\u5957\u52a0\u539a\u5927\u8863\u5973\u88c5",
      "original_price": "",
      "unit_price": "\uffe599.00"
    },
    {
      "goodsId": "33809635011",
      "goods_count": "521",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/176019babfdecffa1d9f98f40b7e99b4.jpeg",
      "goods_name": "\u597d\u5947\u5c0f\u68ee\u6797\u5fc3\u94bb\u88c5\u7eb8\u5c3f\u88e4M22\u62c9\u62c9\u88e4L18/XL14\u8d85\u8584\u900f\u6c14\u88e4\u578b\u5c3f\u4e0d\u6e7f 1\u4ef6\u88c5",
      "original_price": "",
      "unit_price": "\uffe5108.00"
    },
    {
      "goodsId": "56996760797",
      "goods_count": "1181",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u51bb\u5e72\u9e21\u5c0f\u80f8\u6574\u5757\u589e\u80a5\u8425\u517b\u53d1\u816e\u72d7\u72d7\u96f6\u98df\u65b0\u624b\u517b\u732b\u96f6\u98df\u5e7c\u732b\u96f6\u98df100g",
      "original_price": "",
      "unit_price": "\uffe517.80"
    },
    {
      "goodsId": "82193785267",
      "goods_count": "3000+",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u3010\u81ea\u8425\u3011ISB\u4f0a\u73ca\u5a1c\u610f\u5927\u5229\u6c34\u679c\u7cfb\u5217\u5ba0\u7269\u72ac\u732b\u6c90\u6d74\u9732\u9664\u81ed\u9999\u6ce2\u62a4\u6bdb\u7d20",
      "original_price": "",
      "unit_price": "\uffe5650.00"
    },
    {
      "goodsId": "74190550836",
      "goods_count": "1000+",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u3010\u65b0\u54c1\u96f60CM\u5d4c\u5165\u5f0f\u3011\u6d77\u5c14\u7535\u51b0\u7bb1410L\u5bb6\u7528\u6cd5\u5f0f\u56db\u95e8\u591a\u95e8\u5b98\u65b9\u6b63\u54c1",
      "original_price": "",
      "unit_price": "\uffe55746.00"
    }
  ],
  "reason": "",
  "request_id": "request_id",
  "secache": "c98b29872e8a4b28859db207944ba817",
  "secache_date": "2025-05-06 13:36:12",
  "secache_time": 1746509772000,
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:36:19,196 - apiutil_business.py:198 -[apiutil_business:extract_data_list] - json提取到参数：{'goodsIds': ['18382788819', '33809635011', '56996760797', '82193785267', '74190550836']}
INFO - 2025-05-06 13:36:19,198 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': '0000'}}]
INFO - 2025-05-06 13:36:19,198 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【0000】,实际结果【0000】
INFO - 2025-05-06 13:36:19,199 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:36:19,200 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:36:19,201 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:36:19,205 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：商品详情
INFO - 2025-05-06 13:36:19,206 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/productDetail
INFO - 2025-05-06 13:36:19,206 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:36:19,206 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：获取商品详情
INFO - 2025-05-06 13:36:19,206 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:36:19,206 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:36:19,206 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'pro_id': '18382788819', 'page': 1, 'size': 20}}
INFO - 2025-05-06 13:36:19,210 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "api_info": "today:21 max:10000 all[90=21+33+36];expires:2030-12-31",
  "api_type": "pinduoduo",
  "cache": 0,
  "call_args": {
    "num_iid": "1620002566"
  },
  "client_ip": "106.6.39.223",
  "error": "",
  "error_code": "0000",
  "execution_time": "0.437",
  "goodsId": "56996760797",
  "item": {
    "AmountOnSale": 3188,
    "CategoryId": 8484,
    "Coupon": null,
    "Delivery": {
      "From": null,
      "Info": null,
      "MarkInfo": null,
      "Postage": "\u5feb\u9012 \u514d\u8fd0\u8d39",
      "To": null,
      "extras": null
    },
    "DescUrl": null,
    "Detail": "<img src=\"https://img.pddpic.com/mms-material-img/2022-09-18/3f89d470-1af8-4dee-b529-6d62aa2ea3b7.png\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2019-02-15/ddf6fe7b-b536-4183-932d-69a1189a3f59.png\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/20f659b04d3e7e5851c27ff9931c96fc.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2019-11-14/4420a8c3-49ed-46d8-ab55-15e7a638ca31.jpg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/26c3e9d5cfbaf4e8f13b2bdd38f48d71.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/0aa872fa74599dad7b6aefe6b6c035c0.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/6bc959e32a30424c7a5284a37676999c.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/1fa9861a8c99c5e9e8119fd2239fef5a.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/b62cabf1d2320c5761e3f4c15203fb20.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/6f6e54376a66cbc78e16700d4c424fe1.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/2f60753dfc875a6876adc35833a69d31.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/ae0116e589d8de712f8dafd0c356cefe.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/da910c98fcc8de1b4d2d1498cd7899fd.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/140349649d8b7d08c8e88bfbbaa2f900.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/a953bae2eeb7364ef3ef2976a97d07eb.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/4da59828136c3b1308aad0aa990778a7.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/4a365b61a80e47288c8609ccd5982396.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-11-17/cd0a8a96b783a51236812ce24c59a329.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-11-17/16008ac19768d05e7dee16406ff958a1.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-11-17/ef1d17b69ebf9449a8bb52459b168c26.jpeg\" style=\"width:100%;\"/>",
    "FansCount": null,
    "ImageUrls": [
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/bcf848aa71c6389607ae7a84b70f1543.jpeg",
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/176019babfdecffa1d9f98f40b7e99b4.jpeg",
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/d209ef7bcc9183c3bb8ca1dfdb108d49.jpeg",
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/74257ab65f3f00da7a90fde9042fe640.jpeg",
      "https://t00img.yangkeduo.com/goods/images/2019-08-17/e8fbd9cb-cc74-4caa-9380-84c46d27b008.jpg",
      "https://t00img.yangkeduo.com/goods/images/2019-08-17/d76f515b-e375-4060-b94e-cf64f6b0964e.jpg",
      "https://t00img.yangkeduo.com/goods/images/2019-08-17/f2f279b5-6000-4fbe-b99b-7c1cbd7884ea.jpg"
    ],
    "MainImageVideo": null,
    "OfferId": 1620002566,
    "OriginalPriceRangeInfos": [
      {
        "ConvertPrice": 0,
        "Price": 115,
        "Range": "3"
      }
    ],
    "PriceRangeInfos": [
      {
        "ConvertPrice": 0,
        "Price": 95.4,
        "Range": "3"
      }
    ],
    "ProductFeatureTuples": [
      {
        "Item1": "\u9762\u6599\u6750\u8d28",
        "Item2": "\u4eff\u76ae\u8349"
      },
      {
        "Item1": "\u6210\u5206\u542b\u91cf",
        "Item2": "71%\uff08\u542b\uff09\u201480%\uff08\u542b\uff09"
      },
      {
        "Item1": "\u7248\u578b",
        "Item2": "\u4fee\u8eab"
      },
      {
        "Item1": "\u9886\u578b",
        "Item2": "\u5706\u9886"
      },
      {
        "Item1": "\u8863\u957f",
        "Item2": "\u77ed\u6b3e"
      },
      {
        "Item1": "\u662f\u5426\u5e26\u6bdb\u9886",
        "Item2": "\u4e0d\u5e26\u6bdb\u9886"
      },
      {
        "Item1": "\u4e3b\u98ce\u683c",
        "Item2": "\u6c14\u8d28\u540d\u5a9b"
      }
    ],
    "ProductFeatures": {
      "\u4e3b\u98ce\u683c": "\u6c14\u8d28\u540d\u5a9b",
      "\u6210\u5206\u542b\u91cf": "71%\uff08\u542b\uff09\u201480%\uff08\u542b\uff09",
      "\u662f\u5426\u5e26\u6bdb\u9886": "\u4e0d\u5e26\u6bdb\u9886",
      "\u7248\u578b": "\u4fee\u8eab",
      "\u8863\u957f": "\u77ed\u6b3e",
      "\u9762\u6599\u6750\u8d28": "\u4eff\u76ae\u8349",
      "\u9886\u578b": "\u5706\u9886"
    },
    "RateCount": null,
    "RetryCount": 0,
    "SellCount": "\u5df2\u62fc4.2\u4e07\u4ef6",
    "SellerId": null,
    "SellerNick": null,
    "ShopId": "461742",
    "ShopInfo": null,
    "ShopName": "\u679c\u679c\u5bb6\u6c14\u8d28\u5973\u88c5",
    "ShopUrl": "http://yangkeduo.com/mall_page.html?mall_id=461742",
    "SkuMaps": [
      {
        "AmountOnSale": 73,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:119128",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357891",
        "SpecAttributes": {
          "\u5c3a\u7801": "S\uff0890\u65a4\u4ee5\u4e0b\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 65,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:96784",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357892",
        "SpecAttributes": {
          "\u5c3a\u7801": "M\uff0890-100\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 82,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:33651",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357893",
        "SpecAttributes": {
          "\u5c3a\u7801": "L\uff08100-110\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 89,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:33652",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357894",
        "SpecAttributes": {
          "\u5c3a\u7801": "XL\uff08110-120\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 94,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:33653",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357895",
        "SpecAttributes": {
          "\u5c3a\u7801": "2XL\uff08120-130\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 105,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:33656",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357896",
        "SpecAttributes": {
          "\u5c3a\u7801": "3XL\uff08130-140\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 1051,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:119128",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357897",
        "SpecAttributes": {
          "\u5c3a\u7801": "S\uff0890\u65a4\u4ee5\u4e0b\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 88,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:96784",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357898",
        "SpecAttributes": {
          "\u5c3a\u7801": "M\uff0890-100\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 80,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:33651",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357899",
        "SpecAttributes": {
          "\u5c3a\u7801": "L\uff08100-110\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 660,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:33652",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357900",
        "SpecAttributes": {
          "\u5c3a\u7801": "XL\uff08110-120\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 126,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:33653",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357901",
        "SpecAttributes": {
          "\u5c3a\u7801": "2XL\uff08120-130\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 89,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:33656",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357902",
        "SpecAttributes": {
          "\u5c3a\u7801": "3XL\uff08130-140\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 98,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/48b30664f0f7e526ab1b956e813f25cf.jpeg",
        "Key": "1215:105309781;1226:119128",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107855",
        "SpecAttributes": {
          "\u5c3a\u7801": "S\uff0890\u65a4\u4ee5\u4e0b\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 95,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/3660b7893ca5cda1ffcea745d10b2506.jpeg",
        "Key": "1215:105309781;1226:96784",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107856",
        "SpecAttributes": {
          "\u5c3a\u7801": "M\uff0890-100\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 97,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/a4a5a671afbb2d8e1f4c21c0ced3bea8.jpeg",
        "Key": "1215:105309781;1226:33651",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107857",
        "SpecAttributes": {
          "\u5c3a\u7801": "L\uff08100-110\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 97,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/f0551176629bf81f25757c160198dba1.jpeg",
        "Key": "1215:105309781;1226:33652",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107858",
        "SpecAttributes": {
          "\u5c3a\u7801": "XL\uff08110-120\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 99,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/801a2e23140bfe76229f02aab0a8a5fe.jpeg",
        "Key": "1215:105309781;1226:33653",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107853",
        "SpecAttributes": {
          "\u5c3a\u7801": "2XL\uff08120-130\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 100,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/2f202934f16f0eee41257b77bf489262.jpeg",
        "Key": "1215:105309781;1226:33656",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107854",
        "SpecAttributes": {
          "\u5c3a\u7801": "3XL\uff08130-140\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      }
    ],
    "SkuProps": [
      {
        "IsImg": true,
        "Prop": "\u989c\u8272",
        "Value": [
          {
            "imageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
            "name": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)",
            "value": "1215:1115500378"
          },
          {
            "imageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
            "name": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09",
            "value": "1215:1115501666"
          },
          {
            "imageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/48b30664f0f7e526ab1b956e813f25cf.jpeg",
            "name": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09",
            "value": "1215:105309781"
          }
        ]
      },
      {
        "IsImg": false,
        "Prop": "\u5c3a\u7801",
        "Value": [
          {
            "name": "S\uff0890\u65a4\u4ee5\u4e0b\uff09",
            "value": "1226:119128"
          },
          {
            "name": "M\uff0890-100\u65a4\uff09",
            "value": "1226:96784"
          },
          {
            "name": "L\uff08100-110\u65a4\uff09",
            "value": "1226:33651"
          },
          {
            "name": "XL\uff08110-120\u65a4\uff09",
            "value": "1226:33652"
          },
          {
            "name": "2XL\uff08120-130\u65a4\uff09",
            "value": "1226:33653"
          },
          {
            "name": "3XL\uff08130-140\u65a4\uff09",
            "value": "1226:33656"
          }
        ]
      }
    ],
    "SourceType": 6,
    "Subject": "\u30102\u4ef6\u5957\u3011\u5957\u88c5\u79cb\u51ac\u65b0\u6b3e\u4eff\u736d\u5154\u6bdb\u9489\u73e0\u76ae\u8349\u6bdb\u6bdb\u77ed\u5916\u5957\u52a0\u539a\u5927\u8863\u5973\u88c5",
    "Tag": null,
    "Unit": null,
    "UserId": "461742",
    "_ddf": "app",
    "format_check": "ok"
  },
  "reason": "",
  "request_id": "gw-4.63510267214bd",
  "secache": "c98b29872e8a4b28859db207944ba817",
  "secache_date": "2025-05-06 13:36:19",
  "secache_time": 1666253415,
  "server_memory": "0.84MB",
  "server_time": "Beijing/2023-10-20 16:10:15",
  "translate_engine": "baidu",
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:36:19,211 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'error_code': '0000'}}]
INFO - 2025-05-06 13:36:19,211 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'error_code': '0000'}，等于预期结果：{'error_code': '0000'}
INFO - 2025-05-06 13:36:19,211 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:36:19,211 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:36:19,212 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:36:19,213 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：提交订单
INFO - 2025-05-06 13:36:19,214 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/placeAnOrder
INFO - 2025-05-06 13:36:19,214 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:36:19,214 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：详情页面选择规格，提交订单
INFO - 2025-05-06 13:36:19,214 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:36:19,214 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:36:19,214 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'goods_id': '18382788819', 'number': 2, 'propertyChildIds': '2:9', 'inviter_id': 127839112, 'price': '128', 'freight_insurance': '0.00', 'discount_code': '002399', 'consignee_info': {'name': '张三', 'phone': 13800000000, 'address': '北京市海淀区西三环北路74号院4栋3单元1008'}}}
INFO - 2025-05-06 13:36:19,240 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "crateTime": "2025-05-06 13:36:19",
  "error": "",
  "error_code": "0000",
  "message": "\u63d0\u4ea4\u8ba2\u5355\u6210\u529f",
  "orderNumber": "769369944886268541355",
  "translate_language": "zh-CN",
  "userId": "9623557772977266982"
}

INFO - 2025-05-06 13:36:19,240 - apiutil_business.py:171 -[apiutil_business:extract_data] - json提取到参数：{'orderNumber': '769369944886268541355'}
INFO - 2025-05-06 13:36:19,240 - apiutil_business.py:171 -[apiutil_business:extract_data] - json提取到参数：{'userId': '9623557772977266982'}
INFO - 2025-05-06 13:36:19,241 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'message': '提交订单成功'}}]
INFO - 2025-05-06 13:36:19,241 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'message': '提交订单成功'}，等于预期结果：{'message': '提交订单成功'}
INFO - 2025-05-06 13:36:19,241 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:36:19,241 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:36:19,242 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:36:19,245 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：订单支付
INFO - 2025-05-06 13:36:19,245 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/orderPay
INFO - 2025-05-06 13:36:19,245 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:36:19,245 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：订单支付
INFO - 2025-05-06 13:36:19,245 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:36:19,245 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:36:19,245 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'orderNumber': '769369944886268541355', 'userId': '9623557772977266982', 'timeStamp': '1746509779'}}
INFO - 2025-05-06 13:36:19,271 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "createTime": "2025-05-06 13:36:19",
  "error": "",
  "error_code": "0000",
  "message": "\u8ba2\u5355\u652f\u4ed8\u6210\u529f",
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:36:19,271 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'message': '订单支付成功'}}]
INFO - 2025-05-06 13:36:19,271 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'message': '订单支付成功'}，等于预期结果：{'message': '订单支付成功'}
INFO - 2025-05-06 13:36:19,271 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:36:19,271 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:36:19,272 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:36:19,274 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：校验订单状态
INFO - 2025-05-06 13:36:19,274 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/checkOrderStatus
INFO - 2025-05-06 13:36:19,274 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:36:19,274 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：校验商品订单状态
INFO - 2025-05-06 13:36:19,274 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:36:19,275 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:36:19,275 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'orderNumber': '769369944886268541355', 'timeStamp': '1746509779'}}
INFO - 2025-05-06 13:36:19,302 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error": "",
  "error_code": "",
  "queryTime": "2025-05-06 13:36:19",
  "status": "0",
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:36:19,302 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'status': '0'}}]
INFO - 2025-05-06 13:36:19,302 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'status': '0'}，等于预期结果：{'status': '0'}
INFO - 2025-05-06 13:36:19,302 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:36:19,303 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:08,388 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：用户登录
INFO - 2025-05-06 13:37:08,389 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/login
INFO - 2025-05-06 13:37:08,389 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:37:08,389 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：用户名和密码正确登录验证
INFO - 2025-05-06 13:37:08,389 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:37:08,390 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:08,390 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_name': 'test01', 'passwd': 'admin123'}}
INFO - 2025-05-06 13:37:08,414 - sendrequest.py:107 -[sendrequest:send_request] - cookie：{'Cookie': {'access_token_cookie': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTc0NjUwOTgyOCwianRpIjoiNGNiNzVlNGQtMjU0Ny00MTdjLTk2NTctNzQ3OWI0MzQyMmMwIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6ImV4YW1wbGVfdXNlciIsIm5iZiI6MTc0NjUwOTgyOCwiY3NyZiI6IjRhOTM3ODIwLWI4NjgtNDRjYi1hMmI3LTYyMDZhNjAwMTZiOSIsImV4cCI6MTc0NjUxMDcyOH0.9g2e0fsV0u_5CI8XgGu9k6mkHLXchAvYcFmZ9Ycmfz4', 'csrf_access_token': '4a937820-b868-44cb-a2b7-6206a60016b9'}}
INFO - 2025-05-06 13:37:08,414 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u767b\u5f55\u6210\u529f",
  "msg_code": 200,
  "orgId": "4140913758110176843",
  "token": "cf3FCFe770306980e4e9e8e9FBB4B",
  "userId": "9623557772977266982"
}

INFO - 2025-05-06 13:37:08,414 - apiutil.py:154 -[apiutil:extract_data] - 提取接口的返回值：
INFO - 2025-05-06 13:37:08,414 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': 'none'}}, {'eq': {'msg': '登录成功'}}]
INFO - 2025-05-06 13:37:08,415 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【None】,实际结果【[None]】
INFO - 2025-05-06 13:37:08,415 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'msg': '登录成功'}，等于预期结果：{'msg': '登录成功'}
INFO - 2025-05-06 13:37:08,415 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:08,415 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
ERROR - 2025-05-06 13:37:08,417 - readyaml.py:113 -[readyaml:get_extract_yaml] - 【extract.yaml】没有找到：cookie,--'cookie'
ERROR - 2025-05-06 13:37:08,417 - readyaml.py:113 -[readyaml:get_extract_yaml] - 【extract.yaml】没有找到：cookie,--'cookie'
INFO - 2025-05-06 13:37:08,417 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：商品列表
INFO - 2025-05-06 13:37:08,417 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/goodsList
INFO - 2025-05-06 13:37:08,417 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：Get
INFO - 2025-05-06 13:37:08,417 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：获取商品列表
INFO - 2025-05-06 13:37:08,417 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8', 'token': 'None'}
INFO - 2025-05-06 13:37:08,417 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:08,418 - sendrequest.py:150 -[sendrequest:run_main] - 请求参数：{'params': {'msgType': 'getHandsetListOfCust', 'page': 1, 'size': 20}}
INFO - 2025-05-06 13:37:08,443 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "api_info": "today:21 max:10000 all[90=21+33+36];expires:2030-12-31",
  "cache": 0,
  "error_code": "0000",
  "goodsList": [
    {
      "goodsId": "18382788819",
      "goods_count": "233",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/bcf848aa71c6389607ae7a84b70f1543.jpeg",
      "goods_name": "\u30102\u4ef6\u5957\u3011\u5957\u88c5\u79cb\u51ac\u65b0\u6b3e\u4eff\u736d\u5154\u6bdb\u9489\u73e0\u76ae\u8349\u6bdb\u6bdb\u77ed\u5916\u5957\u52a0\u539a\u5927\u8863\u5973\u88c5",
      "original_price": "",
      "unit_price": "\uffe599.00"
    },
    {
      "goodsId": "33809635011",
      "goods_count": "521",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/176019babfdecffa1d9f98f40b7e99b4.jpeg",
      "goods_name": "\u597d\u5947\u5c0f\u68ee\u6797\u5fc3\u94bb\u88c5\u7eb8\u5c3f\u88e4M22\u62c9\u62c9\u88e4L18/XL14\u8d85\u8584\u900f\u6c14\u88e4\u578b\u5c3f\u4e0d\u6e7f 1\u4ef6\u88c5",
      "original_price": "",
      "unit_price": "\uffe5108.00"
    },
    {
      "goodsId": "56996760797",
      "goods_count": "1181",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u51bb\u5e72\u9e21\u5c0f\u80f8\u6574\u5757\u589e\u80a5\u8425\u517b\u53d1\u816e\u72d7\u72d7\u96f6\u98df\u65b0\u624b\u517b\u732b\u96f6\u98df\u5e7c\u732b\u96f6\u98df100g",
      "original_price": "",
      "unit_price": "\uffe517.80"
    },
    {
      "goodsId": "82193785267",
      "goods_count": "3000+",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u3010\u81ea\u8425\u3011ISB\u4f0a\u73ca\u5a1c\u610f\u5927\u5229\u6c34\u679c\u7cfb\u5217\u5ba0\u7269\u72ac\u732b\u6c90\u6d74\u9732\u9664\u81ed\u9999\u6ce2\u62a4\u6bdb\u7d20",
      "original_price": "",
      "unit_price": "\uffe5650.00"
    },
    {
      "goodsId": "74190550836",
      "goods_count": "1000+",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u3010\u65b0\u54c1\u96f60CM\u5d4c\u5165\u5f0f\u3011\u6d77\u5c14\u7535\u51b0\u7bb1410L\u5bb6\u7528\u6cd5\u5f0f\u56db\u95e8\u591a\u95e8\u5b98\u65b9\u6b63\u54c1",
      "original_price": "",
      "unit_price": "\uffe55746.00"
    }
  ],
  "reason": "",
  "request_id": "request_id",
  "secache": "c98b29872e8a4b28859db207944ba817",
  "secache_date": "2025-05-06 13:36:12",
  "secache_time": 1746509772000,
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:37:08,443 - apiutil.py:183 -[apiutil:extract_data_list] - json提取到参数：{'goodsId': ['18382788819', '33809635011', '56996760797', '82193785267', '74190550836']}
INFO - 2025-05-06 13:37:08,444 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': '0000'}}]
INFO - 2025-05-06 13:37:08,444 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【0000】,实际结果【0000】
INFO - 2025-05-06 13:37:08,444 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:08,445 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:08,446 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:08,448 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：新增用户
INFO - 2025-05-06 13:37:08,448 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/addUser
INFO - 2025-05-06 13:37:08,448 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:37:08,448 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：正常新增用户
INFO - 2025-05-06 13:37:08,448 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:37:08,448 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:08,448 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789890', 'role_id': 123456789, 'dates': '2023-12-31', 'phone': 13800000000, 'token': 'cf3FCFe770306980e4e9e8e9FBB4B'}}
INFO - 2025-05-06 13:37:08,483 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：<!doctype html>
<html lang=en>
  <head>
    <title>FileNotFoundError: [Errno 2] No such file or directory: &#39;../data/mockdata/userManage.json&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "3Pv5OqYGgocJHOylQscb";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>FileNotFoundError</h1>
<div class="detail">
  <p class="errormsg">FileNotFoundError: [Errno 2] No such file or directory: &#39;../data/mockdata/userManage.json&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2183486322528">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2183486324400">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2183486323968">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2183486320656">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2183486324256">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2183486321664">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2183486321520">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\row_Test-Automation-Framework-main\mock_server\api_server\base\flask_service.py"</cite>,
      line <em class="line">188</em>,
      in <code class="function">add_user</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>role_id = flask.request.form.get(&#39;role_id&#39;)</pre>
<pre class="line before"><span class="ws">    </span>dates = flask.request.form.get(&#39;dates&#39;)</pre>
<pre class="line before"><span class="ws">    </span>phone = flask.request.form.get(&#39;phone&#39;)</pre>
<pre class="line before"><span class="ws">    </span>token = flask.request.form.get(&#39;token&#39;)</pre>
<pre class="line before"><span class="ws">    </span>if all([username, password, role_id, dates, phone]) and token == get_token[&#39;token&#39;]:</pre>
<pre class="line current"><span class="ws">        </span>with open(&#39;../data/mockdata/userManage.json&#39;, &#39;a&#39;, encoding=&#39;utf-8&#39;) as f:
<span class="ws">        </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>add_user_info = {</pre>
<pre class="line after"><span class="ws">                </span>&#39;id&#39;: &#39;&#39;.join([random.choice(string.digits) for i in range(11)]),</pre>
<pre class="line after"><span class="ws">                </span>&#39;username&#39;: username,</pre>
<pre class="line after"><span class="ws">                </span>&#39;password&#39;: password,</pre>
<pre class="line after"><span class="ws">                </span>&#39;role_id&#39;: role_id,</pre></div>
</div>
</ul>
  <blockquote>FileNotFoundError: [Errno 2] No such file or directory: &#39;../data/mockdata/userManage.json&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\row_Test-Automation-Framework-main\mock_server\api_server\base\flask_service.py&#34;, line 188, in add_user
    with open(&#39;../data/mockdata/userManage.json&#39;, &#39;a&#39;, encoding=&#39;utf-8&#39;) as f:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: &#39;../data/mockdata/userManage.json&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\row_Test-Automation-Framework-main\mock_server\api_server\base\flask_service.py", line 188, in add_user
    with open('../data/mockdata/userManage.json', 'a', encoding='utf-8') as f:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: '../data/mockdata/userManage.json'


-->

INFO - 2025-05-06 13:37:08,646 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:08,647 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:08,648 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：新增用户
INFO - 2025-05-06 13:37:08,648 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/addUser
INFO - 2025-05-06 13:37:08,648 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:37:08,648 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效新增·缺少token
INFO - 2025-05-06 13:37:08,648 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:37:08,649 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:08,649 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789890', 'role_id': 123456789, 'dates': '2023-12-31', 'phone': 13800000000, 'token': None}}
INFO - 2025-05-06 13:37:08,675 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u65b0\u589e\u5931\u8d25",
  "msg_code": 9001
}

INFO - 2025-05-06 13:37:08,676 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'status_code': 200}}, {'contains': {'msg': '新增失败'}}]
INFO - 2025-05-06 13:37:08,676 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【新增失败】,实际结果【新增失败】
INFO - 2025-05-06 13:37:08,676 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:08,677 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:08,678 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:08,679 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：新增用户
INFO - 2025-05-06 13:37:08,680 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/addUser
INFO - 2025-05-06 13:37:08,680 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:37:08,680 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效新增·缺少必填参数username
INFO - 2025-05-06 13:37:08,680 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:37:08,680 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:08,680 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'password': 'tset6789890', 'role_id': 123456789, 'dates': '2023-12-31', 'phone': 13800000000, 'token': None}}
INFO - 2025-05-06 13:37:08,707 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u65b0\u589e\u5931\u8d25",
  "msg_code": 9001
}

INFO - 2025-05-06 13:37:08,707 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'status_code': 200}}, {'contains': {'msg': '新增失败'}}]
INFO - 2025-05-06 13:37:08,708 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【新增失败】,实际结果【新增失败】
INFO - 2025-05-06 13:37:08,708 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:08,709 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:08,710 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:08,712 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：新增用户
INFO - 2025-05-06 13:37:08,712 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/addUser
INFO - 2025-05-06 13:37:08,712 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:37:08,712 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效新增·缺少必填参数role_id
INFO - 2025-05-06 13:37:08,712 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:37:08,712 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:08,712 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789890', 'dates': '2023-12-31', 'phone': 13800000000, 'token': None}}
INFO - 2025-05-06 13:37:08,714 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u65b0\u589e\u5931\u8d25",
  "msg_code": 9001
}

INFO - 2025-05-06 13:37:08,714 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'status_code': 200}}, {'contains': {'msg': '新增失败'}}]
INFO - 2025-05-06 13:37:08,715 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【新增失败】,实际结果【新增失败】
INFO - 2025-05-06 13:37:08,715 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:08,715 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:08,717 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:08,719 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：新增用户
INFO - 2025-05-06 13:37:08,720 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/addUser
INFO - 2025-05-06 13:37:08,720 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:37:08,720 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：正常新增用户
INFO - 2025-05-06 13:37:08,720 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:37:08,720 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:08,720 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789890', 'role_id': 123456789, 'dates': '2023-12-31', 'phone': 13800000000, 'token': 'cf3FCFe770306980e4e9e8e9FBB4B'}}
INFO - 2025-05-06 13:37:08,738 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：<!doctype html>
<html lang=en>
  <head>
    <title>FileNotFoundError: [Errno 2] No such file or directory: &#39;../data/mockdata/userManage.json&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "3Pv5OqYGgocJHOylQscb";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>FileNotFoundError</h1>
<div class="detail">
  <p class="errormsg">FileNotFoundError: [Errno 2] No such file or directory: &#39;../data/mockdata/userManage.json&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2183486321808">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2183486320800">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2183486320368">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2183486320944">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2183486321088">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2183486321232">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2183486321376">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\row_Test-Automation-Framework-main\mock_server\api_server\base\flask_service.py"</cite>,
      line <em class="line">188</em>,
      in <code class="function">add_user</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>role_id = flask.request.form.get(&#39;role_id&#39;)</pre>
<pre class="line before"><span class="ws">    </span>dates = flask.request.form.get(&#39;dates&#39;)</pre>
<pre class="line before"><span class="ws">    </span>phone = flask.request.form.get(&#39;phone&#39;)</pre>
<pre class="line before"><span class="ws">    </span>token = flask.request.form.get(&#39;token&#39;)</pre>
<pre class="line before"><span class="ws">    </span>if all([username, password, role_id, dates, phone]) and token == get_token[&#39;token&#39;]:</pre>
<pre class="line current"><span class="ws">        </span>with open(&#39;../data/mockdata/userManage.json&#39;, &#39;a&#39;, encoding=&#39;utf-8&#39;) as f:
<span class="ws">        </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>add_user_info = {</pre>
<pre class="line after"><span class="ws">                </span>&#39;id&#39;: &#39;&#39;.join([random.choice(string.digits) for i in range(11)]),</pre>
<pre class="line after"><span class="ws">                </span>&#39;username&#39;: username,</pre>
<pre class="line after"><span class="ws">                </span>&#39;password&#39;: password,</pre>
<pre class="line after"><span class="ws">                </span>&#39;role_id&#39;: role_id,</pre></div>
</div>
</ul>
  <blockquote>FileNotFoundError: [Errno 2] No such file or directory: &#39;../data/mockdata/userManage.json&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\row_Test-Automation-Framework-main\mock_server\api_server\base\flask_service.py&#34;, line 188, in add_user
    with open(&#39;../data/mockdata/userManage.json&#39;, &#39;a&#39;, encoding=&#39;utf-8&#39;) as f:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: &#39;../data/mockdata/userManage.json&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\row_Test-Automation-Framework-main\mock_server\api_server\base\flask_service.py", line 188, in add_user
    with open('../data/mockdata/userManage.json', 'a', encoding='utf-8') as f:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: '../data/mockdata/userManage.json'


-->

INFO - 2025-05-06 13:37:08,754 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:08,755 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:08,756 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：新增用户
INFO - 2025-05-06 13:37:08,756 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/addUser
INFO - 2025-05-06 13:37:08,756 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:37:08,757 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效新增·缺少token
INFO - 2025-05-06 13:37:08,757 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:37:08,757 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:08,757 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789890', 'role_id': 123456789, 'dates': '2023-12-31', 'phone': 13800000000, 'token': None}}
INFO - 2025-05-06 13:37:08,782 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u65b0\u589e\u5931\u8d25",
  "msg_code": 9001
}

INFO - 2025-05-06 13:37:08,782 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'status_code': 200}}, {'contains': {'msg': '新增失败'}}]
INFO - 2025-05-06 13:37:08,782 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【新增失败】,实际结果【新增失败】
INFO - 2025-05-06 13:37:08,782 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:08,783 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:08,784 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:08,785 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：新增用户
INFO - 2025-05-06 13:37:08,786 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/addUser
INFO - 2025-05-06 13:37:08,786 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:37:08,786 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效新增·缺少必填参数username
INFO - 2025-05-06 13:37:08,786 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:37:08,786 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:08,786 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'password': 'tset6789890', 'role_id': 123456789, 'dates': '2023-12-31', 'phone': 13800000000, 'token': None}}
INFO - 2025-05-06 13:37:08,812 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u65b0\u589e\u5931\u8d25",
  "msg_code": 9001
}

INFO - 2025-05-06 13:37:08,813 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'status_code': 200}}, {'contains': {'msg': '新增失败'}}]
INFO - 2025-05-06 13:37:08,813 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【新增失败】,实际结果【新增失败】
INFO - 2025-05-06 13:37:08,813 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:08,813 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:08,815 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:08,816 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：新增用户
INFO - 2025-05-06 13:37:08,817 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/addUser
INFO - 2025-05-06 13:37:08,817 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:37:08,817 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效新增·缺少必填参数role_id
INFO - 2025-05-06 13:37:08,817 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:37:08,817 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:08,817 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789890', 'dates': '2023-12-31', 'phone': 13800000000, 'token': None}}
INFO - 2025-05-06 13:37:08,843 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u65b0\u589e\u5931\u8d25",
  "msg_code": 9001
}

INFO - 2025-05-06 13:37:08,843 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'status_code': 200}}, {'contains': {'msg': '新增失败'}}]
INFO - 2025-05-06 13:37:08,843 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【新增失败】,实际结果【新增失败】
INFO - 2025-05-06 13:37:08,844 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:08,845 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:08,846 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:08,849 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：商品详情
INFO - 2025-05-06 13:37:08,849 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/productDetail
INFO - 2025-05-06 13:37:08,849 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:37:08,849 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：获取商品详情
INFO - 2025-05-06 13:37:08,849 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:37:08,849 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:08,849 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'pro_id': '18382788819,33809635011,56996760797,82193785267,74190550836', 'page': 1, 'size': 20}}
INFO - 2025-05-06 13:37:08,852 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error": "\u4e0d\u5b58\u5728\u8be5\u5546\u54c1",
  "error_code": "4000",
  "goodsId": "",
  "item": {},
  "secache_date": "2025-05-06 13:37:08",
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:37:08,853 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': '4000'}}]
INFO - 2025-05-06 13:37:08,853 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【4000】,实际结果【4000】
INFO - 2025-05-06 13:37:08,853 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:08,853 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:08,854 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:08,855 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：修改用户
INFO - 2025-05-06 13:37:08,856 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/updateUser
INFO - 2025-05-06 13:37:08,856 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:37:08,856 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：正常修改用户信息
INFO - 2025-05-06 13:37:08,856 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:37:08,856 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:08,856 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789#$123', 'role_id': 89588181111112343, 'dates': '2023-12-31', 'phone': 13800000000}}
INFO - 2025-05-06 13:37:08,873 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u66f4\u65b0\u6210\u529f",
  "msg_code": 200
}

INFO - 2025-05-06 13:37:08,874 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'status_code': 200}}, {'contains': {'msg': '更新成功'}}]
INFO - 2025-05-06 13:37:08,874 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【更新成功】,实际结果【更新成功】
INFO - 2025-05-06 13:37:08,874 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:08,874 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:08,876 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:08,877 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：修改用户
INFO - 2025-05-06 13:37:08,877 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/updateUser
INFO - 2025-05-06 13:37:08,877 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:37:08,877 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：正常修改用户信息
INFO - 2025-05-06 13:37:08,877 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:37:08,878 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:08,878 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789#$123', 'role_id': 89588181111112343, 'dates': '2023-12-31', 'phone': 13800000000}}
INFO - 2025-05-06 13:37:08,879 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u66f4\u65b0\u6210\u529f",
  "msg_code": 200
}

INFO - 2025-05-06 13:37:08,880 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'status_code': 200}}, {'contains': {'msg': '更新成功'}}]
INFO - 2025-05-06 13:37:08,880 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【更新成功】,实际结果【更新成功】
INFO - 2025-05-06 13:37:08,880 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:08,880 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:08,881 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:08,884 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：提交订单
INFO - 2025-05-06 13:37:08,884 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/placeAnOrder
INFO - 2025-05-06 13:37:08,884 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:37:08,884 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：提交订单
INFO - 2025-05-06 13:37:08,884 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:37:08,884 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:08,884 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'goods_id': '33809635011', 'number': 2, 'propertyChildIds': '2:9', 'inviter_id': '127839112', 'price': '128', 'freight_insurance': '0.0', 'discount_code': '002399', 'consignee_info': {'name': '张三', 'phone': 13800000000, 'address': '北京市海淀区西三环北路74号院4栋3单元1008'}}}
INFO - 2025-05-06 13:37:08,904 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "crateTime": "2025-05-06 13:37:08",
  "error": "",
  "error_code": "0000",
  "message": "\u63d0\u4ea4\u8ba2\u5355\u6210\u529f",
  "orderNumber": "456780105633197221469",
  "translate_language": "zh-CN",
  "userId": "9623557772977266982"
}

INFO - 2025-05-06 13:37:08,904 - apiutil.py:154 -[apiutil:extract_data] - 提取接口的返回值：
INFO - 2025-05-06 13:37:08,905 - apiutil.py:154 -[apiutil:extract_data] - 提取接口的返回值：
INFO - 2025-05-06 13:37:08,905 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'message': '提交订单成功'}}, {'eq': {'error_code': '0000'}}]
INFO - 2025-05-06 13:37:08,905 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'message': '提交订单成功'}，等于预期结果：{'message': '提交订单成功'}
INFO - 2025-05-06 13:37:08,905 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'error_code': '0000'}，等于预期结果：{'error_code': '0000'}
INFO - 2025-05-06 13:37:08,905 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:08,906 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:08,907 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:08,908 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-05-06 13:37:08,908 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-05-06 13:37:08,908 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:37:08,909 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：有效删除用户
INFO - 2025-05-06 13:37:08,909 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:37:08,909 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:08,909 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 123839387391912}}
INFO - 2025-05-06 13:37:08,935 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u5220\u9664\u6210\u529f!",
  "msg_code": 200
}

INFO - 2025-05-06 13:37:08,935 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除成功'}}]
INFO - 2025-05-06 13:37:08,935 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除成功】,实际结果【删除成功!】
INFO - 2025-05-06 13:37:08,935 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:08,936 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:08,936 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:08,938 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-05-06 13:37:08,938 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-05-06 13:37:08,938 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:37:08,938 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效删除用户·userid不存在
INFO - 2025-05-06 13:37:08,938 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:37:08,938 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:08,938 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 1238393873922}}
INFO - 2025-05-06 13:37:08,951 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u5220\u9664\u5931\u8d25\uff0c\u7528\u6237id\u4e0d\u5b58\u5728!",
  "msg_code": 9001
}

INFO - 2025-05-06 13:37:08,951 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除失败'}}]
INFO - 2025-05-06 13:37:08,951 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除失败】,实际结果【删除失败，用户id不存在!】
INFO - 2025-05-06 13:37:08,951 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:08,951 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:08,952 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:08,953 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-05-06 13:37:08,953 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-05-06 13:37:08,953 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:37:08,953 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效删除用户·userid为空
INFO - 2025-05-06 13:37:08,953 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:37:08,953 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:08,953 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 1238393873922}}
INFO - 2025-05-06 13:37:08,955 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u5220\u9664\u5931\u8d25\uff0c\u7528\u6237id\u4e0d\u5b58\u5728!",
  "msg_code": 9001
}

INFO - 2025-05-06 13:37:08,955 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除失败'}}]
INFO - 2025-05-06 13:37:08,956 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除失败】,实际结果【删除失败，用户id不存在!】
INFO - 2025-05-06 13:37:08,956 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:08,956 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:08,957 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:08,958 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-05-06 13:37:08,958 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-05-06 13:37:08,958 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:37:08,958 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效删除用户·缺少必填参数
INFO - 2025-05-06 13:37:08,958 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:37:08,958 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:08,981 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u5220\u9664\u5931\u8d25\uff0c\u7528\u6237id\u4e0d\u5b58\u5728!",
  "msg_code": 9001
}

INFO - 2025-05-06 13:37:08,981 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除失败'}}]
INFO - 2025-05-06 13:37:08,981 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除失败】,实际结果【删除失败，用户id不存在!】
INFO - 2025-05-06 13:37:08,981 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:08,982 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:08,982 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:08,984 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-05-06 13:37:08,984 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-05-06 13:37:08,984 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:37:08,984 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：有效删除用户
INFO - 2025-05-06 13:37:08,984 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:37:08,984 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:08,984 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 123839387391912}}
INFO - 2025-05-06 13:37:08,996 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u5220\u9664\u6210\u529f!",
  "msg_code": 200
}

INFO - 2025-05-06 13:37:08,997 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除成功'}}]
INFO - 2025-05-06 13:37:08,997 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除成功】,实际结果【删除成功!】
INFO - 2025-05-06 13:37:08,997 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:08,998 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:08,999 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:09,000 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-05-06 13:37:09,001 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-05-06 13:37:09,001 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:37:09,001 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效删除用户·userid不存在
INFO - 2025-05-06 13:37:09,001 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:37:09,001 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:09,001 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 1238393873922}}
INFO - 2025-05-06 13:37:09,028 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u5220\u9664\u5931\u8d25\uff0c\u7528\u6237id\u4e0d\u5b58\u5728!",
  "msg_code": 9001
}

INFO - 2025-05-06 13:37:09,028 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除失败'}}]
INFO - 2025-05-06 13:37:09,029 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除失败】,实际结果【删除失败，用户id不存在!】
INFO - 2025-05-06 13:37:09,029 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:09,030 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:09,030 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:09,032 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-05-06 13:37:09,032 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-05-06 13:37:09,032 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:37:09,032 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效删除用户·userid为空
INFO - 2025-05-06 13:37:09,032 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:37:09,032 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:09,032 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 1238393873922}}
INFO - 2025-05-06 13:37:09,059 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u5220\u9664\u5931\u8d25\uff0c\u7528\u6237id\u4e0d\u5b58\u5728!",
  "msg_code": 9001
}

INFO - 2025-05-06 13:37:09,059 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除失败'}}]
INFO - 2025-05-06 13:37:09,059 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除失败】,实际结果【删除失败，用户id不存在!】
INFO - 2025-05-06 13:37:09,059 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:09,060 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:09,061 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:09,062 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-05-06 13:37:09,062 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-05-06 13:37:09,063 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:37:09,063 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效删除用户·缺少必填参数
INFO - 2025-05-06 13:37:09,063 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:37:09,063 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:09,093 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u5220\u9664\u5931\u8d25\uff0c\u7528\u6237id\u4e0d\u5b58\u5728!",
  "msg_code": 9001
}

INFO - 2025-05-06 13:37:09,094 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除失败'}}]
INFO - 2025-05-06 13:37:09,094 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除失败】,实际结果【删除失败，用户id不存在!】
INFO - 2025-05-06 13:37:09,094 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:09,096 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:09,099 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:09,107 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：订单支付
INFO - 2025-05-06 13:37:09,108 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/orderPay
INFO - 2025-05-06 13:37:09,108 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:37:09,108 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：订单支付
INFO - 2025-05-06 13:37:09,108 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:37:09,108 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:09,108 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'orderNumber': '456780105633197221469', 'userId': '9623557772977266982', 'timeStamp': '1746509829'}}
INFO - 2025-05-06 13:37:09,121 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "createTime": "2025-05-06 13:37:09",
  "error": "",
  "error_code": "0000",
  "message": "\u8ba2\u5355\u652f\u4ed8\u6210\u529f",
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:37:09,121 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'message': '订单支付成功'}}, {'contains': {'error_code': '0000'}}]
INFO - 2025-05-06 13:37:09,121 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【订单支付成功】,实际结果【订单支付成功】
INFO - 2025-05-06 13:37:09,122 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【0000】,实际结果【0000】
INFO - 2025-05-06 13:37:09,122 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:09,123 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:09,124 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:09,126 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：用户查询
INFO - 2025-05-06 13:37:09,126 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/queryUser
INFO - 2025-05-06 13:37:09,126 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:37:09,126 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：有效查询用户
INFO - 2025-05-06 13:37:09,126 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:37:09,126 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:09,126 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 123839387391912}}
INFO - 2025-05-06 13:37:09,151 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u67e5\u8be2\u6210\u529f!",
  "msg_code": 200
}

INFO - 2025-05-06 13:37:09,151 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '查询成功'}}, {'eq': {'msg_code': 200}}]
INFO - 2025-05-06 13:37:09,152 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【查询成功】,实际结果【查询成功!】
INFO - 2025-05-06 13:37:09,152 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'msg_code': 200}，等于预期结果：{'msg_code': 200}
INFO - 2025-05-06 13:37:09,152 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:09,152 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:09,153 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:09,154 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：用户查询
INFO - 2025-05-06 13:37:09,155 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/queryUser
INFO - 2025-05-06 13:37:09,155 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:37:09,155 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：有效查询用户
INFO - 2025-05-06 13:37:09,155 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:37:09,155 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:09,155 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 123839387391912}}
INFO - 2025-05-06 13:37:09,182 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u67e5\u8be2\u6210\u529f!",
  "msg_code": 200
}

INFO - 2025-05-06 13:37:09,182 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '查询成功'}}, {'eq': {'msg_code': 200}}]
INFO - 2025-05-06 13:37:09,182 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【查询成功】,实际结果【查询成功!】
INFO - 2025-05-06 13:37:09,182 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'msg_code': 200}，等于预期结果：{'msg_code': 200}
INFO - 2025-05-06 13:37:09,182 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:09,183 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:09,184 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:09,187 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：商品列表
INFO - 2025-05-06 13:37:09,187 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/goodsList
INFO - 2025-05-06 13:37:09,187 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：Get
INFO - 2025-05-06 13:37:09,187 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：获取商品列表
INFO - 2025-05-06 13:37:09,187 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8', 'token': 'cf3FCFe770306980e4e9e8e9FBB4B'}
INFO - 2025-05-06 13:37:09,187 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:09,187 - sendrequest.py:150 -[sendrequest:run_main] - 请求参数：{'params': {'msgType': 'getHandsetListOfCust', 'page': 1, 'size': 20}}
INFO - 2025-05-06 13:37:09,214 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "api_info": "today:21 max:10000 all[90=21+33+36];expires:2030-12-31",
  "cache": 0,
  "error_code": "0000",
  "goodsList": [
    {
      "goodsId": "18382788819",
      "goods_count": "233",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/bcf848aa71c6389607ae7a84b70f1543.jpeg",
      "goods_name": "\u30102\u4ef6\u5957\u3011\u5957\u88c5\u79cb\u51ac\u65b0\u6b3e\u4eff\u736d\u5154\u6bdb\u9489\u73e0\u76ae\u8349\u6bdb\u6bdb\u77ed\u5916\u5957\u52a0\u539a\u5927\u8863\u5973\u88c5",
      "original_price": "",
      "unit_price": "\uffe599.00"
    },
    {
      "goodsId": "33809635011",
      "goods_count": "521",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/176019babfdecffa1d9f98f40b7e99b4.jpeg",
      "goods_name": "\u597d\u5947\u5c0f\u68ee\u6797\u5fc3\u94bb\u88c5\u7eb8\u5c3f\u88e4M22\u62c9\u62c9\u88e4L18/XL14\u8d85\u8584\u900f\u6c14\u88e4\u578b\u5c3f\u4e0d\u6e7f 1\u4ef6\u88c5",
      "original_price": "",
      "unit_price": "\uffe5108.00"
    },
    {
      "goodsId": "56996760797",
      "goods_count": "1181",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u51bb\u5e72\u9e21\u5c0f\u80f8\u6574\u5757\u589e\u80a5\u8425\u517b\u53d1\u816e\u72d7\u72d7\u96f6\u98df\u65b0\u624b\u517b\u732b\u96f6\u98df\u5e7c\u732b\u96f6\u98df100g",
      "original_price": "",
      "unit_price": "\uffe517.80"
    },
    {
      "goodsId": "82193785267",
      "goods_count": "3000+",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u3010\u81ea\u8425\u3011ISB\u4f0a\u73ca\u5a1c\u610f\u5927\u5229\u6c34\u679c\u7cfb\u5217\u5ba0\u7269\u72ac\u732b\u6c90\u6d74\u9732\u9664\u81ed\u9999\u6ce2\u62a4\u6bdb\u7d20",
      "original_price": "",
      "unit_price": "\uffe5650.00"
    },
    {
      "goodsId": "74190550836",
      "goods_count": "1000+",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u3010\u65b0\u54c1\u96f60CM\u5d4c\u5165\u5f0f\u3011\u6d77\u5c14\u7535\u51b0\u7bb1410L\u5bb6\u7528\u6cd5\u5f0f\u56db\u95e8\u591a\u95e8\u5b98\u65b9\u6b63\u54c1",
      "original_price": "",
      "unit_price": "\uffe55746.00"
    }
  ],
  "reason": "",
  "request_id": "request_id",
  "secache": "c98b29872e8a4b28859db207944ba817",
  "secache_date": "2025-05-06 13:36:12",
  "secache_time": 1746509772000,
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:37:09,215 - apiutil_business.py:198 -[apiutil_business:extract_data_list] - json提取到参数：{'goodsIds': ['18382788819', '33809635011', '56996760797', '82193785267', '74190550836']}
INFO - 2025-05-06 13:37:09,216 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': '0000'}}]
INFO - 2025-05-06 13:37:09,217 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【0000】,实际结果【0000】
INFO - 2025-05-06 13:37:09,217 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:09,218 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:09,219 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:09,223 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：商品详情
INFO - 2025-05-06 13:37:09,223 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/productDetail
INFO - 2025-05-06 13:37:09,223 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:37:09,223 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：获取商品详情
INFO - 2025-05-06 13:37:09,223 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:37:09,223 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:09,223 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'pro_id': '18382788819', 'page': 1, 'size': 20}}
INFO - 2025-05-06 13:37:09,226 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "api_info": "today:21 max:10000 all[90=21+33+36];expires:2030-12-31",
  "api_type": "pinduoduo",
  "cache": 0,
  "call_args": {
    "num_iid": "1620002566"
  },
  "client_ip": "106.6.39.223",
  "error": "",
  "error_code": "0000",
  "execution_time": "0.437",
  "goodsId": "56996760797",
  "item": {
    "AmountOnSale": 3188,
    "CategoryId": 8484,
    "Coupon": null,
    "Delivery": {
      "From": null,
      "Info": null,
      "MarkInfo": null,
      "Postage": "\u5feb\u9012 \u514d\u8fd0\u8d39",
      "To": null,
      "extras": null
    },
    "DescUrl": null,
    "Detail": "<img src=\"https://img.pddpic.com/mms-material-img/2022-09-18/3f89d470-1af8-4dee-b529-6d62aa2ea3b7.png\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2019-02-15/ddf6fe7b-b536-4183-932d-69a1189a3f59.png\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/20f659b04d3e7e5851c27ff9931c96fc.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2019-11-14/4420a8c3-49ed-46d8-ab55-15e7a638ca31.jpg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/26c3e9d5cfbaf4e8f13b2bdd38f48d71.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/0aa872fa74599dad7b6aefe6b6c035c0.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/6bc959e32a30424c7a5284a37676999c.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/1fa9861a8c99c5e9e8119fd2239fef5a.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/b62cabf1d2320c5761e3f4c15203fb20.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/6f6e54376a66cbc78e16700d4c424fe1.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/2f60753dfc875a6876adc35833a69d31.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/ae0116e589d8de712f8dafd0c356cefe.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/da910c98fcc8de1b4d2d1498cd7899fd.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/140349649d8b7d08c8e88bfbbaa2f900.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/a953bae2eeb7364ef3ef2976a97d07eb.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/4da59828136c3b1308aad0aa990778a7.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/4a365b61a80e47288c8609ccd5982396.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-11-17/cd0a8a96b783a51236812ce24c59a329.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-11-17/16008ac19768d05e7dee16406ff958a1.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-11-17/ef1d17b69ebf9449a8bb52459b168c26.jpeg\" style=\"width:100%;\"/>",
    "FansCount": null,
    "ImageUrls": [
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/bcf848aa71c6389607ae7a84b70f1543.jpeg",
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/176019babfdecffa1d9f98f40b7e99b4.jpeg",
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/d209ef7bcc9183c3bb8ca1dfdb108d49.jpeg",
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/74257ab65f3f00da7a90fde9042fe640.jpeg",
      "https://t00img.yangkeduo.com/goods/images/2019-08-17/e8fbd9cb-cc74-4caa-9380-84c46d27b008.jpg",
      "https://t00img.yangkeduo.com/goods/images/2019-08-17/d76f515b-e375-4060-b94e-cf64f6b0964e.jpg",
      "https://t00img.yangkeduo.com/goods/images/2019-08-17/f2f279b5-6000-4fbe-b99b-7c1cbd7884ea.jpg"
    ],
    "MainImageVideo": null,
    "OfferId": 1620002566,
    "OriginalPriceRangeInfos": [
      {
        "ConvertPrice": 0,
        "Price": 115,
        "Range": "3"
      }
    ],
    "PriceRangeInfos": [
      {
        "ConvertPrice": 0,
        "Price": 95.4,
        "Range": "3"
      }
    ],
    "ProductFeatureTuples": [
      {
        "Item1": "\u9762\u6599\u6750\u8d28",
        "Item2": "\u4eff\u76ae\u8349"
      },
      {
        "Item1": "\u6210\u5206\u542b\u91cf",
        "Item2": "71%\uff08\u542b\uff09\u201480%\uff08\u542b\uff09"
      },
      {
        "Item1": "\u7248\u578b",
        "Item2": "\u4fee\u8eab"
      },
      {
        "Item1": "\u9886\u578b",
        "Item2": "\u5706\u9886"
      },
      {
        "Item1": "\u8863\u957f",
        "Item2": "\u77ed\u6b3e"
      },
      {
        "Item1": "\u662f\u5426\u5e26\u6bdb\u9886",
        "Item2": "\u4e0d\u5e26\u6bdb\u9886"
      },
      {
        "Item1": "\u4e3b\u98ce\u683c",
        "Item2": "\u6c14\u8d28\u540d\u5a9b"
      }
    ],
    "ProductFeatures": {
      "\u4e3b\u98ce\u683c": "\u6c14\u8d28\u540d\u5a9b",
      "\u6210\u5206\u542b\u91cf": "71%\uff08\u542b\uff09\u201480%\uff08\u542b\uff09",
      "\u662f\u5426\u5e26\u6bdb\u9886": "\u4e0d\u5e26\u6bdb\u9886",
      "\u7248\u578b": "\u4fee\u8eab",
      "\u8863\u957f": "\u77ed\u6b3e",
      "\u9762\u6599\u6750\u8d28": "\u4eff\u76ae\u8349",
      "\u9886\u578b": "\u5706\u9886"
    },
    "RateCount": null,
    "RetryCount": 0,
    "SellCount": "\u5df2\u62fc4.2\u4e07\u4ef6",
    "SellerId": null,
    "SellerNick": null,
    "ShopId": "461742",
    "ShopInfo": null,
    "ShopName": "\u679c\u679c\u5bb6\u6c14\u8d28\u5973\u88c5",
    "ShopUrl": "http://yangkeduo.com/mall_page.html?mall_id=461742",
    "SkuMaps": [
      {
        "AmountOnSale": 73,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:119128",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357891",
        "SpecAttributes": {
          "\u5c3a\u7801": "S\uff0890\u65a4\u4ee5\u4e0b\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 65,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:96784",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357892",
        "SpecAttributes": {
          "\u5c3a\u7801": "M\uff0890-100\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 82,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:33651",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357893",
        "SpecAttributes": {
          "\u5c3a\u7801": "L\uff08100-110\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 89,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:33652",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357894",
        "SpecAttributes": {
          "\u5c3a\u7801": "XL\uff08110-120\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 94,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:33653",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357895",
        "SpecAttributes": {
          "\u5c3a\u7801": "2XL\uff08120-130\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 105,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:33656",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357896",
        "SpecAttributes": {
          "\u5c3a\u7801": "3XL\uff08130-140\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 1051,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:119128",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357897",
        "SpecAttributes": {
          "\u5c3a\u7801": "S\uff0890\u65a4\u4ee5\u4e0b\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 88,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:96784",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357898",
        "SpecAttributes": {
          "\u5c3a\u7801": "M\uff0890-100\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 80,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:33651",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357899",
        "SpecAttributes": {
          "\u5c3a\u7801": "L\uff08100-110\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 660,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:33652",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357900",
        "SpecAttributes": {
          "\u5c3a\u7801": "XL\uff08110-120\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 126,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:33653",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357901",
        "SpecAttributes": {
          "\u5c3a\u7801": "2XL\uff08120-130\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 89,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:33656",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357902",
        "SpecAttributes": {
          "\u5c3a\u7801": "3XL\uff08130-140\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 98,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/48b30664f0f7e526ab1b956e813f25cf.jpeg",
        "Key": "1215:105309781;1226:119128",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107855",
        "SpecAttributes": {
          "\u5c3a\u7801": "S\uff0890\u65a4\u4ee5\u4e0b\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 95,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/3660b7893ca5cda1ffcea745d10b2506.jpeg",
        "Key": "1215:105309781;1226:96784",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107856",
        "SpecAttributes": {
          "\u5c3a\u7801": "M\uff0890-100\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 97,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/a4a5a671afbb2d8e1f4c21c0ced3bea8.jpeg",
        "Key": "1215:105309781;1226:33651",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107857",
        "SpecAttributes": {
          "\u5c3a\u7801": "L\uff08100-110\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 97,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/f0551176629bf81f25757c160198dba1.jpeg",
        "Key": "1215:105309781;1226:33652",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107858",
        "SpecAttributes": {
          "\u5c3a\u7801": "XL\uff08110-120\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 99,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/801a2e23140bfe76229f02aab0a8a5fe.jpeg",
        "Key": "1215:105309781;1226:33653",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107853",
        "SpecAttributes": {
          "\u5c3a\u7801": "2XL\uff08120-130\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 100,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/2f202934f16f0eee41257b77bf489262.jpeg",
        "Key": "1215:105309781;1226:33656",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107854",
        "SpecAttributes": {
          "\u5c3a\u7801": "3XL\uff08130-140\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      }
    ],
    "SkuProps": [
      {
        "IsImg": true,
        "Prop": "\u989c\u8272",
        "Value": [
          {
            "imageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
            "name": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)",
            "value": "1215:1115500378"
          },
          {
            "imageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
            "name": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09",
            "value": "1215:1115501666"
          },
          {
            "imageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/48b30664f0f7e526ab1b956e813f25cf.jpeg",
            "name": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09",
            "value": "1215:105309781"
          }
        ]
      },
      {
        "IsImg": false,
        "Prop": "\u5c3a\u7801",
        "Value": [
          {
            "name": "S\uff0890\u65a4\u4ee5\u4e0b\uff09",
            "value": "1226:119128"
          },
          {
            "name": "M\uff0890-100\u65a4\uff09",
            "value": "1226:96784"
          },
          {
            "name": "L\uff08100-110\u65a4\uff09",
            "value": "1226:33651"
          },
          {
            "name": "XL\uff08110-120\u65a4\uff09",
            "value": "1226:33652"
          },
          {
            "name": "2XL\uff08120-130\u65a4\uff09",
            "value": "1226:33653"
          },
          {
            "name": "3XL\uff08130-140\u65a4\uff09",
            "value": "1226:33656"
          }
        ]
      }
    ],
    "SourceType": 6,
    "Subject": "\u30102\u4ef6\u5957\u3011\u5957\u88c5\u79cb\u51ac\u65b0\u6b3e\u4eff\u736d\u5154\u6bdb\u9489\u73e0\u76ae\u8349\u6bdb\u6bdb\u77ed\u5916\u5957\u52a0\u539a\u5927\u8863\u5973\u88c5",
    "Tag": null,
    "Unit": null,
    "UserId": "461742",
    "_ddf": "app",
    "format_check": "ok"
  },
  "reason": "",
  "request_id": "gw-4.63510267214bd",
  "secache": "c98b29872e8a4b28859db207944ba817",
  "secache_date": "2025-05-06 13:37:09",
  "secache_time": 1666253415,
  "server_memory": "0.84MB",
  "server_time": "Beijing/2023-10-20 16:10:15",
  "translate_engine": "baidu",
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:37:09,227 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'error_code': '0000'}}]
INFO - 2025-05-06 13:37:09,227 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'error_code': '0000'}，等于预期结果：{'error_code': '0000'}
INFO - 2025-05-06 13:37:09,227 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:09,227 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:09,228 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:09,230 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：提交订单
INFO - 2025-05-06 13:37:09,230 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/placeAnOrder
INFO - 2025-05-06 13:37:09,230 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:37:09,230 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：详情页面选择规格，提交订单
INFO - 2025-05-06 13:37:09,230 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:37:09,230 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:09,231 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'goods_id': '18382788819', 'number': 2, 'propertyChildIds': '2:9', 'inviter_id': 127839112, 'price': '128', 'freight_insurance': '0.00', 'discount_code': '002399', 'consignee_info': {'name': '张三', 'phone': 13800000000, 'address': '北京市海淀区西三环北路74号院4栋3单元1008'}}}
INFO - 2025-05-06 13:37:09,233 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "crateTime": "2025-05-06 13:37:09",
  "error": "",
  "error_code": "0000",
  "message": "\u63d0\u4ea4\u8ba2\u5355\u6210\u529f",
  "orderNumber": "288085480671260499740",
  "translate_language": "zh-CN",
  "userId": "9623557772977266982"
}

INFO - 2025-05-06 13:37:09,233 - apiutil_business.py:171 -[apiutil_business:extract_data] - json提取到参数：{'orderNumber': '288085480671260499740'}
INFO - 2025-05-06 13:37:09,233 - apiutil_business.py:171 -[apiutil_business:extract_data] - json提取到参数：{'userId': '9623557772977266982'}
INFO - 2025-05-06 13:37:09,233 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'message': '提交订单成功'}}]
INFO - 2025-05-06 13:37:09,233 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'message': '提交订单成功'}，等于预期结果：{'message': '提交订单成功'}
INFO - 2025-05-06 13:37:09,233 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:09,234 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:09,234 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:09,238 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：订单支付
INFO - 2025-05-06 13:37:09,239 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/orderPay
INFO - 2025-05-06 13:37:09,239 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:37:09,239 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：订单支付
INFO - 2025-05-06 13:37:09,239 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:37:09,239 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:09,239 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'orderNumber': '288085480671260499740', 'userId': '9623557772977266982', 'timeStamp': '1746509829'}}
INFO - 2025-05-06 13:37:09,241 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "createTime": "2025-05-06 13:37:09",
  "error": "",
  "error_code": "0000",
  "message": "\u8ba2\u5355\u652f\u4ed8\u6210\u529f",
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:37:09,241 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'message': '订单支付成功'}}]
INFO - 2025-05-06 13:37:09,241 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'message': '订单支付成功'}，等于预期结果：{'message': '订单支付成功'}
INFO - 2025-05-06 13:37:09,241 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:09,242 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:09,242 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:09,245 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：校验订单状态
INFO - 2025-05-06 13:37:09,245 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/checkOrderStatus
INFO - 2025-05-06 13:37:09,245 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:37:09,245 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：校验商品订单状态
INFO - 2025-05-06 13:37:09,245 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:37:09,245 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:09,245 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'orderNumber': '288085480671260499740', 'timeStamp': '1746509829'}}
INFO - 2025-05-06 13:37:09,247 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error": "",
  "error_code": "",
  "queryTime": "2025-05-06 13:37:09",
  "status": "0",
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:37:09,247 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'status': '0'}}]
INFO - 2025-05-06 13:37:09,247 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'status': '0'}，等于预期结果：{'status': '0'}
INFO - 2025-05-06 13:37:09,247 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:09,247 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:16,435 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：用户登录
INFO - 2025-05-06 13:37:16,435 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/login
INFO - 2025-05-06 13:37:16,435 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:37:16,435 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：用户名和密码正确登录验证
INFO - 2025-05-06 13:37:16,435 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:37:16,437 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:16,437 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_name': 'test01', 'passwd': 'admin123'}}
INFO - 2025-05-06 13:37:16,462 - sendrequest.py:107 -[sendrequest:send_request] - cookie：{'Cookie': {'access_token_cookie': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTc0NjUwOTgzNiwianRpIjoiYzMyYmEwMzgtNzQxMy00MGM3LWJhY2EtMzg2MWI1ZjVlYzRiIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6ImV4YW1wbGVfdXNlciIsIm5iZiI6MTc0NjUwOTgzNiwiY3NyZiI6ImRiYmVkODZkLTlhYTEtNDUwYy1iMzhmLTkzNGNhNjg5MWIwMSIsImV4cCI6MTc0NjUxMDczNn0.RMWG7rG-xJHE-c6naMstXHsgPySPki1KjcRvjByIPXg', 'csrf_access_token': 'dbbed86d-9aa1-450c-b38f-934ca6891b01'}}
INFO - 2025-05-06 13:37:16,462 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u767b\u5f55\u6210\u529f",
  "msg_code": 200,
  "orgId": "4140913758110176843",
  "token": "dF50e585c7cD290FDfE66508BFf3F",
  "userId": "9623557772977266982"
}

INFO - 2025-05-06 13:37:16,463 - apiutil.py:154 -[apiutil:extract_data] - 提取接口的返回值：
INFO - 2025-05-06 13:37:16,463 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': 'none'}}, {'eq': {'msg': '登录成功'}}]
INFO - 2025-05-06 13:37:16,463 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【None】,实际结果【[None]】
INFO - 2025-05-06 13:37:16,463 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'msg': '登录成功'}，等于预期结果：{'msg': '登录成功'}
INFO - 2025-05-06 13:37:16,463 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:16,464 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
ERROR - 2025-05-06 13:37:16,465 - readyaml.py:113 -[readyaml:get_extract_yaml] - 【extract.yaml】没有找到：cookie,--'cookie'
ERROR - 2025-05-06 13:37:16,466 - readyaml.py:113 -[readyaml:get_extract_yaml] - 【extract.yaml】没有找到：cookie,--'cookie'
INFO - 2025-05-06 13:37:16,466 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：商品列表
INFO - 2025-05-06 13:37:16,466 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/goodsList
INFO - 2025-05-06 13:37:16,466 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：Get
INFO - 2025-05-06 13:37:16,466 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：获取商品列表
INFO - 2025-05-06 13:37:16,466 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8', 'token': 'None'}
INFO - 2025-05-06 13:37:16,466 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:16,466 - sendrequest.py:150 -[sendrequest:run_main] - 请求参数：{'params': {'msgType': 'getHandsetListOfCust', 'page': 1, 'size': 20}}
INFO - 2025-05-06 13:37:16,492 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "api_info": "today:21 max:10000 all[90=21+33+36];expires:2030-12-31",
  "cache": 0,
  "error_code": "0000",
  "goodsList": [
    {
      "goodsId": "18382788819",
      "goods_count": "233",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/bcf848aa71c6389607ae7a84b70f1543.jpeg",
      "goods_name": "\u30102\u4ef6\u5957\u3011\u5957\u88c5\u79cb\u51ac\u65b0\u6b3e\u4eff\u736d\u5154\u6bdb\u9489\u73e0\u76ae\u8349\u6bdb\u6bdb\u77ed\u5916\u5957\u52a0\u539a\u5927\u8863\u5973\u88c5",
      "original_price": "",
      "unit_price": "\uffe599.00"
    },
    {
      "goodsId": "33809635011",
      "goods_count": "521",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/176019babfdecffa1d9f98f40b7e99b4.jpeg",
      "goods_name": "\u597d\u5947\u5c0f\u68ee\u6797\u5fc3\u94bb\u88c5\u7eb8\u5c3f\u88e4M22\u62c9\u62c9\u88e4L18/XL14\u8d85\u8584\u900f\u6c14\u88e4\u578b\u5c3f\u4e0d\u6e7f 1\u4ef6\u88c5",
      "original_price": "",
      "unit_price": "\uffe5108.00"
    },
    {
      "goodsId": "56996760797",
      "goods_count": "1181",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u51bb\u5e72\u9e21\u5c0f\u80f8\u6574\u5757\u589e\u80a5\u8425\u517b\u53d1\u816e\u72d7\u72d7\u96f6\u98df\u65b0\u624b\u517b\u732b\u96f6\u98df\u5e7c\u732b\u96f6\u98df100g",
      "original_price": "",
      "unit_price": "\uffe517.80"
    },
    {
      "goodsId": "82193785267",
      "goods_count": "3000+",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u3010\u81ea\u8425\u3011ISB\u4f0a\u73ca\u5a1c\u610f\u5927\u5229\u6c34\u679c\u7cfb\u5217\u5ba0\u7269\u72ac\u732b\u6c90\u6d74\u9732\u9664\u81ed\u9999\u6ce2\u62a4\u6bdb\u7d20",
      "original_price": "",
      "unit_price": "\uffe5650.00"
    },
    {
      "goodsId": "74190550836",
      "goods_count": "1000+",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u3010\u65b0\u54c1\u96f60CM\u5d4c\u5165\u5f0f\u3011\u6d77\u5c14\u7535\u51b0\u7bb1410L\u5bb6\u7528\u6cd5\u5f0f\u56db\u95e8\u591a\u95e8\u5b98\u65b9\u6b63\u54c1",
      "original_price": "",
      "unit_price": "\uffe55746.00"
    }
  ],
  "reason": "",
  "request_id": "request_id",
  "secache": "c98b29872e8a4b28859db207944ba817",
  "secache_date": "2025-05-06 13:36:12",
  "secache_time": 1746509772000,
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:37:16,492 - apiutil.py:183 -[apiutil:extract_data_list] - json提取到参数：{'goodsId': ['18382788819', '33809635011', '56996760797', '82193785267', '74190550836']}
INFO - 2025-05-06 13:37:16,493 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': '0000'}}]
INFO - 2025-05-06 13:37:16,493 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【0000】,实际结果【0000】
INFO - 2025-05-06 13:37:16,493 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:16,494 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:16,495 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:16,497 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：新增用户
INFO - 2025-05-06 13:37:16,497 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/addUser
INFO - 2025-05-06 13:37:16,498 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:37:16,498 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：正常新增用户
INFO - 2025-05-06 13:37:16,498 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:37:16,498 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:16,498 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789890', 'role_id': 123456789, 'dates': '2023-12-31', 'phone': 13800000000, 'token': 'dF50e585c7cD290FDfE66508BFf3F'}}
INFO - 2025-05-06 13:37:16,527 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：<!doctype html>
<html lang=en>
  <head>
    <title>FileNotFoundError: [Errno 2] No such file or directory: &#39;../data/mockdata/userManage.json&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "3Pv5OqYGgocJHOylQscb";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>FileNotFoundError</h1>
<div class="detail">
  <p class="errormsg">FileNotFoundError: [Errno 2] No such file or directory: &#39;../data/mockdata/userManage.json&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2183486323392">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2183486322672">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2183486322384">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2183486322960">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2183486323536">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2183486322240">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2183486323248">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\row_Test-Automation-Framework-main\mock_server\api_server\base\flask_service.py"</cite>,
      line <em class="line">188</em>,
      in <code class="function">add_user</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>role_id = flask.request.form.get(&#39;role_id&#39;)</pre>
<pre class="line before"><span class="ws">    </span>dates = flask.request.form.get(&#39;dates&#39;)</pre>
<pre class="line before"><span class="ws">    </span>phone = flask.request.form.get(&#39;phone&#39;)</pre>
<pre class="line before"><span class="ws">    </span>token = flask.request.form.get(&#39;token&#39;)</pre>
<pre class="line before"><span class="ws">    </span>if all([username, password, role_id, dates, phone]) and token == get_token[&#39;token&#39;]:</pre>
<pre class="line current"><span class="ws">        </span>with open(&#39;../data/mockdata/userManage.json&#39;, &#39;a&#39;, encoding=&#39;utf-8&#39;) as f:
<span class="ws">        </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>add_user_info = {</pre>
<pre class="line after"><span class="ws">                </span>&#39;id&#39;: &#39;&#39;.join([random.choice(string.digits) for i in range(11)]),</pre>
<pre class="line after"><span class="ws">                </span>&#39;username&#39;: username,</pre>
<pre class="line after"><span class="ws">                </span>&#39;password&#39;: password,</pre>
<pre class="line after"><span class="ws">                </span>&#39;role_id&#39;: role_id,</pre></div>
</div>
</ul>
  <blockquote>FileNotFoundError: [Errno 2] No such file or directory: &#39;../data/mockdata/userManage.json&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\row_Test-Automation-Framework-main\mock_server\api_server\base\flask_service.py&#34;, line 188, in add_user
    with open(&#39;../data/mockdata/userManage.json&#39;, &#39;a&#39;, encoding=&#39;utf-8&#39;) as f:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: &#39;../data/mockdata/userManage.json&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\row_Test-Automation-Framework-main\mock_server\api_server\base\flask_service.py", line 188, in add_user
    with open('../data/mockdata/userManage.json', 'a', encoding='utf-8') as f:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: '../data/mockdata/userManage.json'


-->

INFO - 2025-05-06 13:37:16,685 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:16,685 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:16,686 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：新增用户
INFO - 2025-05-06 13:37:16,686 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/addUser
INFO - 2025-05-06 13:37:16,687 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:37:16,687 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效新增·缺少token
INFO - 2025-05-06 13:37:16,687 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:37:16,687 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:16,687 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789890', 'role_id': 123456789, 'dates': '2023-12-31', 'phone': 13800000000, 'token': None}}
INFO - 2025-05-06 13:37:16,708 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u65b0\u589e\u5931\u8d25",
  "msg_code": 9001
}

INFO - 2025-05-06 13:37:16,709 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'status_code': 200}}, {'contains': {'msg': '新增失败'}}]
INFO - 2025-05-06 13:37:16,709 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【新增失败】,实际结果【新增失败】
INFO - 2025-05-06 13:37:16,709 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:16,710 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:16,711 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:16,712 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：新增用户
INFO - 2025-05-06 13:37:16,713 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/addUser
INFO - 2025-05-06 13:37:16,713 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:37:16,713 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效新增·缺少必填参数username
INFO - 2025-05-06 13:37:16,713 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:37:16,713 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:16,713 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'password': 'tset6789890', 'role_id': 123456789, 'dates': '2023-12-31', 'phone': 13800000000, 'token': None}}
INFO - 2025-05-06 13:37:16,739 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u65b0\u589e\u5931\u8d25",
  "msg_code": 9001
}

INFO - 2025-05-06 13:37:16,740 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'status_code': 200}}, {'contains': {'msg': '新增失败'}}]
INFO - 2025-05-06 13:37:16,740 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【新增失败】,实际结果【新增失败】
INFO - 2025-05-06 13:37:16,740 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:16,741 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:16,742 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:16,743 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：新增用户
INFO - 2025-05-06 13:37:16,744 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/addUser
INFO - 2025-05-06 13:37:16,744 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:37:16,744 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效新增·缺少必填参数role_id
INFO - 2025-05-06 13:37:16,744 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:37:16,744 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:16,744 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789890', 'dates': '2023-12-31', 'phone': 13800000000, 'token': None}}
INFO - 2025-05-06 13:37:16,770 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u65b0\u589e\u5931\u8d25",
  "msg_code": 9001
}

INFO - 2025-05-06 13:37:16,770 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'status_code': 200}}, {'contains': {'msg': '新增失败'}}]
INFO - 2025-05-06 13:37:16,770 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【新增失败】,实际结果【新增失败】
INFO - 2025-05-06 13:37:16,770 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:16,771 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:16,772 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:16,774 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：新增用户
INFO - 2025-05-06 13:37:16,774 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/addUser
INFO - 2025-05-06 13:37:16,775 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:37:16,775 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：正常新增用户
INFO - 2025-05-06 13:37:16,775 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:37:16,775 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:16,775 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789890', 'role_id': 123456789, 'dates': '2023-12-31', 'phone': 13800000000, 'token': 'dF50e585c7cD290FDfE66508BFf3F'}}
INFO - 2025-05-06 13:37:16,809 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：<!doctype html>
<html lang=en>
  <head>
    <title>FileNotFoundError: [Errno 2] No such file or directory: &#39;../data/mockdata/userManage.json&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "3Pv5OqYGgocJHOylQscb";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>FileNotFoundError</h1>
<div class="detail">
  <p class="errormsg">FileNotFoundError: [Errno 2] No such file or directory: &#39;../data/mockdata/userManage.json&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2183486323104">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2183486324544">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2183486323824">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2183487078464">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2183487078608">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2183487078752">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2183487078896">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\row_Test-Automation-Framework-main\mock_server\api_server\base\flask_service.py"</cite>,
      line <em class="line">188</em>,
      in <code class="function">add_user</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>role_id = flask.request.form.get(&#39;role_id&#39;)</pre>
<pre class="line before"><span class="ws">    </span>dates = flask.request.form.get(&#39;dates&#39;)</pre>
<pre class="line before"><span class="ws">    </span>phone = flask.request.form.get(&#39;phone&#39;)</pre>
<pre class="line before"><span class="ws">    </span>token = flask.request.form.get(&#39;token&#39;)</pre>
<pre class="line before"><span class="ws">    </span>if all([username, password, role_id, dates, phone]) and token == get_token[&#39;token&#39;]:</pre>
<pre class="line current"><span class="ws">        </span>with open(&#39;../data/mockdata/userManage.json&#39;, &#39;a&#39;, encoding=&#39;utf-8&#39;) as f:
<span class="ws">        </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>add_user_info = {</pre>
<pre class="line after"><span class="ws">                </span>&#39;id&#39;: &#39;&#39;.join([random.choice(string.digits) for i in range(11)]),</pre>
<pre class="line after"><span class="ws">                </span>&#39;username&#39;: username,</pre>
<pre class="line after"><span class="ws">                </span>&#39;password&#39;: password,</pre>
<pre class="line after"><span class="ws">                </span>&#39;role_id&#39;: role_id,</pre></div>
</div>
</ul>
  <blockquote>FileNotFoundError: [Errno 2] No such file or directory: &#39;../data/mockdata/userManage.json&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\row_Test-Automation-Framework-main\mock_server\api_server\base\flask_service.py&#34;, line 188, in add_user
    with open(&#39;../data/mockdata/userManage.json&#39;, &#39;a&#39;, encoding=&#39;utf-8&#39;) as f:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: &#39;../data/mockdata/userManage.json&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\row_Test-Automation-Framework-main\mock_server\api_server\base\flask_service.py", line 188, in add_user
    with open('../data/mockdata/userManage.json', 'a', encoding='utf-8') as f:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: '../data/mockdata/userManage.json'


-->

INFO - 2025-05-06 13:37:16,826 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:16,827 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:16,828 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：新增用户
INFO - 2025-05-06 13:37:16,828 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/addUser
INFO - 2025-05-06 13:37:16,828 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:37:16,828 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效新增·缺少token
INFO - 2025-05-06 13:37:16,828 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:37:16,828 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:16,828 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789890', 'role_id': 123456789, 'dates': '2023-12-31', 'phone': 13800000000, 'token': None}}
INFO - 2025-05-06 13:37:16,831 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u65b0\u589e\u5931\u8d25",
  "msg_code": 9001
}

INFO - 2025-05-06 13:37:16,831 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'status_code': 200}}, {'contains': {'msg': '新增失败'}}]
INFO - 2025-05-06 13:37:16,831 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【新增失败】,实际结果【新增失败】
INFO - 2025-05-06 13:37:16,831 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:16,831 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:16,832 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:16,833 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：新增用户
INFO - 2025-05-06 13:37:16,833 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/addUser
INFO - 2025-05-06 13:37:16,833 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:37:16,833 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效新增·缺少必填参数username
INFO - 2025-05-06 13:37:16,833 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:37:16,833 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:16,834 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'password': 'tset6789890', 'role_id': 123456789, 'dates': '2023-12-31', 'phone': 13800000000, 'token': None}}
INFO - 2025-05-06 13:37:16,847 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u65b0\u589e\u5931\u8d25",
  "msg_code": 9001
}

INFO - 2025-05-06 13:37:16,847 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'status_code': 200}}, {'contains': {'msg': '新增失败'}}]
INFO - 2025-05-06 13:37:16,847 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【新增失败】,实际结果【新增失败】
INFO - 2025-05-06 13:37:16,847 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:16,848 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:16,848 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:16,849 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：新增用户
INFO - 2025-05-06 13:37:16,849 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/addUser
INFO - 2025-05-06 13:37:16,849 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:37:16,849 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效新增·缺少必填参数role_id
INFO - 2025-05-06 13:37:16,850 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:37:16,850 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:16,850 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789890', 'dates': '2023-12-31', 'phone': 13800000000, 'token': None}}
INFO - 2025-05-06 13:37:16,863 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u65b0\u589e\u5931\u8d25",
  "msg_code": 9001
}

INFO - 2025-05-06 13:37:16,863 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'status_code': 200}}, {'contains': {'msg': '新增失败'}}]
INFO - 2025-05-06 13:37:16,863 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【新增失败】,实际结果【新增失败】
INFO - 2025-05-06 13:37:16,863 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:16,863 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:16,864 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:16,867 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：商品详情
INFO - 2025-05-06 13:37:16,867 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/productDetail
INFO - 2025-05-06 13:37:16,867 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:37:16,867 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：获取商品详情
INFO - 2025-05-06 13:37:16,867 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:37:16,867 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:16,867 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'pro_id': '18382788819,33809635011,56996760797,82193785267,74190550836', 'page': 1, 'size': 20}}
INFO - 2025-05-06 13:37:16,894 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error": "\u4e0d\u5b58\u5728\u8be5\u5546\u54c1",
  "error_code": "4000",
  "goodsId": "",
  "item": {},
  "secache_date": "2025-05-06 13:37:16",
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:37:16,895 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': '4000'}}]
INFO - 2025-05-06 13:37:16,895 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【4000】,实际结果【4000】
INFO - 2025-05-06 13:37:16,895 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:16,896 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:16,897 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:16,898 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：修改用户
INFO - 2025-05-06 13:37:16,898 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/updateUser
INFO - 2025-05-06 13:37:16,898 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:37:16,898 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：正常修改用户信息
INFO - 2025-05-06 13:37:16,898 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:37:16,898 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:16,898 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789#$123', 'role_id': 89588181111112343, 'dates': '2023-12-31', 'phone': 13800000000}}
INFO - 2025-05-06 13:37:16,901 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u66f4\u65b0\u6210\u529f",
  "msg_code": 200
}

INFO - 2025-05-06 13:37:16,901 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'status_code': 200}}, {'contains': {'msg': '更新成功'}}]
INFO - 2025-05-06 13:37:16,901 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【更新成功】,实际结果【更新成功】
INFO - 2025-05-06 13:37:16,901 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:16,902 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:16,903 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:16,904 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：修改用户
INFO - 2025-05-06 13:37:16,905 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/updateUser
INFO - 2025-05-06 13:37:16,905 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:37:16,905 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：正常修改用户信息
INFO - 2025-05-06 13:37:16,905 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:37:16,905 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:16,905 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789#$123', 'role_id': 89588181111112343, 'dates': '2023-12-31', 'phone': 13800000000}}
INFO - 2025-05-06 13:37:16,907 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u66f4\u65b0\u6210\u529f",
  "msg_code": 200
}

INFO - 2025-05-06 13:37:16,907 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'status_code': 200}}, {'contains': {'msg': '更新成功'}}]
INFO - 2025-05-06 13:37:16,907 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【更新成功】,实际结果【更新成功】
INFO - 2025-05-06 13:37:16,907 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:16,908 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:16,909 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:16,911 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：提交订单
INFO - 2025-05-06 13:37:16,911 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/placeAnOrder
INFO - 2025-05-06 13:37:16,911 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:37:16,911 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：提交订单
INFO - 2025-05-06 13:37:16,911 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:37:16,911 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:16,911 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'goods_id': '56996760797', 'number': 2, 'propertyChildIds': '2:9', 'inviter_id': '127839112', 'price': '128', 'freight_insurance': '0.0', 'discount_code': '002399', 'consignee_info': {'name': '张三', 'phone': 13800000000, 'address': '北京市海淀区西三环北路74号院4栋3单元1008'}}}
INFO - 2025-05-06 13:37:16,914 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "crateTime": "2025-05-06 13:37:16",
  "error": "",
  "error_code": "0000",
  "message": "\u63d0\u4ea4\u8ba2\u5355\u6210\u529f",
  "orderNumber": "550630796307520748023",
  "translate_language": "zh-CN",
  "userId": "9623557772977266982"
}

INFO - 2025-05-06 13:37:16,914 - apiutil.py:154 -[apiutil:extract_data] - 提取接口的返回值：
INFO - 2025-05-06 13:37:16,915 - apiutil.py:154 -[apiutil:extract_data] - 提取接口的返回值：
INFO - 2025-05-06 13:37:16,915 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'message': '提交订单成功'}}, {'eq': {'error_code': '0000'}}]
INFO - 2025-05-06 13:37:16,915 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'message': '提交订单成功'}，等于预期结果：{'message': '提交订单成功'}
INFO - 2025-05-06 13:37:16,915 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'error_code': '0000'}，等于预期结果：{'error_code': '0000'}
INFO - 2025-05-06 13:37:16,915 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:16,916 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:16,917 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:16,918 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-05-06 13:37:16,918 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-05-06 13:37:16,918 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:37:16,918 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：有效删除用户
INFO - 2025-05-06 13:37:16,918 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:37:16,918 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:16,918 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 123839387391912}}
INFO - 2025-05-06 13:37:16,920 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u5220\u9664\u6210\u529f!",
  "msg_code": 200
}

INFO - 2025-05-06 13:37:16,921 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除成功'}}]
INFO - 2025-05-06 13:37:16,921 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除成功】,实际结果【删除成功!】
INFO - 2025-05-06 13:37:16,921 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:16,921 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:16,922 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:16,923 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-05-06 13:37:16,923 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-05-06 13:37:16,923 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:37:16,923 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效删除用户·userid不存在
INFO - 2025-05-06 13:37:16,923 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:37:16,923 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:16,923 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 1238393873922}}
INFO - 2025-05-06 13:37:16,925 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u5220\u9664\u5931\u8d25\uff0c\u7528\u6237id\u4e0d\u5b58\u5728!",
  "msg_code": 9001
}

INFO - 2025-05-06 13:37:16,925 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除失败'}}]
INFO - 2025-05-06 13:37:16,925 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除失败】,实际结果【删除失败，用户id不存在!】
INFO - 2025-05-06 13:37:16,925 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:16,926 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:16,926 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:16,927 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-05-06 13:37:16,928 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-05-06 13:37:16,928 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:37:16,928 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效删除用户·userid为空
INFO - 2025-05-06 13:37:16,928 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:37:16,928 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:16,928 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 1238393873922}}
INFO - 2025-05-06 13:37:16,940 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u5220\u9664\u5931\u8d25\uff0c\u7528\u6237id\u4e0d\u5b58\u5728!",
  "msg_code": 9001
}

INFO - 2025-05-06 13:37:16,940 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除失败'}}]
INFO - 2025-05-06 13:37:16,940 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除失败】,实际结果【删除失败，用户id不存在!】
INFO - 2025-05-06 13:37:16,940 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:16,941 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:16,941 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:16,942 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-05-06 13:37:16,943 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-05-06 13:37:16,943 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:37:16,943 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效删除用户·缺少必填参数
INFO - 2025-05-06 13:37:16,943 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:37:16,943 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:16,956 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u5220\u9664\u5931\u8d25\uff0c\u7528\u6237id\u4e0d\u5b58\u5728!",
  "msg_code": 9001
}

INFO - 2025-05-06 13:37:16,956 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除失败'}}]
INFO - 2025-05-06 13:37:16,956 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除失败】,实际结果【删除失败，用户id不存在!】
INFO - 2025-05-06 13:37:16,956 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:16,957 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:16,958 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:16,959 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-05-06 13:37:16,959 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-05-06 13:37:16,960 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:37:16,960 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：有效删除用户
INFO - 2025-05-06 13:37:16,960 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:37:16,960 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:16,960 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 123839387391912}}
INFO - 2025-05-06 13:37:16,988 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u5220\u9664\u6210\u529f!",
  "msg_code": 200
}

INFO - 2025-05-06 13:37:16,988 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除成功'}}]
INFO - 2025-05-06 13:37:16,988 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除成功】,实际结果【删除成功!】
INFO - 2025-05-06 13:37:16,989 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:16,989 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:16,991 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:16,993 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-05-06 13:37:16,993 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-05-06 13:37:16,993 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:37:16,993 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效删除用户·userid不存在
INFO - 2025-05-06 13:37:16,993 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:37:16,993 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:16,994 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 1238393873922}}
INFO - 2025-05-06 13:37:17,018 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u5220\u9664\u5931\u8d25\uff0c\u7528\u6237id\u4e0d\u5b58\u5728!",
  "msg_code": 9001
}

INFO - 2025-05-06 13:37:17,018 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除失败'}}]
INFO - 2025-05-06 13:37:17,018 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除失败】,实际结果【删除失败，用户id不存在!】
INFO - 2025-05-06 13:37:17,018 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:17,020 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:17,021 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:17,022 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-05-06 13:37:17,022 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-05-06 13:37:17,023 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:37:17,023 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效删除用户·userid为空
INFO - 2025-05-06 13:37:17,023 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:37:17,023 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:17,023 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 1238393873922}}
INFO - 2025-05-06 13:37:17,049 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u5220\u9664\u5931\u8d25\uff0c\u7528\u6237id\u4e0d\u5b58\u5728!",
  "msg_code": 9001
}

INFO - 2025-05-06 13:37:17,049 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除失败'}}]
INFO - 2025-05-06 13:37:17,049 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除失败】,实际结果【删除失败，用户id不存在!】
INFO - 2025-05-06 13:37:17,049 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:17,050 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:17,051 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:17,053 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-05-06 13:37:17,053 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-05-06 13:37:17,053 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:37:17,053 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效删除用户·缺少必填参数
INFO - 2025-05-06 13:37:17,054 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:37:17,054 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:17,082 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u5220\u9664\u5931\u8d25\uff0c\u7528\u6237id\u4e0d\u5b58\u5728!",
  "msg_code": 9001
}

INFO - 2025-05-06 13:37:17,083 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除失败'}}]
INFO - 2025-05-06 13:37:17,083 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除失败】,实际结果【删除失败，用户id不存在!】
INFO - 2025-05-06 13:37:17,083 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:17,085 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:17,088 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:17,097 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：订单支付
INFO - 2025-05-06 13:37:17,097 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/orderPay
INFO - 2025-05-06 13:37:17,097 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:37:17,097 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：订单支付
INFO - 2025-05-06 13:37:17,097 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:37:17,097 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:17,097 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'orderNumber': '550630796307520748023', 'userId': '9623557772977266982', 'timeStamp': '1746509837'}}
INFO - 2025-05-06 13:37:17,111 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "createTime": "2025-05-06 13:37:17",
  "error": "",
  "error_code": "0000",
  "message": "\u8ba2\u5355\u652f\u4ed8\u6210\u529f",
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:37:17,111 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'message': '订单支付成功'}}, {'contains': {'error_code': '0000'}}]
INFO - 2025-05-06 13:37:17,112 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【订单支付成功】,实际结果【订单支付成功】
INFO - 2025-05-06 13:37:17,112 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【0000】,实际结果【0000】
INFO - 2025-05-06 13:37:17,112 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:17,113 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:17,115 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:17,117 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：用户查询
INFO - 2025-05-06 13:37:17,117 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/queryUser
INFO - 2025-05-06 13:37:17,117 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:37:17,117 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：有效查询用户
INFO - 2025-05-06 13:37:17,117 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:37:17,117 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:17,118 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 123839387391912}}
INFO - 2025-05-06 13:37:17,142 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u67e5\u8be2\u6210\u529f!",
  "msg_code": 200
}

INFO - 2025-05-06 13:37:17,142 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '查询成功'}}, {'eq': {'msg_code': 200}}]
INFO - 2025-05-06 13:37:17,143 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【查询成功】,实际结果【查询成功!】
INFO - 2025-05-06 13:37:17,143 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'msg_code': 200}，等于预期结果：{'msg_code': 200}
INFO - 2025-05-06 13:37:17,143 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:17,144 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:17,145 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:17,147 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：用户查询
INFO - 2025-05-06 13:37:17,147 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/queryUser
INFO - 2025-05-06 13:37:17,147 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:37:17,147 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：有效查询用户
INFO - 2025-05-06 13:37:17,148 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:37:17,148 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:17,148 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 123839387391912}}
INFO - 2025-05-06 13:37:17,172 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u67e5\u8be2\u6210\u529f!",
  "msg_code": 200
}

INFO - 2025-05-06 13:37:17,172 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '查询成功'}}, {'eq': {'msg_code': 200}}]
INFO - 2025-05-06 13:37:17,172 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【查询成功】,实际结果【查询成功!】
INFO - 2025-05-06 13:37:17,172 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'msg_code': 200}，等于预期结果：{'msg_code': 200}
INFO - 2025-05-06 13:37:17,172 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:17,173 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:17,175 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:17,177 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：商品列表
INFO - 2025-05-06 13:37:17,177 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/goodsList
INFO - 2025-05-06 13:37:17,177 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：Get
INFO - 2025-05-06 13:37:17,177 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：获取商品列表
INFO - 2025-05-06 13:37:17,177 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8', 'token': 'dF50e585c7cD290FDfE66508BFf3F'}
INFO - 2025-05-06 13:37:17,177 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:17,177 - sendrequest.py:150 -[sendrequest:run_main] - 请求参数：{'params': {'msgType': 'getHandsetListOfCust', 'page': 1, 'size': 20}}
INFO - 2025-05-06 13:37:17,202 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "api_info": "today:21 max:10000 all[90=21+33+36];expires:2030-12-31",
  "cache": 0,
  "error_code": "0000",
  "goodsList": [
    {
      "goodsId": "18382788819",
      "goods_count": "233",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/bcf848aa71c6389607ae7a84b70f1543.jpeg",
      "goods_name": "\u30102\u4ef6\u5957\u3011\u5957\u88c5\u79cb\u51ac\u65b0\u6b3e\u4eff\u736d\u5154\u6bdb\u9489\u73e0\u76ae\u8349\u6bdb\u6bdb\u77ed\u5916\u5957\u52a0\u539a\u5927\u8863\u5973\u88c5",
      "original_price": "",
      "unit_price": "\uffe599.00"
    },
    {
      "goodsId": "33809635011",
      "goods_count": "521",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/176019babfdecffa1d9f98f40b7e99b4.jpeg",
      "goods_name": "\u597d\u5947\u5c0f\u68ee\u6797\u5fc3\u94bb\u88c5\u7eb8\u5c3f\u88e4M22\u62c9\u62c9\u88e4L18/XL14\u8d85\u8584\u900f\u6c14\u88e4\u578b\u5c3f\u4e0d\u6e7f 1\u4ef6\u88c5",
      "original_price": "",
      "unit_price": "\uffe5108.00"
    },
    {
      "goodsId": "56996760797",
      "goods_count": "1181",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u51bb\u5e72\u9e21\u5c0f\u80f8\u6574\u5757\u589e\u80a5\u8425\u517b\u53d1\u816e\u72d7\u72d7\u96f6\u98df\u65b0\u624b\u517b\u732b\u96f6\u98df\u5e7c\u732b\u96f6\u98df100g",
      "original_price": "",
      "unit_price": "\uffe517.80"
    },
    {
      "goodsId": "82193785267",
      "goods_count": "3000+",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u3010\u81ea\u8425\u3011ISB\u4f0a\u73ca\u5a1c\u610f\u5927\u5229\u6c34\u679c\u7cfb\u5217\u5ba0\u7269\u72ac\u732b\u6c90\u6d74\u9732\u9664\u81ed\u9999\u6ce2\u62a4\u6bdb\u7d20",
      "original_price": "",
      "unit_price": "\uffe5650.00"
    },
    {
      "goodsId": "74190550836",
      "goods_count": "1000+",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u3010\u65b0\u54c1\u96f60CM\u5d4c\u5165\u5f0f\u3011\u6d77\u5c14\u7535\u51b0\u7bb1410L\u5bb6\u7528\u6cd5\u5f0f\u56db\u95e8\u591a\u95e8\u5b98\u65b9\u6b63\u54c1",
      "original_price": "",
      "unit_price": "\uffe55746.00"
    }
  ],
  "reason": "",
  "request_id": "request_id",
  "secache": "c98b29872e8a4b28859db207944ba817",
  "secache_date": "2025-05-06 13:36:12",
  "secache_time": 1746509772000,
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:37:17,202 - apiutil_business.py:198 -[apiutil_business:extract_data_list] - json提取到参数：{'goodsIds': ['18382788819', '33809635011', '56996760797', '82193785267', '74190550836']}
INFO - 2025-05-06 13:37:17,203 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': '0000'}}]
INFO - 2025-05-06 13:37:17,204 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【0000】,实际结果【0000】
INFO - 2025-05-06 13:37:17,204 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:17,204 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:17,205 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:17,207 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：商品详情
INFO - 2025-05-06 13:37:17,207 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/productDetail
INFO - 2025-05-06 13:37:17,207 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:37:17,207 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：获取商品详情
INFO - 2025-05-06 13:37:17,207 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:37:17,207 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:17,207 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'pro_id': '18382788819', 'page': 1, 'size': 20}}
INFO - 2025-05-06 13:37:17,234 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "api_info": "today:21 max:10000 all[90=21+33+36];expires:2030-12-31",
  "api_type": "pinduoduo",
  "cache": 0,
  "call_args": {
    "num_iid": "1620002566"
  },
  "client_ip": "106.6.39.223",
  "error": "",
  "error_code": "0000",
  "execution_time": "0.437",
  "goodsId": "56996760797",
  "item": {
    "AmountOnSale": 3188,
    "CategoryId": 8484,
    "Coupon": null,
    "Delivery": {
      "From": null,
      "Info": null,
      "MarkInfo": null,
      "Postage": "\u5feb\u9012 \u514d\u8fd0\u8d39",
      "To": null,
      "extras": null
    },
    "DescUrl": null,
    "Detail": "<img src=\"https://img.pddpic.com/mms-material-img/2022-09-18/3f89d470-1af8-4dee-b529-6d62aa2ea3b7.png\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2019-02-15/ddf6fe7b-b536-4183-932d-69a1189a3f59.png\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/20f659b04d3e7e5851c27ff9931c96fc.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2019-11-14/4420a8c3-49ed-46d8-ab55-15e7a638ca31.jpg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/26c3e9d5cfbaf4e8f13b2bdd38f48d71.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/0aa872fa74599dad7b6aefe6b6c035c0.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/6bc959e32a30424c7a5284a37676999c.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/1fa9861a8c99c5e9e8119fd2239fef5a.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/b62cabf1d2320c5761e3f4c15203fb20.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/6f6e54376a66cbc78e16700d4c424fe1.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/2f60753dfc875a6876adc35833a69d31.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/ae0116e589d8de712f8dafd0c356cefe.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/da910c98fcc8de1b4d2d1498cd7899fd.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/140349649d8b7d08c8e88bfbbaa2f900.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/a953bae2eeb7364ef3ef2976a97d07eb.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/4da59828136c3b1308aad0aa990778a7.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/4a365b61a80e47288c8609ccd5982396.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-11-17/cd0a8a96b783a51236812ce24c59a329.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-11-17/16008ac19768d05e7dee16406ff958a1.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-11-17/ef1d17b69ebf9449a8bb52459b168c26.jpeg\" style=\"width:100%;\"/>",
    "FansCount": null,
    "ImageUrls": [
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/bcf848aa71c6389607ae7a84b70f1543.jpeg",
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/176019babfdecffa1d9f98f40b7e99b4.jpeg",
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/d209ef7bcc9183c3bb8ca1dfdb108d49.jpeg",
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/74257ab65f3f00da7a90fde9042fe640.jpeg",
      "https://t00img.yangkeduo.com/goods/images/2019-08-17/e8fbd9cb-cc74-4caa-9380-84c46d27b008.jpg",
      "https://t00img.yangkeduo.com/goods/images/2019-08-17/d76f515b-e375-4060-b94e-cf64f6b0964e.jpg",
      "https://t00img.yangkeduo.com/goods/images/2019-08-17/f2f279b5-6000-4fbe-b99b-7c1cbd7884ea.jpg"
    ],
    "MainImageVideo": null,
    "OfferId": 1620002566,
    "OriginalPriceRangeInfos": [
      {
        "ConvertPrice": 0,
        "Price": 115,
        "Range": "3"
      }
    ],
    "PriceRangeInfos": [
      {
        "ConvertPrice": 0,
        "Price": 95.4,
        "Range": "3"
      }
    ],
    "ProductFeatureTuples": [
      {
        "Item1": "\u9762\u6599\u6750\u8d28",
        "Item2": "\u4eff\u76ae\u8349"
      },
      {
        "Item1": "\u6210\u5206\u542b\u91cf",
        "Item2": "71%\uff08\u542b\uff09\u201480%\uff08\u542b\uff09"
      },
      {
        "Item1": "\u7248\u578b",
        "Item2": "\u4fee\u8eab"
      },
      {
        "Item1": "\u9886\u578b",
        "Item2": "\u5706\u9886"
      },
      {
        "Item1": "\u8863\u957f",
        "Item2": "\u77ed\u6b3e"
      },
      {
        "Item1": "\u662f\u5426\u5e26\u6bdb\u9886",
        "Item2": "\u4e0d\u5e26\u6bdb\u9886"
      },
      {
        "Item1": "\u4e3b\u98ce\u683c",
        "Item2": "\u6c14\u8d28\u540d\u5a9b"
      }
    ],
    "ProductFeatures": {
      "\u4e3b\u98ce\u683c": "\u6c14\u8d28\u540d\u5a9b",
      "\u6210\u5206\u542b\u91cf": "71%\uff08\u542b\uff09\u201480%\uff08\u542b\uff09",
      "\u662f\u5426\u5e26\u6bdb\u9886": "\u4e0d\u5e26\u6bdb\u9886",
      "\u7248\u578b": "\u4fee\u8eab",
      "\u8863\u957f": "\u77ed\u6b3e",
      "\u9762\u6599\u6750\u8d28": "\u4eff\u76ae\u8349",
      "\u9886\u578b": "\u5706\u9886"
    },
    "RateCount": null,
    "RetryCount": 0,
    "SellCount": "\u5df2\u62fc4.2\u4e07\u4ef6",
    "SellerId": null,
    "SellerNick": null,
    "ShopId": "461742",
    "ShopInfo": null,
    "ShopName": "\u679c\u679c\u5bb6\u6c14\u8d28\u5973\u88c5",
    "ShopUrl": "http://yangkeduo.com/mall_page.html?mall_id=461742",
    "SkuMaps": [
      {
        "AmountOnSale": 73,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:119128",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357891",
        "SpecAttributes": {
          "\u5c3a\u7801": "S\uff0890\u65a4\u4ee5\u4e0b\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 65,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:96784",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357892",
        "SpecAttributes": {
          "\u5c3a\u7801": "M\uff0890-100\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 82,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:33651",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357893",
        "SpecAttributes": {
          "\u5c3a\u7801": "L\uff08100-110\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 89,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:33652",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357894",
        "SpecAttributes": {
          "\u5c3a\u7801": "XL\uff08110-120\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 94,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:33653",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357895",
        "SpecAttributes": {
          "\u5c3a\u7801": "2XL\uff08120-130\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 105,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:33656",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357896",
        "SpecAttributes": {
          "\u5c3a\u7801": "3XL\uff08130-140\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 1051,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:119128",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357897",
        "SpecAttributes": {
          "\u5c3a\u7801": "S\uff0890\u65a4\u4ee5\u4e0b\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 88,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:96784",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357898",
        "SpecAttributes": {
          "\u5c3a\u7801": "M\uff0890-100\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 80,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:33651",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357899",
        "SpecAttributes": {
          "\u5c3a\u7801": "L\uff08100-110\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 660,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:33652",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357900",
        "SpecAttributes": {
          "\u5c3a\u7801": "XL\uff08110-120\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 126,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:33653",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357901",
        "SpecAttributes": {
          "\u5c3a\u7801": "2XL\uff08120-130\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 89,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:33656",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357902",
        "SpecAttributes": {
          "\u5c3a\u7801": "3XL\uff08130-140\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 98,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/48b30664f0f7e526ab1b956e813f25cf.jpeg",
        "Key": "1215:105309781;1226:119128",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107855",
        "SpecAttributes": {
          "\u5c3a\u7801": "S\uff0890\u65a4\u4ee5\u4e0b\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 95,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/3660b7893ca5cda1ffcea745d10b2506.jpeg",
        "Key": "1215:105309781;1226:96784",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107856",
        "SpecAttributes": {
          "\u5c3a\u7801": "M\uff0890-100\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 97,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/a4a5a671afbb2d8e1f4c21c0ced3bea8.jpeg",
        "Key": "1215:105309781;1226:33651",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107857",
        "SpecAttributes": {
          "\u5c3a\u7801": "L\uff08100-110\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 97,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/f0551176629bf81f25757c160198dba1.jpeg",
        "Key": "1215:105309781;1226:33652",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107858",
        "SpecAttributes": {
          "\u5c3a\u7801": "XL\uff08110-120\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 99,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/801a2e23140bfe76229f02aab0a8a5fe.jpeg",
        "Key": "1215:105309781;1226:33653",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107853",
        "SpecAttributes": {
          "\u5c3a\u7801": "2XL\uff08120-130\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 100,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/2f202934f16f0eee41257b77bf489262.jpeg",
        "Key": "1215:105309781;1226:33656",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107854",
        "SpecAttributes": {
          "\u5c3a\u7801": "3XL\uff08130-140\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      }
    ],
    "SkuProps": [
      {
        "IsImg": true,
        "Prop": "\u989c\u8272",
        "Value": [
          {
            "imageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
            "name": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)",
            "value": "1215:1115500378"
          },
          {
            "imageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
            "name": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09",
            "value": "1215:1115501666"
          },
          {
            "imageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/48b30664f0f7e526ab1b956e813f25cf.jpeg",
            "name": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09",
            "value": "1215:105309781"
          }
        ]
      },
      {
        "IsImg": false,
        "Prop": "\u5c3a\u7801",
        "Value": [
          {
            "name": "S\uff0890\u65a4\u4ee5\u4e0b\uff09",
            "value": "1226:119128"
          },
          {
            "name": "M\uff0890-100\u65a4\uff09",
            "value": "1226:96784"
          },
          {
            "name": "L\uff08100-110\u65a4\uff09",
            "value": "1226:33651"
          },
          {
            "name": "XL\uff08110-120\u65a4\uff09",
            "value": "1226:33652"
          },
          {
            "name": "2XL\uff08120-130\u65a4\uff09",
            "value": "1226:33653"
          },
          {
            "name": "3XL\uff08130-140\u65a4\uff09",
            "value": "1226:33656"
          }
        ]
      }
    ],
    "SourceType": 6,
    "Subject": "\u30102\u4ef6\u5957\u3011\u5957\u88c5\u79cb\u51ac\u65b0\u6b3e\u4eff\u736d\u5154\u6bdb\u9489\u73e0\u76ae\u8349\u6bdb\u6bdb\u77ed\u5916\u5957\u52a0\u539a\u5927\u8863\u5973\u88c5",
    "Tag": null,
    "Unit": null,
    "UserId": "461742",
    "_ddf": "app",
    "format_check": "ok"
  },
  "reason": "",
  "request_id": "gw-4.63510267214bd",
  "secache": "c98b29872e8a4b28859db207944ba817",
  "secache_date": "2025-05-06 13:37:17",
  "secache_time": 1666253415,
  "server_memory": "0.84MB",
  "server_time": "Beijing/2023-10-20 16:10:15",
  "translate_engine": "baidu",
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:37:17,235 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'error_code': '0000'}}]
INFO - 2025-05-06 13:37:17,235 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'error_code': '0000'}，等于预期结果：{'error_code': '0000'}
INFO - 2025-05-06 13:37:17,235 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:17,236 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:17,237 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:17,239 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：提交订单
INFO - 2025-05-06 13:37:17,239 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/placeAnOrder
INFO - 2025-05-06 13:37:17,239 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:37:17,239 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：详情页面选择规格，提交订单
INFO - 2025-05-06 13:37:17,239 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:37:17,239 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:17,239 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'goods_id': '18382788819', 'number': 2, 'propertyChildIds': '2:9', 'inviter_id': 127839112, 'price': '128', 'freight_insurance': '0.00', 'discount_code': '002399', 'consignee_info': {'name': '张三', 'phone': 13800000000, 'address': '北京市海淀区西三环北路74号院4栋3单元1008'}}}
INFO - 2025-05-06 13:37:17,265 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "crateTime": "2025-05-06 13:37:17",
  "error": "",
  "error_code": "0000",
  "message": "\u63d0\u4ea4\u8ba2\u5355\u6210\u529f",
  "orderNumber": "299711126881777261568",
  "translate_language": "zh-CN",
  "userId": "9623557772977266982"
}

INFO - 2025-05-06 13:37:17,265 - apiutil_business.py:171 -[apiutil_business:extract_data] - json提取到参数：{'orderNumber': '299711126881777261568'}
INFO - 2025-05-06 13:37:17,265 - apiutil_business.py:171 -[apiutil_business:extract_data] - json提取到参数：{'userId': '9623557772977266982'}
INFO - 2025-05-06 13:37:17,266 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'message': '提交订单成功'}}]
INFO - 2025-05-06 13:37:17,266 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'message': '提交订单成功'}，等于预期结果：{'message': '提交订单成功'}
INFO - 2025-05-06 13:37:17,266 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:17,266 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:17,267 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:17,271 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：订单支付
INFO - 2025-05-06 13:37:17,271 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/orderPay
INFO - 2025-05-06 13:37:17,271 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:37:17,271 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：订单支付
INFO - 2025-05-06 13:37:17,271 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:37:17,271 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:17,271 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'orderNumber': '299711126881777261568', 'userId': '9623557772977266982', 'timeStamp': '1746509837'}}
INFO - 2025-05-06 13:37:17,296 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "createTime": "2025-05-06 13:37:17",
  "error": "",
  "error_code": "0000",
  "message": "\u8ba2\u5355\u652f\u4ed8\u6210\u529f",
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:37:17,296 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'message': '订单支付成功'}}]
INFO - 2025-05-06 13:37:17,296 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'message': '订单支付成功'}，等于预期结果：{'message': '订单支付成功'}
INFO - 2025-05-06 13:37:17,296 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:17,297 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:37:17,298 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:37:17,301 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：校验订单状态
INFO - 2025-05-06 13:37:17,301 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/checkOrderStatus
INFO - 2025-05-06 13:37:17,301 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:37:17,301 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：校验商品订单状态
INFO - 2025-05-06 13:37:17,301 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:37:17,301 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:37:17,301 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'orderNumber': '299711126881777261568', 'timeStamp': '1746509837'}}
INFO - 2025-05-06 13:37:17,326 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error": "",
  "error_code": "",
  "queryTime": "2025-05-06 13:37:17",
  "status": "0",
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:37:17,326 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'status': '0'}}]
INFO - 2025-05-06 13:37:17,326 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'status': '0'}，等于预期结果：{'status': '0'}
INFO - 2025-05-06 13:37:17,326 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:37:17,326 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:39:49,104 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：用户登录
INFO - 2025-05-06 13:39:49,104 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/login
INFO - 2025-05-06 13:39:49,105 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:39:49,105 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：用户名和密码正确登录验证
INFO - 2025-05-06 13:39:49,105 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:39:49,105 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:39:49,105 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_name': 'test01', 'passwd': 'admin123'}}
INFO - 2025-05-06 13:39:49,109 - sendrequest.py:107 -[sendrequest:send_request] - cookie：{'Cookie': {'access_token_cookie': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTc0NjUwOTk4OSwianRpIjoiNjY4Yzg0MjQtMTQ1Yy00OWRkLTgzZTYtODE0NTZjZWNhZmM4IiwidHlwZSI6ImFjY2VzcyIsInN1YiI6ImV4YW1wbGVfdXNlciIsIm5iZiI6MTc0NjUwOTk4OSwiY3NyZiI6IjBhYTM4ZTg4LTVkODYtNDQ0Ny1iMWMzLTBlNzBjOWM3NmYxNSIsImV4cCI6MTc0NjUxMDg4OX0.S9g_hX0papWKNGk1qAuZBtZTsOtOKIWyS6Eug-xxjr0', 'csrf_access_token': '0aa38e88-5d86-4447-b1c3-0e70c9c76f15'}}
INFO - 2025-05-06 13:39:49,109 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u767b\u5f55\u6210\u529f",
  "msg_code": 200,
  "orgId": "4140913758110176843",
  "token": "7838e420d438E6FAE381A04874Ee8",
  "userId": "9623557772977266982"
}

INFO - 2025-05-06 13:39:49,109 - apiutil.py:154 -[apiutil:extract_data] - 提取接口的返回值：
INFO - 2025-05-06 13:39:49,110 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': 'none'}}, {'eq': {'msg': '登录成功'}}]
INFO - 2025-05-06 13:39:49,110 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【None】,实际结果【[None]】
INFO - 2025-05-06 13:39:49,110 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'msg': '登录成功'}，等于预期结果：{'msg': '登录成功'}
INFO - 2025-05-06 13:39:49,110 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:39:49,110 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
ERROR - 2025-05-06 13:39:49,112 - readyaml.py:113 -[readyaml:get_extract_yaml] - 【extract.yaml】没有找到：cookie,--'cookie'
ERROR - 2025-05-06 13:39:49,112 - readyaml.py:113 -[readyaml:get_extract_yaml] - 【extract.yaml】没有找到：cookie,--'cookie'
INFO - 2025-05-06 13:39:49,113 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：商品列表
INFO - 2025-05-06 13:39:49,113 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/goodsList
INFO - 2025-05-06 13:39:49,113 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：Get
INFO - 2025-05-06 13:39:49,113 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：获取商品列表
INFO - 2025-05-06 13:39:49,113 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8', 'token': 'None'}
INFO - 2025-05-06 13:39:49,113 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:39:49,113 - sendrequest.py:150 -[sendrequest:run_main] - 请求参数：{'params': {'msgType': 'getHandsetListOfCust', 'page': 1, 'size': 20}}
INFO - 2025-05-06 13:39:49,132 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "api_info": "today:21 max:10000 all[90=21+33+36];expires:2030-12-31",
  "cache": 0,
  "error_code": "0000",
  "goodsList": [
    {
      "goodsId": "18382788819",
      "goods_count": "233",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/bcf848aa71c6389607ae7a84b70f1543.jpeg",
      "goods_name": "\u30102\u4ef6\u5957\u3011\u5957\u88c5\u79cb\u51ac\u65b0\u6b3e\u4eff\u736d\u5154\u6bdb\u9489\u73e0\u76ae\u8349\u6bdb\u6bdb\u77ed\u5916\u5957\u52a0\u539a\u5927\u8863\u5973\u88c5",
      "original_price": "",
      "unit_price": "\uffe599.00"
    },
    {
      "goodsId": "33809635011",
      "goods_count": "521",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/176019babfdecffa1d9f98f40b7e99b4.jpeg",
      "goods_name": "\u597d\u5947\u5c0f\u68ee\u6797\u5fc3\u94bb\u88c5\u7eb8\u5c3f\u88e4M22\u62c9\u62c9\u88e4L18/XL14\u8d85\u8584\u900f\u6c14\u88e4\u578b\u5c3f\u4e0d\u6e7f 1\u4ef6\u88c5",
      "original_price": "",
      "unit_price": "\uffe5108.00"
    },
    {
      "goodsId": "56996760797",
      "goods_count": "1181",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u51bb\u5e72\u9e21\u5c0f\u80f8\u6574\u5757\u589e\u80a5\u8425\u517b\u53d1\u816e\u72d7\u72d7\u96f6\u98df\u65b0\u624b\u517b\u732b\u96f6\u98df\u5e7c\u732b\u96f6\u98df100g",
      "original_price": "",
      "unit_price": "\uffe517.80"
    },
    {
      "goodsId": "82193785267",
      "goods_count": "3000+",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u3010\u81ea\u8425\u3011ISB\u4f0a\u73ca\u5a1c\u610f\u5927\u5229\u6c34\u679c\u7cfb\u5217\u5ba0\u7269\u72ac\u732b\u6c90\u6d74\u9732\u9664\u81ed\u9999\u6ce2\u62a4\u6bdb\u7d20",
      "original_price": "",
      "unit_price": "\uffe5650.00"
    },
    {
      "goodsId": "74190550836",
      "goods_count": "1000+",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u3010\u65b0\u54c1\u96f60CM\u5d4c\u5165\u5f0f\u3011\u6d77\u5c14\u7535\u51b0\u7bb1410L\u5bb6\u7528\u6cd5\u5f0f\u56db\u95e8\u591a\u95e8\u5b98\u65b9\u6b63\u54c1",
      "original_price": "",
      "unit_price": "\uffe55746.00"
    }
  ],
  "reason": "",
  "request_id": "request_id",
  "secache": "c98b29872e8a4b28859db207944ba817",
  "secache_date": "2025-05-06 13:36:12",
  "secache_time": 1746509772000,
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:39:49,132 - apiutil.py:183 -[apiutil:extract_data_list] - json提取到参数：{'goodsId': ['18382788819', '33809635011', '56996760797', '82193785267', '74190550836']}
INFO - 2025-05-06 13:39:49,132 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': '0000'}}]
INFO - 2025-05-06 13:39:49,133 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【0000】,实际结果【0000】
INFO - 2025-05-06 13:39:49,133 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:39:49,133 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:39:49,134 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:39:49,136 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：新增用户
INFO - 2025-05-06 13:39:49,136 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/addUser
INFO - 2025-05-06 13:39:49,136 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:39:49,137 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：正常新增用户
INFO - 2025-05-06 13:39:49,137 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:39:49,137 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:39:49,137 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789890', 'role_id': 123456789, 'dates': '2023-12-31', 'phone': 13800000000, 'token': '7838e420d438E6FAE381A04874Ee8'}}
INFO - 2025-05-06 13:39:49,166 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：<!doctype html>
<html lang=en>
  <head>
    <title>FileNotFoundError: [Errno 2] No such file or directory: &#39;../data/mockdata/userManage.json&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "3Pv5OqYGgocJHOylQscb";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>FileNotFoundError</h1>
<div class="detail">
  <p class="errormsg">FileNotFoundError: [Errno 2] No such file or directory: &#39;../data/mockdata/userManage.json&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2183487080336">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2183487083216">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2183487080192">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2183487082784">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2183487082496">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2183487082352">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2183487082064">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\row_Test-Automation-Framework-main\mock_server\api_server\base\flask_service.py"</cite>,
      line <em class="line">188</em>,
      in <code class="function">add_user</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>role_id = flask.request.form.get(&#39;role_id&#39;)</pre>
<pre class="line before"><span class="ws">    </span>dates = flask.request.form.get(&#39;dates&#39;)</pre>
<pre class="line before"><span class="ws">    </span>phone = flask.request.form.get(&#39;phone&#39;)</pre>
<pre class="line before"><span class="ws">    </span>token = flask.request.form.get(&#39;token&#39;)</pre>
<pre class="line before"><span class="ws">    </span>if all([username, password, role_id, dates, phone]) and token == get_token[&#39;token&#39;]:</pre>
<pre class="line current"><span class="ws">        </span>with open(&#39;../data/mockdata/userManage.json&#39;, &#39;a&#39;, encoding=&#39;utf-8&#39;) as f:
<span class="ws">        </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>add_user_info = {</pre>
<pre class="line after"><span class="ws">                </span>&#39;id&#39;: &#39;&#39;.join([random.choice(string.digits) for i in range(11)]),</pre>
<pre class="line after"><span class="ws">                </span>&#39;username&#39;: username,</pre>
<pre class="line after"><span class="ws">                </span>&#39;password&#39;: password,</pre>
<pre class="line after"><span class="ws">                </span>&#39;role_id&#39;: role_id,</pre></div>
</div>
</ul>
  <blockquote>FileNotFoundError: [Errno 2] No such file or directory: &#39;../data/mockdata/userManage.json&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\row_Test-Automation-Framework-main\mock_server\api_server\base\flask_service.py&#34;, line 188, in add_user
    with open(&#39;../data/mockdata/userManage.json&#39;, &#39;a&#39;, encoding=&#39;utf-8&#39;) as f:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: &#39;../data/mockdata/userManage.json&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\row_Test-Automation-Framework-main\mock_server\api_server\base\flask_service.py", line 188, in add_user
    with open('../data/mockdata/userManage.json', 'a', encoding='utf-8') as f:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: '../data/mockdata/userManage.json'


-->

INFO - 2025-05-06 13:39:49,318 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:39:49,318 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:39:49,319 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：新增用户
INFO - 2025-05-06 13:39:49,320 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/addUser
INFO - 2025-05-06 13:39:49,320 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:39:49,320 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效新增·缺少token
INFO - 2025-05-06 13:39:49,320 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:39:49,320 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:39:49,320 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789890', 'role_id': 123456789, 'dates': '2023-12-31', 'phone': 13800000000, 'token': None}}
INFO - 2025-05-06 13:39:49,322 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u65b0\u589e\u5931\u8d25",
  "msg_code": 9001
}

INFO - 2025-05-06 13:39:49,322 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'status_code': 200}}, {'contains': {'msg': '新增失败'}}]
INFO - 2025-05-06 13:39:49,322 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【新增失败】,实际结果【新增失败】
INFO - 2025-05-06 13:39:49,323 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:39:49,323 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:39:49,323 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:39:49,325 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：新增用户
INFO - 2025-05-06 13:39:49,325 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/addUser
INFO - 2025-05-06 13:39:49,325 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:39:49,325 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效新增·缺少必填参数username
INFO - 2025-05-06 13:39:49,325 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:39:49,325 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:39:49,325 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'password': 'tset6789890', 'role_id': 123456789, 'dates': '2023-12-31', 'phone': 13800000000, 'token': None}}
INFO - 2025-05-06 13:39:49,352 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u65b0\u589e\u5931\u8d25",
  "msg_code": 9001
}

INFO - 2025-05-06 13:39:49,352 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'status_code': 200}}, {'contains': {'msg': '新增失败'}}]
INFO - 2025-05-06 13:39:49,352 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【新增失败】,实际结果【新增失败】
INFO - 2025-05-06 13:39:49,352 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:39:49,352 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:39:49,353 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:39:49,354 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：新增用户
INFO - 2025-05-06 13:39:49,354 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/addUser
INFO - 2025-05-06 13:39:49,354 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:39:49,354 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效新增·缺少必填参数role_id
INFO - 2025-05-06 13:39:49,354 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:39:49,354 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:39:49,354 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789890', 'dates': '2023-12-31', 'phone': 13800000000, 'token': None}}
INFO - 2025-05-06 13:39:49,379 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u65b0\u589e\u5931\u8d25",
  "msg_code": 9001
}

INFO - 2025-05-06 13:39:49,379 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'status_code': 200}}, {'contains': {'msg': '新增失败'}}]
INFO - 2025-05-06 13:39:49,379 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【新增失败】,实际结果【新增失败】
INFO - 2025-05-06 13:39:49,379 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:39:49,380 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:39:49,382 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:39:49,385 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：商品详情
INFO - 2025-05-06 13:39:49,385 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/productDetail
INFO - 2025-05-06 13:39:49,385 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:39:49,385 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：获取商品详情
INFO - 2025-05-06 13:39:49,386 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:39:49,386 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:39:49,386 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'pro_id': '18382788819,33809635011,56996760797,82193785267,74190550836', 'page': 1, 'size': 20}}
INFO - 2025-05-06 13:39:49,411 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error": "\u4e0d\u5b58\u5728\u8be5\u5546\u54c1",
  "error_code": "4000",
  "goodsId": "",
  "item": {},
  "secache_date": "2025-05-06 13:39:49",
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:39:49,411 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': '4000'}}]
INFO - 2025-05-06 13:39:49,412 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【4000】,实际结果【4000】
INFO - 2025-05-06 13:39:49,412 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:39:49,413 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:39:49,414 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:39:49,416 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：修改用户
INFO - 2025-05-06 13:39:49,417 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/updateUser
INFO - 2025-05-06 13:39:49,417 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:39:49,417 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：正常修改用户信息
INFO - 2025-05-06 13:39:49,417 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:39:49,417 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:39:49,417 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789#$123', 'role_id': 89588181111112343, 'dates': '2023-12-31', 'phone': 13800000000}}
INFO - 2025-05-06 13:39:49,440 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u66f4\u65b0\u6210\u529f",
  "msg_code": 200
}

INFO - 2025-05-06 13:39:49,440 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'status_code': 200}}, {'contains': {'msg': '更新成功'}}]
INFO - 2025-05-06 13:39:49,440 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【更新成功】,实际结果【更新成功】
INFO - 2025-05-06 13:39:49,440 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:39:49,441 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:39:49,442 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:39:49,444 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：提交订单
INFO - 2025-05-06 13:39:49,444 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/placeAnOrder
INFO - 2025-05-06 13:39:49,444 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:39:49,444 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：提交订单
INFO - 2025-05-06 13:39:49,444 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:39:49,444 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:39:49,444 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'goods_id': '18382788819', 'number': 2, 'propertyChildIds': '2:9', 'inviter_id': '127839112', 'price': '128', 'freight_insurance': '0.0', 'discount_code': '002399', 'consignee_info': {'name': '张三', 'phone': 13800000000, 'address': '北京市海淀区西三环北路74号院4栋3单元1008'}}}
INFO - 2025-05-06 13:39:49,472 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "crateTime": "2025-05-06 13:39:49",
  "error": "",
  "error_code": "0000",
  "message": "\u63d0\u4ea4\u8ba2\u5355\u6210\u529f",
  "orderNumber": "363844541454076382448",
  "translate_language": "zh-CN",
  "userId": "9623557772977266982"
}

INFO - 2025-05-06 13:39:49,472 - apiutil.py:154 -[apiutil:extract_data] - 提取接口的返回值：
INFO - 2025-05-06 13:39:49,473 - apiutil.py:154 -[apiutil:extract_data] - 提取接口的返回值：
INFO - 2025-05-06 13:39:49,473 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'message': '提交订单成功'}}, {'eq': {'error_code': '0000'}}]
INFO - 2025-05-06 13:39:49,473 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'message': '提交订单成功'}，等于预期结果：{'message': '提交订单成功'}
INFO - 2025-05-06 13:39:49,474 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'error_code': '0000'}，等于预期结果：{'error_code': '0000'}
INFO - 2025-05-06 13:39:49,474 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:39:49,474 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:39:49,475 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:39:49,477 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-05-06 13:39:49,477 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-05-06 13:39:49,477 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:39:49,477 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：有效删除用户
INFO - 2025-05-06 13:39:49,477 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:39:49,477 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:39:49,477 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 123839387391912}}
INFO - 2025-05-06 13:39:49,502 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u5220\u9664\u6210\u529f!",
  "msg_code": 200
}

INFO - 2025-05-06 13:39:49,503 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除成功'}}]
INFO - 2025-05-06 13:39:49,503 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除成功】,实际结果【删除成功!】
INFO - 2025-05-06 13:39:49,503 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:39:49,503 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:39:49,504 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:39:49,505 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-05-06 13:39:49,505 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-05-06 13:39:49,506 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:39:49,506 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效删除用户·userid不存在
INFO - 2025-05-06 13:39:49,506 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:39:49,506 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:39:49,506 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 1238393873922}}
INFO - 2025-05-06 13:39:49,533 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u5220\u9664\u5931\u8d25\uff0c\u7528\u6237id\u4e0d\u5b58\u5728!",
  "msg_code": 9001
}

INFO - 2025-05-06 13:39:49,534 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除失败'}}]
INFO - 2025-05-06 13:39:49,534 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除失败】,实际结果【删除失败，用户id不存在!】
INFO - 2025-05-06 13:39:49,534 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:39:49,535 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:39:49,536 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:39:49,538 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-05-06 13:39:49,538 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-05-06 13:39:49,538 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:39:49,538 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效删除用户·userid为空
INFO - 2025-05-06 13:39:49,538 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:39:49,538 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:39:49,538 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 1238393873922}}
INFO - 2025-05-06 13:39:49,564 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u5220\u9664\u5931\u8d25\uff0c\u7528\u6237id\u4e0d\u5b58\u5728!",
  "msg_code": 9001
}

INFO - 2025-05-06 13:39:49,564 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除失败'}}]
INFO - 2025-05-06 13:39:49,564 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除失败】,实际结果【删除失败，用户id不存在!】
INFO - 2025-05-06 13:39:49,564 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:39:49,565 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:39:49,566 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:39:49,567 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-05-06 13:39:49,567 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-05-06 13:39:49,567 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:39:49,567 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效删除用户·缺少必填参数
INFO - 2025-05-06 13:39:49,567 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:39:49,567 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:39:49,595 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u5220\u9664\u5931\u8d25\uff0c\u7528\u6237id\u4e0d\u5b58\u5728!",
  "msg_code": 9001
}

INFO - 2025-05-06 13:39:49,596 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除失败'}}]
INFO - 2025-05-06 13:39:49,596 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除失败】,实际结果【删除失败，用户id不存在!】
INFO - 2025-05-06 13:39:49,596 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:39:49,597 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:39:49,598 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:39:49,604 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：订单支付
INFO - 2025-05-06 13:39:49,604 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/orderPay
INFO - 2025-05-06 13:39:49,604 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:39:49,604 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：订单支付
INFO - 2025-05-06 13:39:49,604 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:39:49,604 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:39:49,604 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'orderNumber': '363844541454076382448', 'userId': '9623557772977266982', 'timeStamp': '1746509989'}}
INFO - 2025-05-06 13:39:49,625 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "createTime": "2025-05-06 13:39:49",
  "error": "",
  "error_code": "0000",
  "message": "\u8ba2\u5355\u652f\u4ed8\u6210\u529f",
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:39:49,625 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'message': '订单支付成功'}}, {'contains': {'error_code': '0000'}}]
INFO - 2025-05-06 13:39:49,625 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【订单支付成功】,实际结果【订单支付成功】
INFO - 2025-05-06 13:39:49,626 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【0000】,实际结果【0000】
INFO - 2025-05-06 13:39:49,626 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:39:49,626 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:39:49,627 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:39:49,628 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：用户查询
INFO - 2025-05-06 13:39:49,628 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/queryUser
INFO - 2025-05-06 13:39:49,628 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:39:49,629 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：有效查询用户
INFO - 2025-05-06 13:39:49,629 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:39:49,629 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:39:49,629 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 123839387391912}}
INFO - 2025-05-06 13:39:49,656 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u67e5\u8be2\u6210\u529f!",
  "msg_code": 200
}

INFO - 2025-05-06 13:39:49,657 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '查询成功'}}, {'eq': {'msg_code': 200}}]
INFO - 2025-05-06 13:39:49,657 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【查询成功】,实际结果【查询成功!】
INFO - 2025-05-06 13:39:49,657 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'msg_code': 200}，等于预期结果：{'msg_code': 200}
INFO - 2025-05-06 13:39:49,657 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:39:49,658 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:39:49,659 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:39:49,661 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：商品列表
INFO - 2025-05-06 13:39:49,661 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/goodsList
INFO - 2025-05-06 13:39:49,661 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：Get
INFO - 2025-05-06 13:39:49,661 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：获取商品列表
INFO - 2025-05-06 13:39:49,661 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8', 'token': '7838e420d438E6FAE381A04874Ee8'}
INFO - 2025-05-06 13:39:49,662 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:39:49,662 - sendrequest.py:150 -[sendrequest:run_main] - 请求参数：{'params': {'msgType': 'getHandsetListOfCust', 'page': 1, 'size': 20}}
INFO - 2025-05-06 13:39:49,687 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "api_info": "today:21 max:10000 all[90=21+33+36];expires:2030-12-31",
  "cache": 0,
  "error_code": "0000",
  "goodsList": [
    {
      "goodsId": "18382788819",
      "goods_count": "233",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/bcf848aa71c6389607ae7a84b70f1543.jpeg",
      "goods_name": "\u30102\u4ef6\u5957\u3011\u5957\u88c5\u79cb\u51ac\u65b0\u6b3e\u4eff\u736d\u5154\u6bdb\u9489\u73e0\u76ae\u8349\u6bdb\u6bdb\u77ed\u5916\u5957\u52a0\u539a\u5927\u8863\u5973\u88c5",
      "original_price": "",
      "unit_price": "\uffe599.00"
    },
    {
      "goodsId": "33809635011",
      "goods_count": "521",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/176019babfdecffa1d9f98f40b7e99b4.jpeg",
      "goods_name": "\u597d\u5947\u5c0f\u68ee\u6797\u5fc3\u94bb\u88c5\u7eb8\u5c3f\u88e4M22\u62c9\u62c9\u88e4L18/XL14\u8d85\u8584\u900f\u6c14\u88e4\u578b\u5c3f\u4e0d\u6e7f 1\u4ef6\u88c5",
      "original_price": "",
      "unit_price": "\uffe5108.00"
    },
    {
      "goodsId": "56996760797",
      "goods_count": "1181",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u51bb\u5e72\u9e21\u5c0f\u80f8\u6574\u5757\u589e\u80a5\u8425\u517b\u53d1\u816e\u72d7\u72d7\u96f6\u98df\u65b0\u624b\u517b\u732b\u96f6\u98df\u5e7c\u732b\u96f6\u98df100g",
      "original_price": "",
      "unit_price": "\uffe517.80"
    },
    {
      "goodsId": "82193785267",
      "goods_count": "3000+",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u3010\u81ea\u8425\u3011ISB\u4f0a\u73ca\u5a1c\u610f\u5927\u5229\u6c34\u679c\u7cfb\u5217\u5ba0\u7269\u72ac\u732b\u6c90\u6d74\u9732\u9664\u81ed\u9999\u6ce2\u62a4\u6bdb\u7d20",
      "original_price": "",
      "unit_price": "\uffe5650.00"
    },
    {
      "goodsId": "74190550836",
      "goods_count": "1000+",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u3010\u65b0\u54c1\u96f60CM\u5d4c\u5165\u5f0f\u3011\u6d77\u5c14\u7535\u51b0\u7bb1410L\u5bb6\u7528\u6cd5\u5f0f\u56db\u95e8\u591a\u95e8\u5b98\u65b9\u6b63\u54c1",
      "original_price": "",
      "unit_price": "\uffe55746.00"
    }
  ],
  "reason": "",
  "request_id": "request_id",
  "secache": "c98b29872e8a4b28859db207944ba817",
  "secache_date": "2025-05-06 13:36:12",
  "secache_time": 1746509772000,
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:39:49,688 - apiutil_business.py:198 -[apiutil_business:extract_data_list] - json提取到参数：{'goodsIds': ['18382788819', '33809635011', '56996760797', '82193785267', '74190550836']}
INFO - 2025-05-06 13:39:49,688 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': '0000'}}]
INFO - 2025-05-06 13:39:49,688 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【0000】,实际结果【0000】
INFO - 2025-05-06 13:39:49,688 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:39:49,689 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:39:49,690 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:39:49,692 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：商品详情
INFO - 2025-05-06 13:39:49,692 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/productDetail
INFO - 2025-05-06 13:39:49,692 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:39:49,692 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：获取商品详情
INFO - 2025-05-06 13:39:49,693 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:39:49,693 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:39:49,693 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'pro_id': '18382788819', 'page': 1, 'size': 20}}
INFO - 2025-05-06 13:39:49,696 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "api_info": "today:21 max:10000 all[90=21+33+36];expires:2030-12-31",
  "api_type": "pinduoduo",
  "cache": 0,
  "call_args": {
    "num_iid": "1620002566"
  },
  "client_ip": "106.6.39.223",
  "error": "",
  "error_code": "0000",
  "execution_time": "0.437",
  "goodsId": "18382788819",
  "item": {
    "AmountOnSale": 3188,
    "CategoryId": 8484,
    "Coupon": null,
    "Delivery": {
      "From": null,
      "Info": null,
      "MarkInfo": null,
      "Postage": "\u5feb\u9012 \u514d\u8fd0\u8d39",
      "To": null,
      "extras": null
    },
    "DescUrl": null,
    "Detail": "<img src=\"https://img.pddpic.com/mms-material-img/2022-09-18/3f89d470-1af8-4dee-b529-6d62aa2ea3b7.png\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2019-02-15/ddf6fe7b-b536-4183-932d-69a1189a3f59.png\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/20f659b04d3e7e5851c27ff9931c96fc.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2019-11-14/4420a8c3-49ed-46d8-ab55-15e7a638ca31.jpg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/26c3e9d5cfbaf4e8f13b2bdd38f48d71.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/0aa872fa74599dad7b6aefe6b6c035c0.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/6bc959e32a30424c7a5284a37676999c.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/1fa9861a8c99c5e9e8119fd2239fef5a.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/b62cabf1d2320c5761e3f4c15203fb20.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/6f6e54376a66cbc78e16700d4c424fe1.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/2f60753dfc875a6876adc35833a69d31.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/ae0116e589d8de712f8dafd0c356cefe.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/da910c98fcc8de1b4d2d1498cd7899fd.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/140349649d8b7d08c8e88bfbbaa2f900.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/a953bae2eeb7364ef3ef2976a97d07eb.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/4da59828136c3b1308aad0aa990778a7.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/4a365b61a80e47288c8609ccd5982396.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-11-17/cd0a8a96b783a51236812ce24c59a329.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-11-17/16008ac19768d05e7dee16406ff958a1.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-11-17/ef1d17b69ebf9449a8bb52459b168c26.jpeg\" style=\"width:100%;\"/>",
    "FansCount": null,
    "ImageUrls": [
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/bcf848aa71c6389607ae7a84b70f1543.jpeg",
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/176019babfdecffa1d9f98f40b7e99b4.jpeg",
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/d209ef7bcc9183c3bb8ca1dfdb108d49.jpeg",
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/74257ab65f3f00da7a90fde9042fe640.jpeg",
      "https://t00img.yangkeduo.com/goods/images/2019-08-17/e8fbd9cb-cc74-4caa-9380-84c46d27b008.jpg",
      "https://t00img.yangkeduo.com/goods/images/2019-08-17/d76f515b-e375-4060-b94e-cf64f6b0964e.jpg",
      "https://t00img.yangkeduo.com/goods/images/2019-08-17/f2f279b5-6000-4fbe-b99b-7c1cbd7884ea.jpg"
    ],
    "MainImageVideo": null,
    "OfferId": 1620002566,
    "OriginalPriceRangeInfos": [
      {
        "ConvertPrice": 0,
        "Price": 115,
        "Range": "3"
      }
    ],
    "PriceRangeInfos": [
      {
        "ConvertPrice": 0,
        "Price": 95.4,
        "Range": "3"
      }
    ],
    "ProductFeatureTuples": [
      {
        "Item1": "\u9762\u6599\u6750\u8d28",
        "Item2": "\u4eff\u76ae\u8349"
      },
      {
        "Item1": "\u6210\u5206\u542b\u91cf",
        "Item2": "71%\uff08\u542b\uff09\u201480%\uff08\u542b\uff09"
      },
      {
        "Item1": "\u7248\u578b",
        "Item2": "\u4fee\u8eab"
      },
      {
        "Item1": "\u9886\u578b",
        "Item2": "\u5706\u9886"
      },
      {
        "Item1": "\u8863\u957f",
        "Item2": "\u77ed\u6b3e"
      },
      {
        "Item1": "\u662f\u5426\u5e26\u6bdb\u9886",
        "Item2": "\u4e0d\u5e26\u6bdb\u9886"
      },
      {
        "Item1": "\u4e3b\u98ce\u683c",
        "Item2": "\u6c14\u8d28\u540d\u5a9b"
      }
    ],
    "ProductFeatures": {
      "\u4e3b\u98ce\u683c": "\u6c14\u8d28\u540d\u5a9b",
      "\u6210\u5206\u542b\u91cf": "71%\uff08\u542b\uff09\u201480%\uff08\u542b\uff09",
      "\u662f\u5426\u5e26\u6bdb\u9886": "\u4e0d\u5e26\u6bdb\u9886",
      "\u7248\u578b": "\u4fee\u8eab",
      "\u8863\u957f": "\u77ed\u6b3e",
      "\u9762\u6599\u6750\u8d28": "\u4eff\u76ae\u8349",
      "\u9886\u578b": "\u5706\u9886"
    },
    "RateCount": null,
    "RetryCount": 0,
    "SellCount": "\u5df2\u62fc4.2\u4e07\u4ef6",
    "SellerId": null,
    "SellerNick": null,
    "ShopId": "461742",
    "ShopInfo": null,
    "ShopName": "\u679c\u679c\u5bb6\u6c14\u8d28\u5973\u88c5",
    "ShopUrl": "http://yangkeduo.com/mall_page.html?mall_id=461742",
    "SkuMaps": [
      {
        "AmountOnSale": 73,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:119128",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357891",
        "SpecAttributes": {
          "\u5c3a\u7801": "S\uff0890\u65a4\u4ee5\u4e0b\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 65,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:96784",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357892",
        "SpecAttributes": {
          "\u5c3a\u7801": "M\uff0890-100\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 82,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:33651",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357893",
        "SpecAttributes": {
          "\u5c3a\u7801": "L\uff08100-110\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 89,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:33652",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357894",
        "SpecAttributes": {
          "\u5c3a\u7801": "XL\uff08110-120\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 94,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:33653",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357895",
        "SpecAttributes": {
          "\u5c3a\u7801": "2XL\uff08120-130\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 105,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:33656",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357896",
        "SpecAttributes": {
          "\u5c3a\u7801": "3XL\uff08130-140\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 1051,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:119128",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357897",
        "SpecAttributes": {
          "\u5c3a\u7801": "S\uff0890\u65a4\u4ee5\u4e0b\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 88,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:96784",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357898",
        "SpecAttributes": {
          "\u5c3a\u7801": "M\uff0890-100\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 80,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:33651",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357899",
        "SpecAttributes": {
          "\u5c3a\u7801": "L\uff08100-110\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 660,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:33652",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357900",
        "SpecAttributes": {
          "\u5c3a\u7801": "XL\uff08110-120\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 126,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:33653",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357901",
        "SpecAttributes": {
          "\u5c3a\u7801": "2XL\uff08120-130\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 89,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:33656",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357902",
        "SpecAttributes": {
          "\u5c3a\u7801": "3XL\uff08130-140\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 98,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/48b30664f0f7e526ab1b956e813f25cf.jpeg",
        "Key": "1215:105309781;1226:119128",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107855",
        "SpecAttributes": {
          "\u5c3a\u7801": "S\uff0890\u65a4\u4ee5\u4e0b\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 95,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/3660b7893ca5cda1ffcea745d10b2506.jpeg",
        "Key": "1215:105309781;1226:96784",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107856",
        "SpecAttributes": {
          "\u5c3a\u7801": "M\uff0890-100\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 97,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/a4a5a671afbb2d8e1f4c21c0ced3bea8.jpeg",
        "Key": "1215:105309781;1226:33651",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107857",
        "SpecAttributes": {
          "\u5c3a\u7801": "L\uff08100-110\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 97,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/f0551176629bf81f25757c160198dba1.jpeg",
        "Key": "1215:105309781;1226:33652",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107858",
        "SpecAttributes": {
          "\u5c3a\u7801": "XL\uff08110-120\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 99,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/801a2e23140bfe76229f02aab0a8a5fe.jpeg",
        "Key": "1215:105309781;1226:33653",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107853",
        "SpecAttributes": {
          "\u5c3a\u7801": "2XL\uff08120-130\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 100,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/2f202934f16f0eee41257b77bf489262.jpeg",
        "Key": "1215:105309781;1226:33656",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107854",
        "SpecAttributes": {
          "\u5c3a\u7801": "3XL\uff08130-140\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      }
    ],
    "SkuProps": [
      {
        "IsImg": true,
        "Prop": "\u989c\u8272",
        "Value": [
          {
            "imageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
            "name": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)",
            "value": "1215:1115500378"
          },
          {
            "imageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
            "name": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09",
            "value": "1215:1115501666"
          },
          {
            "imageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/48b30664f0f7e526ab1b956e813f25cf.jpeg",
            "name": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09",
            "value": "1215:105309781"
          }
        ]
      },
      {
        "IsImg": false,
        "Prop": "\u5c3a\u7801",
        "Value": [
          {
            "name": "S\uff0890\u65a4\u4ee5\u4e0b\uff09",
            "value": "1226:119128"
          },
          {
            "name": "M\uff0890-100\u65a4\uff09",
            "value": "1226:96784"
          },
          {
            "name": "L\uff08100-110\u65a4\uff09",
            "value": "1226:33651"
          },
          {
            "name": "XL\uff08110-120\u65a4\uff09",
            "value": "1226:33652"
          },
          {
            "name": "2XL\uff08120-130\u65a4\uff09",
            "value": "1226:33653"
          },
          {
            "name": "3XL\uff08130-140\u65a4\uff09",
            "value": "1226:33656"
          }
        ]
      }
    ],
    "SourceType": 6,
    "Subject": "\u30102\u4ef6\u5957\u3011\u5957\u88c5\u79cb\u51ac\u65b0\u6b3e\u4eff\u736d\u5154\u6bdb\u9489\u73e0\u76ae\u8349\u6bdb\u6bdb\u77ed\u5916\u5957\u52a0\u539a\u5927\u8863\u5973\u88c5",
    "Tag": null,
    "Unit": null,
    "UserId": "461742",
    "_ddf": "app",
    "format_check": "ok"
  },
  "reason": "",
  "request_id": "gw-4.63510267214bd",
  "secache": "c98b29872e8a4b28859db207944ba817",
  "secache_date": "2025-05-06 13:39:49",
  "secache_time": 1666253415,
  "server_memory": "0.84MB",
  "server_time": "Beijing/2023-10-20 16:10:15",
  "translate_engine": "baidu",
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:39:49,696 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'error_code': '0000'}}]
INFO - 2025-05-06 13:39:49,696 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'error_code': '0000'}，等于预期结果：{'error_code': '0000'}
INFO - 2025-05-06 13:39:49,697 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:39:49,697 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:39:49,698 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:39:49,699 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：提交订单
INFO - 2025-05-06 13:39:49,700 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/placeAnOrder
INFO - 2025-05-06 13:39:49,700 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:39:49,700 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：详情页面选择规格，提交订单
INFO - 2025-05-06 13:39:49,700 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:39:49,700 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:39:49,700 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'goods_id': '18382788819', 'number': 2, 'propertyChildIds': '2:9', 'inviter_id': 127839112, 'price': '128', 'freight_insurance': '0.00', 'discount_code': '002399', 'consignee_info': {'name': '张三', 'phone': 13800000000, 'address': '北京市海淀区西三环北路74号院4栋3单元1008'}}}
INFO - 2025-05-06 13:39:49,718 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "crateTime": "2025-05-06 13:39:49",
  "error": "",
  "error_code": "0000",
  "message": "\u63d0\u4ea4\u8ba2\u5355\u6210\u529f",
  "orderNumber": "878221899671061014760",
  "translate_language": "zh-CN",
  "userId": "9623557772977266982"
}

INFO - 2025-05-06 13:39:49,719 - apiutil_business.py:171 -[apiutil_business:extract_data] - json提取到参数：{'orderNumber': '878221899671061014760'}
INFO - 2025-05-06 13:39:49,719 - apiutil_business.py:171 -[apiutil_business:extract_data] - json提取到参数：{'userId': '9623557772977266982'}
INFO - 2025-05-06 13:39:49,720 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'message': '提交订单成功'}}]
INFO - 2025-05-06 13:39:49,720 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'message': '提交订单成功'}，等于预期结果：{'message': '提交订单成功'}
INFO - 2025-05-06 13:39:49,720 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:39:49,721 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:39:49,721 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:39:49,727 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：订单支付
INFO - 2025-05-06 13:39:49,728 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/orderPay
INFO - 2025-05-06 13:39:49,728 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:39:49,728 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：订单支付
INFO - 2025-05-06 13:39:49,728 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:39:49,728 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:39:49,728 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'orderNumber': '878221899671061014760', 'userId': '9623557772977266982', 'timeStamp': '1746509989'}}
INFO - 2025-05-06 13:39:49,749 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "createTime": "2025-05-06 13:39:49",
  "error": "",
  "error_code": "0000",
  "message": "\u8ba2\u5355\u652f\u4ed8\u6210\u529f",
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:39:49,749 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'message': '订单支付成功'}}]
INFO - 2025-05-06 13:39:49,749 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'message': '订单支付成功'}，等于预期结果：{'message': '订单支付成功'}
INFO - 2025-05-06 13:39:49,749 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:39:49,750 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:39:49,750 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:39:49,753 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：校验订单状态
INFO - 2025-05-06 13:39:49,753 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/checkOrderStatus
INFO - 2025-05-06 13:39:49,753 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:39:49,753 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：校验商品订单状态
INFO - 2025-05-06 13:39:49,753 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:39:49,753 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:39:49,753 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'orderNumber': '878221899671061014760', 'timeStamp': '1746509989'}}
INFO - 2025-05-06 13:39:49,780 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error": "",
  "error_code": "",
  "queryTime": "2025-05-06 13:39:49",
  "status": "0",
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:39:49,780 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'status': '0'}}]
INFO - 2025-05-06 13:39:49,780 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'status': '0'}，等于预期结果：{'status': '0'}
INFO - 2025-05-06 13:39:49,780 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:39:49,781 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:40:29,167 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：用户登录
INFO - 2025-05-06 13:40:29,167 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/login
INFO - 2025-05-06 13:40:29,168 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:40:29,168 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：用户名和密码正确登录验证
INFO - 2025-05-06 13:40:29,168 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:40:29,170 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:40:29,170 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_name': 'test01', 'passwd': 'admin123'}}
INFO - 2025-05-06 13:40:29,197 - sendrequest.py:107 -[sendrequest:send_request] - cookie：{'Cookie': {'access_token_cookie': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTc0NjUxMDAyOSwianRpIjoiZGNlNmUzN2MtNWRiZi00ZjYxLWE5OWYtMGEzMWRjN2ZmZjc3IiwidHlwZSI6ImFjY2VzcyIsInN1YiI6ImV4YW1wbGVfdXNlciIsIm5iZiI6MTc0NjUxMDAyOSwiY3NyZiI6ImI4OGI0NWU5LTlkZmYtNDZkYS1hMzYwLWE4MzkxOTQ5ZjRhZCIsImV4cCI6MTc0NjUxMDkyOX0.yyEnNwc1V2dM3xZV3-f0a6rqohODSc6AIh9ruRT2F0Q', 'csrf_access_token': 'b88b45e9-9dff-46da-a360-a8391949f4ad'}}
INFO - 2025-05-06 13:40:29,197 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u767b\u5f55\u6210\u529f",
  "msg_code": 200,
  "orgId": "4140913758110176843",
  "token": "A5Fe2cab53797fb3A9A2FE0C0e8E1",
  "userId": "9623557772977266982"
}

INFO - 2025-05-06 13:40:29,198 - apiutil.py:154 -[apiutil:extract_data] - 提取接口的返回值：
INFO - 2025-05-06 13:40:29,198 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': 'none'}}, {'eq': {'msg': '登录成功'}}]
INFO - 2025-05-06 13:40:29,198 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【None】,实际结果【[None]】
INFO - 2025-05-06 13:40:29,198 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'msg': '登录成功'}，等于预期结果：{'msg': '登录成功'}
INFO - 2025-05-06 13:40:29,198 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:40:29,198 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
ERROR - 2025-05-06 13:40:29,200 - readyaml.py:113 -[readyaml:get_extract_yaml] - 【extract.yaml】没有找到：cookie,--'cookie'
ERROR - 2025-05-06 13:40:29,201 - readyaml.py:113 -[readyaml:get_extract_yaml] - 【extract.yaml】没有找到：cookie,--'cookie'
INFO - 2025-05-06 13:40:29,201 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：商品列表
INFO - 2025-05-06 13:40:29,201 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/goodsList
INFO - 2025-05-06 13:40:29,201 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：Get
INFO - 2025-05-06 13:40:29,201 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：获取商品列表
INFO - 2025-05-06 13:40:29,201 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8', 'token': 'None'}
INFO - 2025-05-06 13:40:29,201 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:40:29,201 - sendrequest.py:150 -[sendrequest:run_main] - 请求参数：{'params': {'msgType': 'getHandsetListOfCust', 'page': 1, 'size': 20}}
INFO - 2025-05-06 13:40:29,228 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "api_info": "today:21 max:10000 all[90=21+33+36];expires:2030-12-31",
  "cache": 0,
  "error_code": "0000",
  "goodsList": [
    {
      "goodsId": "18382788819",
      "goods_count": "233",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/bcf848aa71c6389607ae7a84b70f1543.jpeg",
      "goods_name": "\u30102\u4ef6\u5957\u3011\u5957\u88c5\u79cb\u51ac\u65b0\u6b3e\u4eff\u736d\u5154\u6bdb\u9489\u73e0\u76ae\u8349\u6bdb\u6bdb\u77ed\u5916\u5957\u52a0\u539a\u5927\u8863\u5973\u88c5",
      "original_price": "",
      "unit_price": "\uffe599.00"
    },
    {
      "goodsId": "33809635011",
      "goods_count": "521",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/176019babfdecffa1d9f98f40b7e99b4.jpeg",
      "goods_name": "\u597d\u5947\u5c0f\u68ee\u6797\u5fc3\u94bb\u88c5\u7eb8\u5c3f\u88e4M22\u62c9\u62c9\u88e4L18/XL14\u8d85\u8584\u900f\u6c14\u88e4\u578b\u5c3f\u4e0d\u6e7f 1\u4ef6\u88c5",
      "original_price": "",
      "unit_price": "\uffe5108.00"
    },
    {
      "goodsId": "56996760797",
      "goods_count": "1181",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u51bb\u5e72\u9e21\u5c0f\u80f8\u6574\u5757\u589e\u80a5\u8425\u517b\u53d1\u816e\u72d7\u72d7\u96f6\u98df\u65b0\u624b\u517b\u732b\u96f6\u98df\u5e7c\u732b\u96f6\u98df100g",
      "original_price": "",
      "unit_price": "\uffe517.80"
    },
    {
      "goodsId": "82193785267",
      "goods_count": "3000+",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u3010\u81ea\u8425\u3011ISB\u4f0a\u73ca\u5a1c\u610f\u5927\u5229\u6c34\u679c\u7cfb\u5217\u5ba0\u7269\u72ac\u732b\u6c90\u6d74\u9732\u9664\u81ed\u9999\u6ce2\u62a4\u6bdb\u7d20",
      "original_price": "",
      "unit_price": "\uffe5650.00"
    },
    {
      "goodsId": "74190550836",
      "goods_count": "1000+",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u3010\u65b0\u54c1\u96f60CM\u5d4c\u5165\u5f0f\u3011\u6d77\u5c14\u7535\u51b0\u7bb1410L\u5bb6\u7528\u6cd5\u5f0f\u56db\u95e8\u591a\u95e8\u5b98\u65b9\u6b63\u54c1",
      "original_price": "",
      "unit_price": "\uffe55746.00"
    }
  ],
  "reason": "",
  "request_id": "request_id",
  "secache": "c98b29872e8a4b28859db207944ba817",
  "secache_date": "2025-05-06 13:36:12",
  "secache_time": 1746509772000,
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:40:29,228 - apiutil.py:183 -[apiutil:extract_data_list] - json提取到参数：{'goodsId': ['18382788819', '33809635011', '56996760797', '82193785267', '74190550836']}
INFO - 2025-05-06 13:40:29,229 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': '0000'}}]
INFO - 2025-05-06 13:40:29,229 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【0000】,实际结果【0000】
INFO - 2025-05-06 13:40:29,229 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:40:29,229 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:40:29,230 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:40:29,232 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：新增用户
INFO - 2025-05-06 13:40:29,233 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/addUser
INFO - 2025-05-06 13:40:29,233 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:40:29,233 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：正常新增用户
INFO - 2025-05-06 13:40:29,233 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:40:29,233 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:40:29,233 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789890', 'role_id': 123456789, 'dates': '2023-12-31', 'phone': 13800000000, 'token': 'A5Fe2cab53797fb3A9A2FE0C0e8E1'}}
INFO - 2025-05-06 13:40:29,261 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：<!doctype html>
<html lang=en>
  <head>
    <title>FileNotFoundError: [Errno 2] No such file or directory: &#39;../data/mockdata/userManage.json&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "3Pv5OqYGgocJHOylQscb";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>FileNotFoundError</h1>
<div class="detail">
  <p class="errormsg">FileNotFoundError: [Errno 2] No such file or directory: &#39;../data/mockdata/userManage.json&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2183487082208">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2183487079760">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2183487083936">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2183487084224">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2183487083648">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2183487084080">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2183487083792">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\row_Test-Automation-Framework-main\mock_server\api_server\base\flask_service.py"</cite>,
      line <em class="line">188</em>,
      in <code class="function">add_user</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>role_id = flask.request.form.get(&#39;role_id&#39;)</pre>
<pre class="line before"><span class="ws">    </span>dates = flask.request.form.get(&#39;dates&#39;)</pre>
<pre class="line before"><span class="ws">    </span>phone = flask.request.form.get(&#39;phone&#39;)</pre>
<pre class="line before"><span class="ws">    </span>token = flask.request.form.get(&#39;token&#39;)</pre>
<pre class="line before"><span class="ws">    </span>if all([username, password, role_id, dates, phone]) and token == get_token[&#39;token&#39;]:</pre>
<pre class="line current"><span class="ws">        </span>with open(&#39;../data/mockdata/userManage.json&#39;, &#39;a&#39;, encoding=&#39;utf-8&#39;) as f:
<span class="ws">        </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>add_user_info = {</pre>
<pre class="line after"><span class="ws">                </span>&#39;id&#39;: &#39;&#39;.join([random.choice(string.digits) for i in range(11)]),</pre>
<pre class="line after"><span class="ws">                </span>&#39;username&#39;: username,</pre>
<pre class="line after"><span class="ws">                </span>&#39;password&#39;: password,</pre>
<pre class="line after"><span class="ws">                </span>&#39;role_id&#39;: role_id,</pre></div>
</div>
</ul>
  <blockquote>FileNotFoundError: [Errno 2] No such file or directory: &#39;../data/mockdata/userManage.json&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\row_Test-Automation-Framework-main\mock_server\api_server\base\flask_service.py&#34;, line 188, in add_user
    with open(&#39;../data/mockdata/userManage.json&#39;, &#39;a&#39;, encoding=&#39;utf-8&#39;) as f:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: &#39;../data/mockdata/userManage.json&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\row_Test-Automation-Framework-main\mock_server\api_server\base\flask_service.py", line 188, in add_user
    with open('../data/mockdata/userManage.json', 'a', encoding='utf-8') as f:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: '../data/mockdata/userManage.json'


-->

INFO - 2025-05-06 13:40:29,414 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:40:29,415 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:40:29,416 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：新增用户
INFO - 2025-05-06 13:40:29,417 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/addUser
INFO - 2025-05-06 13:40:29,417 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:40:29,417 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效新增·缺少token
INFO - 2025-05-06 13:40:29,417 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:40:29,417 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:40:29,417 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789890', 'role_id': 123456789, 'dates': '2023-12-31', 'phone': 13800000000, 'token': None}}
INFO - 2025-05-06 13:40:29,419 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u65b0\u589e\u5931\u8d25",
  "msg_code": 9001
}

INFO - 2025-05-06 13:40:29,419 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'status_code': 200}}, {'contains': {'msg': '新增失败'}}]
INFO - 2025-05-06 13:40:29,419 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【新增失败】,实际结果【新增失败】
INFO - 2025-05-06 13:40:29,419 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:40:29,420 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:40:29,420 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:40:29,421 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：新增用户
INFO - 2025-05-06 13:40:29,422 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/addUser
INFO - 2025-05-06 13:40:29,422 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:40:29,422 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效新增·缺少必填参数username
INFO - 2025-05-06 13:40:29,422 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:40:29,422 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:40:29,422 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'password': 'tset6789890', 'role_id': 123456789, 'dates': '2023-12-31', 'phone': 13800000000, 'token': None}}
INFO - 2025-05-06 13:40:29,440 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u65b0\u589e\u5931\u8d25",
  "msg_code": 9001
}

INFO - 2025-05-06 13:40:29,441 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'status_code': 200}}, {'contains': {'msg': '新增失败'}}]
INFO - 2025-05-06 13:40:29,441 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【新增失败】,实际结果【新增失败】
INFO - 2025-05-06 13:40:29,441 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:40:29,442 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:40:29,442 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:40:29,443 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：新增用户
INFO - 2025-05-06 13:40:29,443 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/addUser
INFO - 2025-05-06 13:40:29,443 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:40:29,443 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效新增·缺少必填参数role_id
INFO - 2025-05-06 13:40:29,443 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:40:29,443 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:40:29,443 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789890', 'dates': '2023-12-31', 'phone': 13800000000, 'token': None}}
INFO - 2025-05-06 13:40:29,456 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u65b0\u589e\u5931\u8d25",
  "msg_code": 9001
}

INFO - 2025-05-06 13:40:29,457 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'status_code': 200}}, {'contains': {'msg': '新增失败'}}]
INFO - 2025-05-06 13:40:29,457 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【新增失败】,实际结果【新增失败】
INFO - 2025-05-06 13:40:29,457 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:40:29,458 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:40:29,459 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:40:29,461 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：商品详情
INFO - 2025-05-06 13:40:29,461 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/productDetail
INFO - 2025-05-06 13:40:29,461 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:40:29,461 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：获取商品详情
INFO - 2025-05-06 13:40:29,461 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:40:29,461 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:40:29,461 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'pro_id': '18382788819,33809635011,56996760797,82193785267,74190550836', 'page': 1, 'size': 20}}
INFO - 2025-05-06 13:40:29,487 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error": "\u4e0d\u5b58\u5728\u8be5\u5546\u54c1",
  "error_code": "4000",
  "goodsId": "",
  "item": {},
  "secache_date": "2025-05-06 13:40:29",
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:40:29,488 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': '4000'}}]
INFO - 2025-05-06 13:40:29,488 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【4000】,实际结果【4000】
INFO - 2025-05-06 13:40:29,488 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:40:29,489 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:40:29,490 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:40:29,491 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：修改用户
INFO - 2025-05-06 13:40:29,492 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/updateUser
INFO - 2025-05-06 13:40:29,492 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:40:29,492 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：正常修改用户信息
INFO - 2025-05-06 13:40:29,492 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:40:29,492 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:40:29,492 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789#$123', 'role_id': 89588181111112343, 'dates': '2023-12-31', 'phone': 13800000000}}
INFO - 2025-05-06 13:40:29,519 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u66f4\u65b0\u6210\u529f",
  "msg_code": 200
}

INFO - 2025-05-06 13:40:29,519 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'status_code': 200}}, {'contains': {'msg': '更新成功'}}]
INFO - 2025-05-06 13:40:29,519 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【更新成功】,实际结果【更新成功】
INFO - 2025-05-06 13:40:29,519 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:40:29,520 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:40:29,522 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:40:29,524 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：提交订单
INFO - 2025-05-06 13:40:29,524 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/placeAnOrder
INFO - 2025-05-06 13:40:29,524 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:40:29,524 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：提交订单
INFO - 2025-05-06 13:40:29,524 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:40:29,524 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:40:29,524 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'goods_id': '18382788819', 'number': 2, 'propertyChildIds': '2:9', 'inviter_id': '127839112', 'price': '128', 'freight_insurance': '0.0', 'discount_code': '002399', 'consignee_info': {'name': '张三', 'phone': 13800000000, 'address': '北京市海淀区西三环北路74号院4栋3单元1008'}}}
INFO - 2025-05-06 13:40:29,549 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "crateTime": "2025-05-06 13:40:29",
  "error": "",
  "error_code": "0000",
  "message": "\u63d0\u4ea4\u8ba2\u5355\u6210\u529f",
  "orderNumber": "693435004795225424356",
  "translate_language": "zh-CN",
  "userId": "9623557772977266982"
}

INFO - 2025-05-06 13:40:29,549 - apiutil.py:154 -[apiutil:extract_data] - 提取接口的返回值：
INFO - 2025-05-06 13:40:29,550 - apiutil.py:154 -[apiutil:extract_data] - 提取接口的返回值：
INFO - 2025-05-06 13:40:29,550 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'message': '提交订单成功'}}, {'eq': {'error_code': '0000'}}]
INFO - 2025-05-06 13:40:29,550 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'message': '提交订单成功'}，等于预期结果：{'message': '提交订单成功'}
INFO - 2025-05-06 13:40:29,550 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'error_code': '0000'}，等于预期结果：{'error_code': '0000'}
INFO - 2025-05-06 13:40:29,551 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:40:29,551 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:40:29,552 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:40:29,554 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-05-06 13:40:29,554 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-05-06 13:40:29,554 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:40:29,554 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：有效删除用户
INFO - 2025-05-06 13:40:29,554 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:40:29,554 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:40:29,554 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 123839387391912}}
INFO - 2025-05-06 13:40:29,581 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u5220\u9664\u6210\u529f!",
  "msg_code": 200
}

INFO - 2025-05-06 13:40:29,582 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除成功'}}]
INFO - 2025-05-06 13:40:29,582 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除成功】,实际结果【删除成功!】
INFO - 2025-05-06 13:40:29,582 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:40:29,583 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:40:29,584 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:40:29,585 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-05-06 13:40:29,585 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-05-06 13:40:29,585 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:40:29,585 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效删除用户·userid不存在
INFO - 2025-05-06 13:40:29,586 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:40:29,586 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:40:29,586 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 1238393873922}}
INFO - 2025-05-06 13:40:29,612 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u5220\u9664\u5931\u8d25\uff0c\u7528\u6237id\u4e0d\u5b58\u5728!",
  "msg_code": 9001
}

INFO - 2025-05-06 13:40:29,613 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除失败'}}]
INFO - 2025-05-06 13:40:29,613 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除失败】,实际结果【删除失败，用户id不存在!】
INFO - 2025-05-06 13:40:29,613 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:40:29,614 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:40:29,615 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:40:29,617 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-05-06 13:40:29,617 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-05-06 13:40:29,617 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:40:29,617 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效删除用户·userid为空
INFO - 2025-05-06 13:40:29,617 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:40:29,617 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:40:29,617 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 1238393873922}}
INFO - 2025-05-06 13:40:29,642 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u5220\u9664\u5931\u8d25\uff0c\u7528\u6237id\u4e0d\u5b58\u5728!",
  "msg_code": 9001
}

INFO - 2025-05-06 13:40:29,642 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除失败'}}]
INFO - 2025-05-06 13:40:29,643 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除失败】,实际结果【删除失败，用户id不存在!】
INFO - 2025-05-06 13:40:29,643 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:40:29,644 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:40:29,644 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:40:29,646 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-05-06 13:40:29,646 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-05-06 13:40:29,646 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:40:29,646 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效删除用户·缺少必填参数
INFO - 2025-05-06 13:40:29,646 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:40:29,647 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:40:29,674 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u5220\u9664\u5931\u8d25\uff0c\u7528\u6237id\u4e0d\u5b58\u5728!",
  "msg_code": 9001
}

INFO - 2025-05-06 13:40:29,674 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除失败'}}]
INFO - 2025-05-06 13:40:29,674 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除失败】,实际结果【删除失败，用户id不存在!】
INFO - 2025-05-06 13:40:29,674 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:40:29,675 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:40:29,678 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:40:29,684 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：订单支付
INFO - 2025-05-06 13:40:29,684 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/orderPay
INFO - 2025-05-06 13:40:29,684 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:40:29,684 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：订单支付
INFO - 2025-05-06 13:40:29,684 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:40:29,684 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:40:29,684 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'orderNumber': '693435004795225424356', 'userId': '9623557772977266982', 'timeStamp': '1746510029'}}
INFO - 2025-05-06 13:40:29,704 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "createTime": "2025-05-06 13:40:29",
  "error": "",
  "error_code": "0000",
  "message": "\u8ba2\u5355\u652f\u4ed8\u6210\u529f",
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:40:29,704 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'message': '订单支付成功'}}, {'contains': {'error_code': '0000'}}]
INFO - 2025-05-06 13:40:29,704 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【订单支付成功】,实际结果【订单支付成功】
INFO - 2025-05-06 13:40:29,704 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【0000】,实际结果【0000】
INFO - 2025-05-06 13:40:29,704 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:40:29,705 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:40:29,707 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:40:29,708 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：用户查询
INFO - 2025-05-06 13:40:29,709 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/queryUser
INFO - 2025-05-06 13:40:29,709 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:40:29,709 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：有效查询用户
INFO - 2025-05-06 13:40:29,709 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:40:29,709 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:40:29,709 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 123839387391912}}
INFO - 2025-05-06 13:40:29,734 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u67e5\u8be2\u6210\u529f!",
  "msg_code": 200
}

INFO - 2025-05-06 13:40:29,734 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '查询成功'}}, {'eq': {'msg_code': 200}}]
INFO - 2025-05-06 13:40:29,734 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【查询成功】,实际结果【查询成功!】
INFO - 2025-05-06 13:40:29,734 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'msg_code': 200}，等于预期结果：{'msg_code': 200}
INFO - 2025-05-06 13:40:29,734 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:40:29,735 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:40:29,736 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:40:29,738 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：商品列表
INFO - 2025-05-06 13:40:29,738 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/goodsList
INFO - 2025-05-06 13:40:29,738 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：Get
INFO - 2025-05-06 13:40:29,738 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：获取商品列表
INFO - 2025-05-06 13:40:29,738 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8', 'token': 'A5Fe2cab53797fb3A9A2FE0C0e8E1'}
INFO - 2025-05-06 13:40:29,738 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:40:29,738 - sendrequest.py:150 -[sendrequest:run_main] - 请求参数：{'params': {'msgType': 'getHandsetListOfCust', 'page': 1, 'size': 20}}
INFO - 2025-05-06 13:40:29,765 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "api_info": "today:21 max:10000 all[90=21+33+36];expires:2030-12-31",
  "cache": 0,
  "error_code": "0000",
  "goodsList": [
    {
      "goodsId": "18382788819",
      "goods_count": "233",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/bcf848aa71c6389607ae7a84b70f1543.jpeg",
      "goods_name": "\u30102\u4ef6\u5957\u3011\u5957\u88c5\u79cb\u51ac\u65b0\u6b3e\u4eff\u736d\u5154\u6bdb\u9489\u73e0\u76ae\u8349\u6bdb\u6bdb\u77ed\u5916\u5957\u52a0\u539a\u5927\u8863\u5973\u88c5",
      "original_price": "",
      "unit_price": "\uffe599.00"
    },
    {
      "goodsId": "33809635011",
      "goods_count": "521",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/176019babfdecffa1d9f98f40b7e99b4.jpeg",
      "goods_name": "\u597d\u5947\u5c0f\u68ee\u6797\u5fc3\u94bb\u88c5\u7eb8\u5c3f\u88e4M22\u62c9\u62c9\u88e4L18/XL14\u8d85\u8584\u900f\u6c14\u88e4\u578b\u5c3f\u4e0d\u6e7f 1\u4ef6\u88c5",
      "original_price": "",
      "unit_price": "\uffe5108.00"
    },
    {
      "goodsId": "56996760797",
      "goods_count": "1181",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u51bb\u5e72\u9e21\u5c0f\u80f8\u6574\u5757\u589e\u80a5\u8425\u517b\u53d1\u816e\u72d7\u72d7\u96f6\u98df\u65b0\u624b\u517b\u732b\u96f6\u98df\u5e7c\u732b\u96f6\u98df100g",
      "original_price": "",
      "unit_price": "\uffe517.80"
    },
    {
      "goodsId": "82193785267",
      "goods_count": "3000+",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u3010\u81ea\u8425\u3011ISB\u4f0a\u73ca\u5a1c\u610f\u5927\u5229\u6c34\u679c\u7cfb\u5217\u5ba0\u7269\u72ac\u732b\u6c90\u6d74\u9732\u9664\u81ed\u9999\u6ce2\u62a4\u6bdb\u7d20",
      "original_price": "",
      "unit_price": "\uffe5650.00"
    },
    {
      "goodsId": "74190550836",
      "goods_count": "1000+",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u3010\u65b0\u54c1\u96f60CM\u5d4c\u5165\u5f0f\u3011\u6d77\u5c14\u7535\u51b0\u7bb1410L\u5bb6\u7528\u6cd5\u5f0f\u56db\u95e8\u591a\u95e8\u5b98\u65b9\u6b63\u54c1",
      "original_price": "",
      "unit_price": "\uffe55746.00"
    }
  ],
  "reason": "",
  "request_id": "request_id",
  "secache": "c98b29872e8a4b28859db207944ba817",
  "secache_date": "2025-05-06 13:36:12",
  "secache_time": 1746509772000,
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:40:29,766 - apiutil_business.py:198 -[apiutil_business:extract_data_list] - json提取到参数：{'goodsIds': ['18382788819', '33809635011', '56996760797', '82193785267', '74190550836']}
INFO - 2025-05-06 13:40:29,767 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': '0000'}}]
INFO - 2025-05-06 13:40:29,767 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【0000】,实际结果【0000】
INFO - 2025-05-06 13:40:29,767 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:40:29,768 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:40:29,769 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:40:29,772 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：商品详情
INFO - 2025-05-06 13:40:29,772 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/productDetail
INFO - 2025-05-06 13:40:29,772 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:40:29,772 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：获取商品详情
INFO - 2025-05-06 13:40:29,772 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:40:29,772 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:40:29,772 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'pro_id': '18382788819', 'page': 1, 'size': 20}}
INFO - 2025-05-06 13:40:29,775 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "api_info": "today:21 max:10000 all[90=21+33+36];expires:2030-12-31",
  "api_type": "pinduoduo",
  "cache": 0,
  "call_args": {
    "num_iid": "1620002566"
  },
  "client_ip": "106.6.39.223",
  "error": "",
  "error_code": "0000",
  "execution_time": "0.437",
  "goodsId": "56996760797",
  "item": {
    "AmountOnSale": 3188,
    "CategoryId": 8484,
    "Coupon": null,
    "Delivery": {
      "From": null,
      "Info": null,
      "MarkInfo": null,
      "Postage": "\u5feb\u9012 \u514d\u8fd0\u8d39",
      "To": null,
      "extras": null
    },
    "DescUrl": null,
    "Detail": "<img src=\"https://img.pddpic.com/mms-material-img/2022-09-18/3f89d470-1af8-4dee-b529-6d62aa2ea3b7.png\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2019-02-15/ddf6fe7b-b536-4183-932d-69a1189a3f59.png\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/20f659b04d3e7e5851c27ff9931c96fc.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2019-11-14/4420a8c3-49ed-46d8-ab55-15e7a638ca31.jpg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/26c3e9d5cfbaf4e8f13b2bdd38f48d71.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/0aa872fa74599dad7b6aefe6b6c035c0.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/6bc959e32a30424c7a5284a37676999c.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/1fa9861a8c99c5e9e8119fd2239fef5a.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/b62cabf1d2320c5761e3f4c15203fb20.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/6f6e54376a66cbc78e16700d4c424fe1.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/2f60753dfc875a6876adc35833a69d31.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/ae0116e589d8de712f8dafd0c356cefe.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/da910c98fcc8de1b4d2d1498cd7899fd.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/140349649d8b7d08c8e88bfbbaa2f900.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/a953bae2eeb7364ef3ef2976a97d07eb.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/4da59828136c3b1308aad0aa990778a7.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/4a365b61a80e47288c8609ccd5982396.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-11-17/cd0a8a96b783a51236812ce24c59a329.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-11-17/16008ac19768d05e7dee16406ff958a1.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-11-17/ef1d17b69ebf9449a8bb52459b168c26.jpeg\" style=\"width:100%;\"/>",
    "FansCount": null,
    "ImageUrls": [
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/bcf848aa71c6389607ae7a84b70f1543.jpeg",
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/176019babfdecffa1d9f98f40b7e99b4.jpeg",
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/d209ef7bcc9183c3bb8ca1dfdb108d49.jpeg",
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/74257ab65f3f00da7a90fde9042fe640.jpeg",
      "https://t00img.yangkeduo.com/goods/images/2019-08-17/e8fbd9cb-cc74-4caa-9380-84c46d27b008.jpg",
      "https://t00img.yangkeduo.com/goods/images/2019-08-17/d76f515b-e375-4060-b94e-cf64f6b0964e.jpg",
      "https://t00img.yangkeduo.com/goods/images/2019-08-17/f2f279b5-6000-4fbe-b99b-7c1cbd7884ea.jpg"
    ],
    "MainImageVideo": null,
    "OfferId": 1620002566,
    "OriginalPriceRangeInfos": [
      {
        "ConvertPrice": 0,
        "Price": 115,
        "Range": "3"
      }
    ],
    "PriceRangeInfos": [
      {
        "ConvertPrice": 0,
        "Price": 95.4,
        "Range": "3"
      }
    ],
    "ProductFeatureTuples": [
      {
        "Item1": "\u9762\u6599\u6750\u8d28",
        "Item2": "\u4eff\u76ae\u8349"
      },
      {
        "Item1": "\u6210\u5206\u542b\u91cf",
        "Item2": "71%\uff08\u542b\uff09\u201480%\uff08\u542b\uff09"
      },
      {
        "Item1": "\u7248\u578b",
        "Item2": "\u4fee\u8eab"
      },
      {
        "Item1": "\u9886\u578b",
        "Item2": "\u5706\u9886"
      },
      {
        "Item1": "\u8863\u957f",
        "Item2": "\u77ed\u6b3e"
      },
      {
        "Item1": "\u662f\u5426\u5e26\u6bdb\u9886",
        "Item2": "\u4e0d\u5e26\u6bdb\u9886"
      },
      {
        "Item1": "\u4e3b\u98ce\u683c",
        "Item2": "\u6c14\u8d28\u540d\u5a9b"
      }
    ],
    "ProductFeatures": {
      "\u4e3b\u98ce\u683c": "\u6c14\u8d28\u540d\u5a9b",
      "\u6210\u5206\u542b\u91cf": "71%\uff08\u542b\uff09\u201480%\uff08\u542b\uff09",
      "\u662f\u5426\u5e26\u6bdb\u9886": "\u4e0d\u5e26\u6bdb\u9886",
      "\u7248\u578b": "\u4fee\u8eab",
      "\u8863\u957f": "\u77ed\u6b3e",
      "\u9762\u6599\u6750\u8d28": "\u4eff\u76ae\u8349",
      "\u9886\u578b": "\u5706\u9886"
    },
    "RateCount": null,
    "RetryCount": 0,
    "SellCount": "\u5df2\u62fc4.2\u4e07\u4ef6",
    "SellerId": null,
    "SellerNick": null,
    "ShopId": "461742",
    "ShopInfo": null,
    "ShopName": "\u679c\u679c\u5bb6\u6c14\u8d28\u5973\u88c5",
    "ShopUrl": "http://yangkeduo.com/mall_page.html?mall_id=461742",
    "SkuMaps": [
      {
        "AmountOnSale": 73,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:119128",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357891",
        "SpecAttributes": {
          "\u5c3a\u7801": "S\uff0890\u65a4\u4ee5\u4e0b\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 65,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:96784",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357892",
        "SpecAttributes": {
          "\u5c3a\u7801": "M\uff0890-100\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 82,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:33651",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357893",
        "SpecAttributes": {
          "\u5c3a\u7801": "L\uff08100-110\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 89,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:33652",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357894",
        "SpecAttributes": {
          "\u5c3a\u7801": "XL\uff08110-120\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 94,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:33653",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357895",
        "SpecAttributes": {
          "\u5c3a\u7801": "2XL\uff08120-130\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 105,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:33656",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357896",
        "SpecAttributes": {
          "\u5c3a\u7801": "3XL\uff08130-140\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 1051,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:119128",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357897",
        "SpecAttributes": {
          "\u5c3a\u7801": "S\uff0890\u65a4\u4ee5\u4e0b\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 88,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:96784",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357898",
        "SpecAttributes": {
          "\u5c3a\u7801": "M\uff0890-100\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 80,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:33651",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357899",
        "SpecAttributes": {
          "\u5c3a\u7801": "L\uff08100-110\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 660,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:33652",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357900",
        "SpecAttributes": {
          "\u5c3a\u7801": "XL\uff08110-120\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 126,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:33653",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357901",
        "SpecAttributes": {
          "\u5c3a\u7801": "2XL\uff08120-130\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 89,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:33656",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357902",
        "SpecAttributes": {
          "\u5c3a\u7801": "3XL\uff08130-140\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 98,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/48b30664f0f7e526ab1b956e813f25cf.jpeg",
        "Key": "1215:105309781;1226:119128",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107855",
        "SpecAttributes": {
          "\u5c3a\u7801": "S\uff0890\u65a4\u4ee5\u4e0b\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 95,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/3660b7893ca5cda1ffcea745d10b2506.jpeg",
        "Key": "1215:105309781;1226:96784",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107856",
        "SpecAttributes": {
          "\u5c3a\u7801": "M\uff0890-100\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 97,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/a4a5a671afbb2d8e1f4c21c0ced3bea8.jpeg",
        "Key": "1215:105309781;1226:33651",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107857",
        "SpecAttributes": {
          "\u5c3a\u7801": "L\uff08100-110\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 97,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/f0551176629bf81f25757c160198dba1.jpeg",
        "Key": "1215:105309781;1226:33652",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107858",
        "SpecAttributes": {
          "\u5c3a\u7801": "XL\uff08110-120\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 99,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/801a2e23140bfe76229f02aab0a8a5fe.jpeg",
        "Key": "1215:105309781;1226:33653",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107853",
        "SpecAttributes": {
          "\u5c3a\u7801": "2XL\uff08120-130\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 100,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/2f202934f16f0eee41257b77bf489262.jpeg",
        "Key": "1215:105309781;1226:33656",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107854",
        "SpecAttributes": {
          "\u5c3a\u7801": "3XL\uff08130-140\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      }
    ],
    "SkuProps": [
      {
        "IsImg": true,
        "Prop": "\u989c\u8272",
        "Value": [
          {
            "imageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
            "name": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)",
            "value": "1215:1115500378"
          },
          {
            "imageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
            "name": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09",
            "value": "1215:1115501666"
          },
          {
            "imageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/48b30664f0f7e526ab1b956e813f25cf.jpeg",
            "name": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09",
            "value": "1215:105309781"
          }
        ]
      },
      {
        "IsImg": false,
        "Prop": "\u5c3a\u7801",
        "Value": [
          {
            "name": "S\uff0890\u65a4\u4ee5\u4e0b\uff09",
            "value": "1226:119128"
          },
          {
            "name": "M\uff0890-100\u65a4\uff09",
            "value": "1226:96784"
          },
          {
            "name": "L\uff08100-110\u65a4\uff09",
            "value": "1226:33651"
          },
          {
            "name": "XL\uff08110-120\u65a4\uff09",
            "value": "1226:33652"
          },
          {
            "name": "2XL\uff08120-130\u65a4\uff09",
            "value": "1226:33653"
          },
          {
            "name": "3XL\uff08130-140\u65a4\uff09",
            "value": "1226:33656"
          }
        ]
      }
    ],
    "SourceType": 6,
    "Subject": "\u30102\u4ef6\u5957\u3011\u5957\u88c5\u79cb\u51ac\u65b0\u6b3e\u4eff\u736d\u5154\u6bdb\u9489\u73e0\u76ae\u8349\u6bdb\u6bdb\u77ed\u5916\u5957\u52a0\u539a\u5927\u8863\u5973\u88c5",
    "Tag": null,
    "Unit": null,
    "UserId": "461742",
    "_ddf": "app",
    "format_check": "ok"
  },
  "reason": "",
  "request_id": "gw-4.63510267214bd",
  "secache": "c98b29872e8a4b28859db207944ba817",
  "secache_date": "2025-05-06 13:40:29",
  "secache_time": 1666253415,
  "server_memory": "0.84MB",
  "server_time": "Beijing/2023-10-20 16:10:15",
  "translate_engine": "baidu",
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:40:29,776 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'error_code': '0000'}}]
INFO - 2025-05-06 13:40:29,776 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'error_code': '0000'}，等于预期结果：{'error_code': '0000'}
INFO - 2025-05-06 13:40:29,776 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:40:29,777 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:40:29,777 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:40:29,779 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：提交订单
INFO - 2025-05-06 13:40:29,779 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/placeAnOrder
INFO - 2025-05-06 13:40:29,779 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:40:29,779 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：详情页面选择规格，提交订单
INFO - 2025-05-06 13:40:29,779 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:40:29,779 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:40:29,780 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'goods_id': '18382788819', 'number': 2, 'propertyChildIds': '2:9', 'inviter_id': 127839112, 'price': '128', 'freight_insurance': '0.00', 'discount_code': '002399', 'consignee_info': {'name': '张三', 'phone': 13800000000, 'address': '北京市海淀区西三环北路74号院4栋3单元1008'}}}
INFO - 2025-05-06 13:40:29,796 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "crateTime": "2025-05-06 13:40:29",
  "error": "",
  "error_code": "0000",
  "message": "\u63d0\u4ea4\u8ba2\u5355\u6210\u529f",
  "orderNumber": "410054639064309408243",
  "translate_language": "zh-CN",
  "userId": "9623557772977266982"
}

INFO - 2025-05-06 13:40:29,796 - apiutil_business.py:171 -[apiutil_business:extract_data] - json提取到参数：{'orderNumber': '410054639064309408243'}
INFO - 2025-05-06 13:40:29,797 - apiutil_business.py:171 -[apiutil_business:extract_data] - json提取到参数：{'userId': '9623557772977266982'}
INFO - 2025-05-06 13:40:29,797 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'message': '提交订单成功'}}]
INFO - 2025-05-06 13:40:29,797 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'message': '提交订单成功'}，等于预期结果：{'message': '提交订单成功'}
INFO - 2025-05-06 13:40:29,797 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:40:29,798 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:40:29,798 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:40:29,802 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：订单支付
INFO - 2025-05-06 13:40:29,803 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/orderPay
INFO - 2025-05-06 13:40:29,803 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:40:29,803 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：订单支付
INFO - 2025-05-06 13:40:29,803 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:40:29,803 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:40:29,803 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'orderNumber': '410054639064309408243', 'userId': '9623557772977266982', 'timeStamp': '1746510029'}}
INFO - 2025-05-06 13:40:29,827 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "createTime": "2025-05-06 13:40:29",
  "error": "",
  "error_code": "0000",
  "message": "\u8ba2\u5355\u652f\u4ed8\u6210\u529f",
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:40:29,827 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'message': '订单支付成功'}}]
INFO - 2025-05-06 13:40:29,828 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'message': '订单支付成功'}，等于预期结果：{'message': '订单支付成功'}
INFO - 2025-05-06 13:40:29,828 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:40:29,828 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:40:29,829 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:40:29,831 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：校验订单状态
INFO - 2025-05-06 13:40:29,831 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/checkOrderStatus
INFO - 2025-05-06 13:40:29,832 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:40:29,832 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：校验商品订单状态
INFO - 2025-05-06 13:40:29,832 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:40:29,832 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:40:29,832 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'orderNumber': '410054639064309408243', 'timeStamp': '1746510029'}}
INFO - 2025-05-06 13:40:29,858 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error": "",
  "error_code": "",
  "queryTime": "2025-05-06 13:40:29",
  "status": "0",
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:40:29,858 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'status': '0'}}]
INFO - 2025-05-06 13:40:29,858 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'status': '0'}，等于预期结果：{'status': '0'}
INFO - 2025-05-06 13:40:29,859 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:40:29,859 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:41:26,353 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：用户登录
INFO - 2025-05-06 13:41:26,354 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/login
INFO - 2025-05-06 13:41:26,354 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:41:26,354 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：用户名和密码正确登录验证
INFO - 2025-05-06 13:41:26,354 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:41:26,354 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:41:26,354 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_name': 'test01', 'passwd': 'admin123'}}
INFO - 2025-05-06 13:41:26,358 - sendrequest.py:107 -[sendrequest:send_request] - cookie：{'Cookie': {'access_token_cookie': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTc0NjUxMDA4NiwianRpIjoiM2FhZjkyYzEtMDk0NC00NGY5LWIxNTEtNDMxZjdhNjExMWMyIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6ImV4YW1wbGVfdXNlciIsIm5iZiI6MTc0NjUxMDA4NiwiY3NyZiI6ImZjZDk2MDk3LWUxMGYtNGYyNS1iNWJlLTA5NGMxNzQyNmVlNiIsImV4cCI6MTc0NjUxMDk4Nn0.Y4DHD8CSEgf9_6XU_nZQaTfM1HJVNbBxCPV5pOcDOv8', 'csrf_access_token': 'fcd96097-e10f-4f25-b5be-094c17426ee6'}}
INFO - 2025-05-06 13:41:26,358 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u767b\u5f55\u6210\u529f",
  "msg_code": 200,
  "orgId": "4140913758110176843",
  "token": "3dc7c7cdA746A619FCba0F8FBB638",
  "userId": "9623557772977266982"
}

INFO - 2025-05-06 13:41:26,358 - apiutil.py:154 -[apiutil:extract_data] - 提取接口的返回值：
INFO - 2025-05-06 13:41:26,359 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': 'none'}}, {'eq': {'msg': '登录成功'}}]
INFO - 2025-05-06 13:41:26,359 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【None】,实际结果【[None]】
INFO - 2025-05-06 13:41:26,359 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'msg': '登录成功'}，等于预期结果：{'msg': '登录成功'}
INFO - 2025-05-06 13:41:26,359 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:41:26,359 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
ERROR - 2025-05-06 13:41:26,361 - readyaml.py:113 -[readyaml:get_extract_yaml] - 【extract.yaml】没有找到：cookie,--'cookie'
ERROR - 2025-05-06 13:41:26,362 - readyaml.py:113 -[readyaml:get_extract_yaml] - 【extract.yaml】没有找到：cookie,--'cookie'
INFO - 2025-05-06 13:41:26,362 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：商品列表
INFO - 2025-05-06 13:41:26,362 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/goodsList
INFO - 2025-05-06 13:41:26,362 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：Get
INFO - 2025-05-06 13:41:26,362 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：获取商品列表
INFO - 2025-05-06 13:41:26,362 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8', 'token': 'None'}
INFO - 2025-05-06 13:41:26,362 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:41:26,362 - sendrequest.py:150 -[sendrequest:run_main] - 请求参数：{'params': {'msgType': 'getHandsetListOfCust', 'page': 1, 'size': 20}}
INFO - 2025-05-06 13:41:26,364 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "api_info": "today:21 max:10000 all[90=21+33+36];expires:2030-12-31",
  "cache": 0,
  "error_code": "0000",
  "goodsList": [
    {
      "goodsId": "18382788819",
      "goods_count": "233",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/bcf848aa71c6389607ae7a84b70f1543.jpeg",
      "goods_name": "\u30102\u4ef6\u5957\u3011\u5957\u88c5\u79cb\u51ac\u65b0\u6b3e\u4eff\u736d\u5154\u6bdb\u9489\u73e0\u76ae\u8349\u6bdb\u6bdb\u77ed\u5916\u5957\u52a0\u539a\u5927\u8863\u5973\u88c5",
      "original_price": "",
      "unit_price": "\uffe599.00"
    },
    {
      "goodsId": "33809635011",
      "goods_count": "521",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/176019babfdecffa1d9f98f40b7e99b4.jpeg",
      "goods_name": "\u597d\u5947\u5c0f\u68ee\u6797\u5fc3\u94bb\u88c5\u7eb8\u5c3f\u88e4M22\u62c9\u62c9\u88e4L18/XL14\u8d85\u8584\u900f\u6c14\u88e4\u578b\u5c3f\u4e0d\u6e7f 1\u4ef6\u88c5",
      "original_price": "",
      "unit_price": "\uffe5108.00"
    },
    {
      "goodsId": "56996760797",
      "goods_count": "1181",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u51bb\u5e72\u9e21\u5c0f\u80f8\u6574\u5757\u589e\u80a5\u8425\u517b\u53d1\u816e\u72d7\u72d7\u96f6\u98df\u65b0\u624b\u517b\u732b\u96f6\u98df\u5e7c\u732b\u96f6\u98df100g",
      "original_price": "",
      "unit_price": "\uffe517.80"
    },
    {
      "goodsId": "82193785267",
      "goods_count": "3000+",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u3010\u81ea\u8425\u3011ISB\u4f0a\u73ca\u5a1c\u610f\u5927\u5229\u6c34\u679c\u7cfb\u5217\u5ba0\u7269\u72ac\u732b\u6c90\u6d74\u9732\u9664\u81ed\u9999\u6ce2\u62a4\u6bdb\u7d20",
      "original_price": "",
      "unit_price": "\uffe5650.00"
    },
    {
      "goodsId": "74190550836",
      "goods_count": "1000+",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u3010\u65b0\u54c1\u96f60CM\u5d4c\u5165\u5f0f\u3011\u6d77\u5c14\u7535\u51b0\u7bb1410L\u5bb6\u7528\u6cd5\u5f0f\u56db\u95e8\u591a\u95e8\u5b98\u65b9\u6b63\u54c1",
      "original_price": "",
      "unit_price": "\uffe55746.00"
    }
  ],
  "reason": "",
  "request_id": "request_id",
  "secache": "c98b29872e8a4b28859db207944ba817",
  "secache_date": "2025-05-06 13:36:12",
  "secache_time": 1746509772000,
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:41:26,365 - apiutil.py:183 -[apiutil:extract_data_list] - json提取到参数：{'goodsId': ['18382788819', '33809635011', '56996760797', '82193785267', '74190550836']}
INFO - 2025-05-06 13:41:26,365 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': '0000'}}]
INFO - 2025-05-06 13:41:26,365 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【0000】,实际结果【0000】
INFO - 2025-05-06 13:41:26,365 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:41:26,366 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:41:26,367 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:41:26,369 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：新增用户
INFO - 2025-05-06 13:41:26,369 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/addUser
INFO - 2025-05-06 13:41:26,369 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:41:26,369 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：正常新增用户
INFO - 2025-05-06 13:41:26,369 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:41:26,369 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:41:26,369 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789890', 'role_id': 123456789, 'dates': '2023-12-31', 'phone': 13800000000, 'token': '3dc7c7cdA746A619FCba0F8FBB638'}}
INFO - 2025-05-06 13:41:26,390 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：<!doctype html>
<html lang=en>
  <head>
    <title>FileNotFoundError: [Errno 2] No such file or directory: &#39;../data/mockdata/userManage.json&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "3Pv5OqYGgocJHOylQscb";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>FileNotFoundError</h1>
<div class="detail">
  <p class="errormsg">FileNotFoundError: [Errno 2] No such file or directory: &#39;../data/mockdata/userManage.json&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2183487081056">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2183487079184">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2183487085520">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2183487080480">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2183487080768">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2183487085232">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2183487085376">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\row_Test-Automation-Framework-main\mock_server\api_server\base\flask_service.py"</cite>,
      line <em class="line">188</em>,
      in <code class="function">add_user</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>role_id = flask.request.form.get(&#39;role_id&#39;)</pre>
<pre class="line before"><span class="ws">    </span>dates = flask.request.form.get(&#39;dates&#39;)</pre>
<pre class="line before"><span class="ws">    </span>phone = flask.request.form.get(&#39;phone&#39;)</pre>
<pre class="line before"><span class="ws">    </span>token = flask.request.form.get(&#39;token&#39;)</pre>
<pre class="line before"><span class="ws">    </span>if all([username, password, role_id, dates, phone]) and token == get_token[&#39;token&#39;]:</pre>
<pre class="line current"><span class="ws">        </span>with open(&#39;../data/mockdata/userManage.json&#39;, &#39;a&#39;, encoding=&#39;utf-8&#39;) as f:
<span class="ws">        </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>add_user_info = {</pre>
<pre class="line after"><span class="ws">                </span>&#39;id&#39;: &#39;&#39;.join([random.choice(string.digits) for i in range(11)]),</pre>
<pre class="line after"><span class="ws">                </span>&#39;username&#39;: username,</pre>
<pre class="line after"><span class="ws">                </span>&#39;password&#39;: password,</pre>
<pre class="line after"><span class="ws">                </span>&#39;role_id&#39;: role_id,</pre></div>
</div>
</ul>
  <blockquote>FileNotFoundError: [Errno 2] No such file or directory: &#39;../data/mockdata/userManage.json&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\row_Test-Automation-Framework-main\mock_server\api_server\base\flask_service.py&#34;, line 188, in add_user
    with open(&#39;../data/mockdata/userManage.json&#39;, &#39;a&#39;, encoding=&#39;utf-8&#39;) as f:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: &#39;../data/mockdata/userManage.json&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\row_Test-Automation-Framework-main\mock_server\api_server\base\flask_service.py", line 188, in add_user
    with open('../data/mockdata/userManage.json', 'a', encoding='utf-8') as f:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: '../data/mockdata/userManage.json'


-->

INFO - 2025-05-06 13:41:26,554 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:41:26,555 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:41:26,556 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：新增用户
INFO - 2025-05-06 13:41:26,556 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/addUser
INFO - 2025-05-06 13:41:26,556 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:41:26,556 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效新增·缺少token
INFO - 2025-05-06 13:41:26,556 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:41:26,556 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:41:26,557 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789890', 'role_id': 123456789, 'dates': '2023-12-31', 'phone': 13800000000, 'token': None}}
INFO - 2025-05-06 13:41:26,572 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u65b0\u589e\u5931\u8d25",
  "msg_code": 9001
}

INFO - 2025-05-06 13:41:26,572 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'status_code': 200}}, {'contains': {'msg': '新增失败'}}]
INFO - 2025-05-06 13:41:26,572 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【新增失败】,实际结果【新增失败】
INFO - 2025-05-06 13:41:26,572 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:41:26,573 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:41:26,574 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:41:26,575 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：新增用户
INFO - 2025-05-06 13:41:26,575 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/addUser
INFO - 2025-05-06 13:41:26,575 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:41:26,575 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效新增·缺少必填参数username
INFO - 2025-05-06 13:41:26,575 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:41:26,575 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:41:26,575 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'password': 'tset6789890', 'role_id': 123456789, 'dates': '2023-12-31', 'phone': 13800000000, 'token': None}}
INFO - 2025-05-06 13:41:26,576 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u65b0\u589e\u5931\u8d25",
  "msg_code": 9001
}

INFO - 2025-05-06 13:41:26,576 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'status_code': 200}}, {'contains': {'msg': '新增失败'}}]
INFO - 2025-05-06 13:41:26,577 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【新增失败】,实际结果【新增失败】
INFO - 2025-05-06 13:41:26,577 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:41:26,577 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:41:26,579 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:41:26,581 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：新增用户
INFO - 2025-05-06 13:41:26,581 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/addUser
INFO - 2025-05-06 13:41:26,581 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:41:26,581 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效新增·缺少必填参数role_id
INFO - 2025-05-06 13:41:26,581 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:41:26,581 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:41:26,581 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789890', 'dates': '2023-12-31', 'phone': 13800000000, 'token': None}}
INFO - 2025-05-06 13:41:26,583 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u65b0\u589e\u5931\u8d25",
  "msg_code": 9001
}

INFO - 2025-05-06 13:41:26,583 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'status_code': 200}}, {'contains': {'msg': '新增失败'}}]
INFO - 2025-05-06 13:41:26,583 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【新增失败】,实际结果【新增失败】
INFO - 2025-05-06 13:41:26,583 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:41:26,583 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:41:26,584 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:41:26,586 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：商品详情
INFO - 2025-05-06 13:41:26,586 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/productDetail
INFO - 2025-05-06 13:41:26,586 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:41:26,586 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：获取商品详情
INFO - 2025-05-06 13:41:26,586 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:41:26,586 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:41:26,586 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'pro_id': '18382788819,33809635011,56996760797,82193785267,74190550836', 'page': 1, 'size': 20}}
INFO - 2025-05-06 13:41:26,604 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error": "\u4e0d\u5b58\u5728\u8be5\u5546\u54c1",
  "error_code": "4000",
  "goodsId": "",
  "item": {},
  "secache_date": "2025-05-06 13:41:26",
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:41:26,604 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': '4000'}}]
INFO - 2025-05-06 13:41:26,604 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【4000】,实际结果【4000】
INFO - 2025-05-06 13:41:26,604 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:41:26,605 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:41:26,606 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:41:26,607 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：修改用户
INFO - 2025-05-06 13:41:26,607 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/updateUser
INFO - 2025-05-06 13:41:26,607 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:41:26,607 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：正常修改用户信息
INFO - 2025-05-06 13:41:26,607 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:41:26,607 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:41:26,607 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789#$123', 'role_id': 89588181111112343, 'dates': '2023-12-31', 'phone': 13800000000}}
INFO - 2025-05-06 13:41:26,634 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u66f4\u65b0\u6210\u529f",
  "msg_code": 200
}

INFO - 2025-05-06 13:41:26,635 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'status_code': 200}}, {'contains': {'msg': '更新成功'}}]
INFO - 2025-05-06 13:41:26,635 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【更新成功】,实际结果【更新成功】
INFO - 2025-05-06 13:41:26,635 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:41:26,636 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:41:26,637 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:41:26,639 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：提交订单
INFO - 2025-05-06 13:41:26,639 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/placeAnOrder
INFO - 2025-05-06 13:41:26,639 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:41:26,639 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：提交订单
INFO - 2025-05-06 13:41:26,639 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:41:26,639 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:41:26,639 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'goods_id': '33809635011', 'number': 2, 'propertyChildIds': '2:9', 'inviter_id': '127839112', 'price': '128', 'freight_insurance': '0.0', 'discount_code': '002399', 'consignee_info': {'name': '张三', 'phone': 13800000000, 'address': '北京市海淀区西三环北路74号院4栋3单元1008'}}}
INFO - 2025-05-06 13:41:26,666 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "crateTime": "2025-05-06 13:41:26",
  "error": "",
  "error_code": "0000",
  "message": "\u63d0\u4ea4\u8ba2\u5355\u6210\u529f",
  "orderNumber": "111130938673343031367",
  "translate_language": "zh-CN",
  "userId": "9623557772977266982"
}

INFO - 2025-05-06 13:41:26,667 - apiutil.py:154 -[apiutil:extract_data] - 提取接口的返回值：
INFO - 2025-05-06 13:41:26,667 - apiutil.py:154 -[apiutil:extract_data] - 提取接口的返回值：
INFO - 2025-05-06 13:41:26,668 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'message': '提交订单成功'}}, {'eq': {'error_code': '0000'}}]
INFO - 2025-05-06 13:41:26,668 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'message': '提交订单成功'}，等于预期结果：{'message': '提交订单成功'}
INFO - 2025-05-06 13:41:26,668 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'error_code': '0000'}，等于预期结果：{'error_code': '0000'}
INFO - 2025-05-06 13:41:26,668 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:41:26,669 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:41:26,670 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:41:26,672 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-05-06 13:41:26,672 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-05-06 13:41:26,672 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:41:26,672 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：有效删除用户
INFO - 2025-05-06 13:41:26,672 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:41:26,672 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:41:26,672 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 123839387391912}}
INFO - 2025-05-06 13:41:26,696 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u5220\u9664\u6210\u529f!",
  "msg_code": 200
}

INFO - 2025-05-06 13:41:26,697 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除成功'}}]
INFO - 2025-05-06 13:41:26,697 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除成功】,实际结果【删除成功!】
INFO - 2025-05-06 13:41:26,697 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:41:26,698 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:41:26,699 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:41:26,700 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-05-06 13:41:26,701 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-05-06 13:41:26,701 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:41:26,701 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效删除用户·userid不存在
INFO - 2025-05-06 13:41:26,701 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:41:26,701 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:41:26,701 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 1238393873922}}
INFO - 2025-05-06 13:41:26,727 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u5220\u9664\u5931\u8d25\uff0c\u7528\u6237id\u4e0d\u5b58\u5728!",
  "msg_code": 9001
}

INFO - 2025-05-06 13:41:26,728 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除失败'}}]
INFO - 2025-05-06 13:41:26,728 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除失败】,实际结果【删除失败，用户id不存在!】
INFO - 2025-05-06 13:41:26,728 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:41:26,729 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:41:26,730 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:41:26,731 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-05-06 13:41:26,732 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-05-06 13:41:26,732 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:41:26,732 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效删除用户·userid为空
INFO - 2025-05-06 13:41:26,732 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:41:26,732 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:41:26,732 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 1238393873922}}
INFO - 2025-05-06 13:41:26,758 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u5220\u9664\u5931\u8d25\uff0c\u7528\u6237id\u4e0d\u5b58\u5728!",
  "msg_code": 9001
}

INFO - 2025-05-06 13:41:26,758 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除失败'}}]
INFO - 2025-05-06 13:41:26,758 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除失败】,实际结果【删除失败，用户id不存在!】
INFO - 2025-05-06 13:41:26,759 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:41:26,760 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:41:26,761 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:41:26,762 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-05-06 13:41:26,763 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-05-06 13:41:26,763 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:41:26,763 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效删除用户·缺少必填参数
INFO - 2025-05-06 13:41:26,763 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:41:26,763 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:41:26,790 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u5220\u9664\u5931\u8d25\uff0c\u7528\u6237id\u4e0d\u5b58\u5728!",
  "msg_code": 9001
}

INFO - 2025-05-06 13:41:26,790 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除失败'}}]
INFO - 2025-05-06 13:41:26,790 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除失败】,实际结果【删除失败，用户id不存在!】
INFO - 2025-05-06 13:41:26,790 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:41:26,791 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:41:26,793 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:41:26,799 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：订单支付
INFO - 2025-05-06 13:41:26,800 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/orderPay
INFO - 2025-05-06 13:41:26,800 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:41:26,800 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：订单支付
INFO - 2025-05-06 13:41:26,800 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:41:26,800 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:41:26,800 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'orderNumber': '111130938673343031367', 'userId': '9623557772977266982', 'timeStamp': '1746510086'}}
INFO - 2025-05-06 13:41:26,821 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "createTime": "2025-05-06 13:41:26",
  "error": "",
  "error_code": "0000",
  "message": "\u8ba2\u5355\u652f\u4ed8\u6210\u529f",
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:41:26,821 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'message': '订单支付成功'}}, {'contains': {'error_code': '0000'}}]
INFO - 2025-05-06 13:41:26,821 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【订单支付成功】,实际结果【订单支付成功】
INFO - 2025-05-06 13:41:26,822 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【0000】,实际结果【0000】
INFO - 2025-05-06 13:41:26,822 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:41:26,823 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:41:26,824 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:41:26,826 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：用户查询
INFO - 2025-05-06 13:41:26,827 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/queryUser
INFO - 2025-05-06 13:41:26,827 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:41:26,827 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：有效查询用户
INFO - 2025-05-06 13:41:26,827 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:41:26,827 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:41:26,827 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 123839387391912}}
INFO - 2025-05-06 13:41:26,830 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u67e5\u8be2\u6210\u529f!",
  "msg_code": 200
}

INFO - 2025-05-06 13:41:26,830 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '查询成功'}}, {'eq': {'msg_code': 200}}]
INFO - 2025-05-06 13:41:26,830 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【查询成功】,实际结果【查询成功!】
INFO - 2025-05-06 13:41:26,830 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'msg_code': 200}，等于预期结果：{'msg_code': 200}
INFO - 2025-05-06 13:41:26,830 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:41:26,831 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:41:26,832 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:41:26,834 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：商品列表
INFO - 2025-05-06 13:41:26,834 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/goodsList
INFO - 2025-05-06 13:41:26,834 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：Get
INFO - 2025-05-06 13:41:26,834 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：获取商品列表
INFO - 2025-05-06 13:41:26,834 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8', 'token': '3dc7c7cdA746A619FCba0F8FBB638'}
INFO - 2025-05-06 13:41:26,835 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:41:26,835 - sendrequest.py:150 -[sendrequest:run_main] - 请求参数：{'params': {'msgType': 'getHandsetListOfCust', 'page': 1, 'size': 20}}
INFO - 2025-05-06 13:41:26,850 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "api_info": "today:21 max:10000 all[90=21+33+36];expires:2030-12-31",
  "cache": 0,
  "error_code": "0000",
  "goodsList": [
    {
      "goodsId": "18382788819",
      "goods_count": "233",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/bcf848aa71c6389607ae7a84b70f1543.jpeg",
      "goods_name": "\u30102\u4ef6\u5957\u3011\u5957\u88c5\u79cb\u51ac\u65b0\u6b3e\u4eff\u736d\u5154\u6bdb\u9489\u73e0\u76ae\u8349\u6bdb\u6bdb\u77ed\u5916\u5957\u52a0\u539a\u5927\u8863\u5973\u88c5",
      "original_price": "",
      "unit_price": "\uffe599.00"
    },
    {
      "goodsId": "33809635011",
      "goods_count": "521",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/176019babfdecffa1d9f98f40b7e99b4.jpeg",
      "goods_name": "\u597d\u5947\u5c0f\u68ee\u6797\u5fc3\u94bb\u88c5\u7eb8\u5c3f\u88e4M22\u62c9\u62c9\u88e4L18/XL14\u8d85\u8584\u900f\u6c14\u88e4\u578b\u5c3f\u4e0d\u6e7f 1\u4ef6\u88c5",
      "original_price": "",
      "unit_price": "\uffe5108.00"
    },
    {
      "goodsId": "56996760797",
      "goods_count": "1181",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u51bb\u5e72\u9e21\u5c0f\u80f8\u6574\u5757\u589e\u80a5\u8425\u517b\u53d1\u816e\u72d7\u72d7\u96f6\u98df\u65b0\u624b\u517b\u732b\u96f6\u98df\u5e7c\u732b\u96f6\u98df100g",
      "original_price": "",
      "unit_price": "\uffe517.80"
    },
    {
      "goodsId": "82193785267",
      "goods_count": "3000+",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u3010\u81ea\u8425\u3011ISB\u4f0a\u73ca\u5a1c\u610f\u5927\u5229\u6c34\u679c\u7cfb\u5217\u5ba0\u7269\u72ac\u732b\u6c90\u6d74\u9732\u9664\u81ed\u9999\u6ce2\u62a4\u6bdb\u7d20",
      "original_price": "",
      "unit_price": "\uffe5650.00"
    },
    {
      "goodsId": "74190550836",
      "goods_count": "1000+",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u3010\u65b0\u54c1\u96f60CM\u5d4c\u5165\u5f0f\u3011\u6d77\u5c14\u7535\u51b0\u7bb1410L\u5bb6\u7528\u6cd5\u5f0f\u56db\u95e8\u591a\u95e8\u5b98\u65b9\u6b63\u54c1",
      "original_price": "",
      "unit_price": "\uffe55746.00"
    }
  ],
  "reason": "",
  "request_id": "request_id",
  "secache": "c98b29872e8a4b28859db207944ba817",
  "secache_date": "2025-05-06 13:36:12",
  "secache_time": 1746509772000,
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:41:26,850 - apiutil_business.py:198 -[apiutil_business:extract_data_list] - json提取到参数：{'goodsIds': ['18382788819', '33809635011', '56996760797', '82193785267', '74190550836']}
INFO - 2025-05-06 13:41:26,851 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': '0000'}}]
INFO - 2025-05-06 13:41:26,851 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【0000】,实际结果【0000】
INFO - 2025-05-06 13:41:26,851 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:41:26,851 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:41:26,852 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:41:26,854 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：商品详情
INFO - 2025-05-06 13:41:26,854 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/productDetail
INFO - 2025-05-06 13:41:26,854 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:41:26,854 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：获取商品详情
INFO - 2025-05-06 13:41:26,854 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:41:26,854 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:41:26,854 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'pro_id': '18382788819', 'page': 1, 'size': 20}}
INFO - 2025-05-06 13:41:26,883 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "api_info": "today:21 max:10000 all[90=21+33+36];expires:2030-12-31",
  "api_type": "pinduoduo",
  "cache": 0,
  "call_args": {
    "num_iid": "1620002566"
  },
  "client_ip": "106.6.39.223",
  "error": "",
  "error_code": "0000",
  "execution_time": "0.437",
  "goodsId": "82193785267",
  "item": {
    "AmountOnSale": 3188,
    "CategoryId": 8484,
    "Coupon": null,
    "Delivery": {
      "From": null,
      "Info": null,
      "MarkInfo": null,
      "Postage": "\u5feb\u9012 \u514d\u8fd0\u8d39",
      "To": null,
      "extras": null
    },
    "DescUrl": null,
    "Detail": "<img src=\"https://img.pddpic.com/mms-material-img/2022-09-18/3f89d470-1af8-4dee-b529-6d62aa2ea3b7.png\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2019-02-15/ddf6fe7b-b536-4183-932d-69a1189a3f59.png\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/20f659b04d3e7e5851c27ff9931c96fc.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2019-11-14/4420a8c3-49ed-46d8-ab55-15e7a638ca31.jpg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/26c3e9d5cfbaf4e8f13b2bdd38f48d71.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/0aa872fa74599dad7b6aefe6b6c035c0.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/6bc959e32a30424c7a5284a37676999c.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/1fa9861a8c99c5e9e8119fd2239fef5a.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/b62cabf1d2320c5761e3f4c15203fb20.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/6f6e54376a66cbc78e16700d4c424fe1.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/2f60753dfc875a6876adc35833a69d31.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/ae0116e589d8de712f8dafd0c356cefe.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/da910c98fcc8de1b4d2d1498cd7899fd.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/140349649d8b7d08c8e88bfbbaa2f900.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/a953bae2eeb7364ef3ef2976a97d07eb.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/4da59828136c3b1308aad0aa990778a7.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/4a365b61a80e47288c8609ccd5982396.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-11-17/cd0a8a96b783a51236812ce24c59a329.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-11-17/16008ac19768d05e7dee16406ff958a1.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-11-17/ef1d17b69ebf9449a8bb52459b168c26.jpeg\" style=\"width:100%;\"/>",
    "FansCount": null,
    "ImageUrls": [
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/bcf848aa71c6389607ae7a84b70f1543.jpeg",
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/176019babfdecffa1d9f98f40b7e99b4.jpeg",
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/d209ef7bcc9183c3bb8ca1dfdb108d49.jpeg",
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/74257ab65f3f00da7a90fde9042fe640.jpeg",
      "https://t00img.yangkeduo.com/goods/images/2019-08-17/e8fbd9cb-cc74-4caa-9380-84c46d27b008.jpg",
      "https://t00img.yangkeduo.com/goods/images/2019-08-17/d76f515b-e375-4060-b94e-cf64f6b0964e.jpg",
      "https://t00img.yangkeduo.com/goods/images/2019-08-17/f2f279b5-6000-4fbe-b99b-7c1cbd7884ea.jpg"
    ],
    "MainImageVideo": null,
    "OfferId": 1620002566,
    "OriginalPriceRangeInfos": [
      {
        "ConvertPrice": 0,
        "Price": 115,
        "Range": "3"
      }
    ],
    "PriceRangeInfos": [
      {
        "ConvertPrice": 0,
        "Price": 95.4,
        "Range": "3"
      }
    ],
    "ProductFeatureTuples": [
      {
        "Item1": "\u9762\u6599\u6750\u8d28",
        "Item2": "\u4eff\u76ae\u8349"
      },
      {
        "Item1": "\u6210\u5206\u542b\u91cf",
        "Item2": "71%\uff08\u542b\uff09\u201480%\uff08\u542b\uff09"
      },
      {
        "Item1": "\u7248\u578b",
        "Item2": "\u4fee\u8eab"
      },
      {
        "Item1": "\u9886\u578b",
        "Item2": "\u5706\u9886"
      },
      {
        "Item1": "\u8863\u957f",
        "Item2": "\u77ed\u6b3e"
      },
      {
        "Item1": "\u662f\u5426\u5e26\u6bdb\u9886",
        "Item2": "\u4e0d\u5e26\u6bdb\u9886"
      },
      {
        "Item1": "\u4e3b\u98ce\u683c",
        "Item2": "\u6c14\u8d28\u540d\u5a9b"
      }
    ],
    "ProductFeatures": {
      "\u4e3b\u98ce\u683c": "\u6c14\u8d28\u540d\u5a9b",
      "\u6210\u5206\u542b\u91cf": "71%\uff08\u542b\uff09\u201480%\uff08\u542b\uff09",
      "\u662f\u5426\u5e26\u6bdb\u9886": "\u4e0d\u5e26\u6bdb\u9886",
      "\u7248\u578b": "\u4fee\u8eab",
      "\u8863\u957f": "\u77ed\u6b3e",
      "\u9762\u6599\u6750\u8d28": "\u4eff\u76ae\u8349",
      "\u9886\u578b": "\u5706\u9886"
    },
    "RateCount": null,
    "RetryCount": 0,
    "SellCount": "\u5df2\u62fc4.2\u4e07\u4ef6",
    "SellerId": null,
    "SellerNick": null,
    "ShopId": "461742",
    "ShopInfo": null,
    "ShopName": "\u679c\u679c\u5bb6\u6c14\u8d28\u5973\u88c5",
    "ShopUrl": "http://yangkeduo.com/mall_page.html?mall_id=461742",
    "SkuMaps": [
      {
        "AmountOnSale": 73,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:119128",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357891",
        "SpecAttributes": {
          "\u5c3a\u7801": "S\uff0890\u65a4\u4ee5\u4e0b\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 65,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:96784",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357892",
        "SpecAttributes": {
          "\u5c3a\u7801": "M\uff0890-100\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 82,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:33651",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357893",
        "SpecAttributes": {
          "\u5c3a\u7801": "L\uff08100-110\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 89,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:33652",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357894",
        "SpecAttributes": {
          "\u5c3a\u7801": "XL\uff08110-120\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 94,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:33653",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357895",
        "SpecAttributes": {
          "\u5c3a\u7801": "2XL\uff08120-130\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 105,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:33656",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357896",
        "SpecAttributes": {
          "\u5c3a\u7801": "3XL\uff08130-140\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 1051,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:119128",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357897",
        "SpecAttributes": {
          "\u5c3a\u7801": "S\uff0890\u65a4\u4ee5\u4e0b\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 88,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:96784",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357898",
        "SpecAttributes": {
          "\u5c3a\u7801": "M\uff0890-100\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 80,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:33651",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357899",
        "SpecAttributes": {
          "\u5c3a\u7801": "L\uff08100-110\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 660,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:33652",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357900",
        "SpecAttributes": {
          "\u5c3a\u7801": "XL\uff08110-120\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 126,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:33653",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357901",
        "SpecAttributes": {
          "\u5c3a\u7801": "2XL\uff08120-130\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 89,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:33656",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357902",
        "SpecAttributes": {
          "\u5c3a\u7801": "3XL\uff08130-140\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 98,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/48b30664f0f7e526ab1b956e813f25cf.jpeg",
        "Key": "1215:105309781;1226:119128",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107855",
        "SpecAttributes": {
          "\u5c3a\u7801": "S\uff0890\u65a4\u4ee5\u4e0b\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 95,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/3660b7893ca5cda1ffcea745d10b2506.jpeg",
        "Key": "1215:105309781;1226:96784",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107856",
        "SpecAttributes": {
          "\u5c3a\u7801": "M\uff0890-100\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 97,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/a4a5a671afbb2d8e1f4c21c0ced3bea8.jpeg",
        "Key": "1215:105309781;1226:33651",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107857",
        "SpecAttributes": {
          "\u5c3a\u7801": "L\uff08100-110\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 97,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/f0551176629bf81f25757c160198dba1.jpeg",
        "Key": "1215:105309781;1226:33652",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107858",
        "SpecAttributes": {
          "\u5c3a\u7801": "XL\uff08110-120\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 99,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/801a2e23140bfe76229f02aab0a8a5fe.jpeg",
        "Key": "1215:105309781;1226:33653",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107853",
        "SpecAttributes": {
          "\u5c3a\u7801": "2XL\uff08120-130\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 100,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/2f202934f16f0eee41257b77bf489262.jpeg",
        "Key": "1215:105309781;1226:33656",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107854",
        "SpecAttributes": {
          "\u5c3a\u7801": "3XL\uff08130-140\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      }
    ],
    "SkuProps": [
      {
        "IsImg": true,
        "Prop": "\u989c\u8272",
        "Value": [
          {
            "imageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
            "name": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)",
            "value": "1215:1115500378"
          },
          {
            "imageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
            "name": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09",
            "value": "1215:1115501666"
          },
          {
            "imageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/48b30664f0f7e526ab1b956e813f25cf.jpeg",
            "name": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09",
            "value": "1215:105309781"
          }
        ]
      },
      {
        "IsImg": false,
        "Prop": "\u5c3a\u7801",
        "Value": [
          {
            "name": "S\uff0890\u65a4\u4ee5\u4e0b\uff09",
            "value": "1226:119128"
          },
          {
            "name": "M\uff0890-100\u65a4\uff09",
            "value": "1226:96784"
          },
          {
            "name": "L\uff08100-110\u65a4\uff09",
            "value": "1226:33651"
          },
          {
            "name": "XL\uff08110-120\u65a4\uff09",
            "value": "1226:33652"
          },
          {
            "name": "2XL\uff08120-130\u65a4\uff09",
            "value": "1226:33653"
          },
          {
            "name": "3XL\uff08130-140\u65a4\uff09",
            "value": "1226:33656"
          }
        ]
      }
    ],
    "SourceType": 6,
    "Subject": "\u30102\u4ef6\u5957\u3011\u5957\u88c5\u79cb\u51ac\u65b0\u6b3e\u4eff\u736d\u5154\u6bdb\u9489\u73e0\u76ae\u8349\u6bdb\u6bdb\u77ed\u5916\u5957\u52a0\u539a\u5927\u8863\u5973\u88c5",
    "Tag": null,
    "Unit": null,
    "UserId": "461742",
    "_ddf": "app",
    "format_check": "ok"
  },
  "reason": "",
  "request_id": "gw-4.63510267214bd",
  "secache": "c98b29872e8a4b28859db207944ba817",
  "secache_date": "2025-05-06 13:41:26",
  "secache_time": 1666253415,
  "server_memory": "0.84MB",
  "server_time": "Beijing/2023-10-20 16:10:15",
  "translate_engine": "baidu",
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:41:26,884 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'error_code': '0000'}}]
INFO - 2025-05-06 13:41:26,884 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'error_code': '0000'}，等于预期结果：{'error_code': '0000'}
INFO - 2025-05-06 13:41:26,884 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:41:26,885 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:41:26,886 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:41:26,889 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：提交订单
INFO - 2025-05-06 13:41:26,889 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/placeAnOrder
INFO - 2025-05-06 13:41:26,889 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:41:26,889 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：详情页面选择规格，提交订单
INFO - 2025-05-06 13:41:26,889 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:41:26,890 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:41:26,890 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'goods_id': '18382788819', 'number': 2, 'propertyChildIds': '2:9', 'inviter_id': 127839112, 'price': '128', 'freight_insurance': '0.00', 'discount_code': '002399', 'consignee_info': {'name': '张三', 'phone': 13800000000, 'address': '北京市海淀区西三环北路74号院4栋3单元1008'}}}
INFO - 2025-05-06 13:41:26,893 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "crateTime": "2025-05-06 13:41:26",
  "error": "",
  "error_code": "0000",
  "message": "\u63d0\u4ea4\u8ba2\u5355\u6210\u529f",
  "orderNumber": "759189979928712574739",
  "translate_language": "zh-CN",
  "userId": "9623557772977266982"
}

INFO - 2025-05-06 13:41:26,893 - apiutil_business.py:171 -[apiutil_business:extract_data] - json提取到参数：{'orderNumber': '759189979928712574739'}
INFO - 2025-05-06 13:41:26,893 - apiutil_business.py:171 -[apiutil_business:extract_data] - json提取到参数：{'userId': '9623557772977266982'}
INFO - 2025-05-06 13:41:26,894 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'message': '提交订单成功'}}]
INFO - 2025-05-06 13:41:26,894 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'message': '提交订单成功'}，等于预期结果：{'message': '提交订单成功'}
INFO - 2025-05-06 13:41:26,894 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:41:26,894 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:41:26,895 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:41:26,899 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：订单支付
INFO - 2025-05-06 13:41:26,899 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/orderPay
INFO - 2025-05-06 13:41:26,900 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:41:26,900 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：订单支付
INFO - 2025-05-06 13:41:26,900 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:41:26,900 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:41:26,900 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'orderNumber': '759189979928712574739', 'userId': '9623557772977266982', 'timeStamp': '1746510086'}}
INFO - 2025-05-06 13:41:26,927 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "createTime": "2025-05-06 13:41:26",
  "error": "",
  "error_code": "0000",
  "message": "\u8ba2\u5355\u652f\u4ed8\u6210\u529f",
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:41:26,928 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'message': '订单支付成功'}}]
INFO - 2025-05-06 13:41:26,928 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'message': '订单支付成功'}，等于预期结果：{'message': '订单支付成功'}
INFO - 2025-05-06 13:41:26,928 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:41:26,929 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:41:26,929 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:41:26,933 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：校验订单状态
INFO - 2025-05-06 13:41:26,933 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/checkOrderStatus
INFO - 2025-05-06 13:41:26,933 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:41:26,933 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：校验商品订单状态
INFO - 2025-05-06 13:41:26,933 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:41:26,933 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:41:26,933 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'orderNumber': '759189979928712574739', 'timeStamp': '1746510086'}}
INFO - 2025-05-06 13:41:26,935 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error": "",
  "error_code": "",
  "queryTime": "2025-05-06 13:41:26",
  "status": "0",
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:41:26,935 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'status': '0'}}]
INFO - 2025-05-06 13:41:26,935 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'status': '0'}，等于预期结果：{'status': '0'}
INFO - 2025-05-06 13:41:26,935 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:41:26,936 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:43:43,708 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：用户登录
INFO - 2025-05-06 13:43:43,708 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/login
INFO - 2025-05-06 13:43:43,708 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:43:43,708 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：用户名和密码正确登录验证
INFO - 2025-05-06 13:43:43,708 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:43:43,708 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:43:43,709 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_name': 'test01', 'passwd': 'admin123'}}
INFO - 2025-05-06 13:43:43,712 - sendrequest.py:107 -[sendrequest:send_request] - cookie：{'Cookie': {'access_token_cookie': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTc0NjUxMDIyMywianRpIjoiYjIyOGU2YmUtZDc4NC00YzliLWEzZjEtOWE5MzcwNTY1YjUwIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6ImV4YW1wbGVfdXNlciIsIm5iZiI6MTc0NjUxMDIyMywiY3NyZiI6IjY3MWNmY2E3LTc0MTEtNDljNy1iZTM3LTNkNTIyZmUyNjU4OCIsImV4cCI6MTc0NjUxMTEyM30.lYHzxHK2fe23GzU-9Opq6iMwVa25YbX0NoUfRyqrXwM', 'csrf_access_token': '671cfca7-7411-49c7-be37-3d522fe26588'}}
INFO - 2025-05-06 13:43:43,713 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u767b\u5f55\u6210\u529f",
  "msg_code": 200,
  "orgId": "6140913758128971280",
  "token": "281C2Af9BCc50156e0febDEec9b82",
  "userId": "9623557772977266982"
}

INFO - 2025-05-06 13:43:43,713 - apiutil.py:154 -[apiutil:extract_data] - 提取接口的返回值：
INFO - 2025-05-06 13:43:43,714 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': 'none'}}, {'eq': {'msg': '登录成功'}}]
INFO - 2025-05-06 13:43:43,714 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【None】,实际结果【[None]】
INFO - 2025-05-06 13:43:43,714 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'msg': '登录成功'}，等于预期结果：{'msg': '登录成功'}
INFO - 2025-05-06 13:43:43,714 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:43:43,715 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
ERROR - 2025-05-06 13:43:43,716 - readyaml.py:113 -[readyaml:get_extract_yaml] - 【extract.yaml】没有找到：cookie,--'cookie'
ERROR - 2025-05-06 13:43:43,717 - readyaml.py:113 -[readyaml:get_extract_yaml] - 【extract.yaml】没有找到：cookie,--'cookie'
INFO - 2025-05-06 13:43:43,717 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：商品列表
INFO - 2025-05-06 13:43:43,717 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/goodsList
INFO - 2025-05-06 13:43:43,717 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：Get
INFO - 2025-05-06 13:43:43,717 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：获取商品列表
INFO - 2025-05-06 13:43:43,717 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8', 'token': 'None'}
INFO - 2025-05-06 13:43:43,717 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:43:43,718 - sendrequest.py:150 -[sendrequest:run_main] - 请求参数：{'params': {'msgType': 'getHandsetListOfCust', 'page': 1, 'size': 20}}
INFO - 2025-05-06 13:43:43,736 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "api_info": "today:21 max:10000 all[90=21+33+36];expires:2030-12-31",
  "cache": 0,
  "error_code": "0000",
  "goodsList": [
    {
      "goodsId": "18382788819",
      "goods_count": "233",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/bcf848aa71c6389607ae7a84b70f1543.jpeg",
      "goods_name": "\u30102\u4ef6\u5957\u3011\u5957\u88c5\u79cb\u51ac\u65b0\u6b3e\u4eff\u736d\u5154\u6bdb\u9489\u73e0\u76ae\u8349\u6bdb\u6bdb\u77ed\u5916\u5957\u52a0\u539a\u5927\u8863\u5973\u88c5",
      "original_price": "",
      "unit_price": "\uffe599.00"
    },
    {
      "goodsId": "33809635011",
      "goods_count": "521",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/176019babfdecffa1d9f98f40b7e99b4.jpeg",
      "goods_name": "\u597d\u5947\u5c0f\u68ee\u6797\u5fc3\u94bb\u88c5\u7eb8\u5c3f\u88e4M22\u62c9\u62c9\u88e4L18/XL14\u8d85\u8584\u900f\u6c14\u88e4\u578b\u5c3f\u4e0d\u6e7f 1\u4ef6\u88c5",
      "original_price": "",
      "unit_price": "\uffe5108.00"
    },
    {
      "goodsId": "56996760797",
      "goods_count": "1181",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u51bb\u5e72\u9e21\u5c0f\u80f8\u6574\u5757\u589e\u80a5\u8425\u517b\u53d1\u816e\u72d7\u72d7\u96f6\u98df\u65b0\u624b\u517b\u732b\u96f6\u98df\u5e7c\u732b\u96f6\u98df100g",
      "original_price": "",
      "unit_price": "\uffe517.80"
    },
    {
      "goodsId": "82193785267",
      "goods_count": "3000+",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u3010\u81ea\u8425\u3011ISB\u4f0a\u73ca\u5a1c\u610f\u5927\u5229\u6c34\u679c\u7cfb\u5217\u5ba0\u7269\u72ac\u732b\u6c90\u6d74\u9732\u9664\u81ed\u9999\u6ce2\u62a4\u6bdb\u7d20",
      "original_price": "",
      "unit_price": "\uffe5650.00"
    },
    {
      "goodsId": "74190550836",
      "goods_count": "1000+",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u3010\u65b0\u54c1\u96f60CM\u5d4c\u5165\u5f0f\u3011\u6d77\u5c14\u7535\u51b0\u7bb1410L\u5bb6\u7528\u6cd5\u5f0f\u56db\u95e8\u591a\u95e8\u5b98\u65b9\u6b63\u54c1",
      "original_price": "",
      "unit_price": "\uffe55746.00"
    }
  ],
  "reason": "",
  "request_id": "request_id",
  "secache": "c98b29872e8a4b28859db207944ba817",
  "secache_date": "2025-05-06 13:36:12",
  "secache_time": 1746509772000,
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:43:43,737 - apiutil.py:183 -[apiutil:extract_data_list] - json提取到参数：{'goodsId': ['18382788819', '33809635011', '56996760797', '82193785267', '74190550836']}
INFO - 2025-05-06 13:43:43,737 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': '0000'}}]
INFO - 2025-05-06 13:43:43,738 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【0000】,实际结果【0000】
INFO - 2025-05-06 13:43:43,738 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:43:43,738 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:43:43,739 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:43:43,741 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：新增用户
INFO - 2025-05-06 13:43:43,741 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/addUser
INFO - 2025-05-06 13:43:43,742 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:43:43,742 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：正常新增用户
INFO - 2025-05-06 13:43:43,742 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:43:43,742 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:43:43,742 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789890', 'role_id': 123456789, 'dates': '2023-12-31', 'phone': 13800000000, 'token': '281C2Af9BCc50156e0febDEec9b82'}}
INFO - 2025-05-06 13:43:43,747 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：<!doctype html>
<html lang=en>
  <head>
    <title>FileNotFoundError: [Errno 2] No such file or directory: &#39;../data/mockdata/userManage.json&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "3Pv5OqYGgocJHOylQscb";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>FileNotFoundError</h1>
<div class="detail">
  <p class="errormsg">FileNotFoundError: [Errno 2] No such file or directory: &#39;../data/mockdata/userManage.json&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2183487084656">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2183487086672">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2183487081920">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2183487087104">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2183487084800">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2183487079616">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2183487079472">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\row_Test-Automation-Framework-main\mock_server\api_server\base\flask_service.py"</cite>,
      line <em class="line">188</em>,
      in <code class="function">add_user</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>role_id = flask.request.form.get(&#39;role_id&#39;)</pre>
<pre class="line before"><span class="ws">    </span>dates = flask.request.form.get(&#39;dates&#39;)</pre>
<pre class="line before"><span class="ws">    </span>phone = flask.request.form.get(&#39;phone&#39;)</pre>
<pre class="line before"><span class="ws">    </span>token = flask.request.form.get(&#39;token&#39;)</pre>
<pre class="line before"><span class="ws">    </span>if all([username, password, role_id, dates, phone]) and token == get_token[&#39;token&#39;]:</pre>
<pre class="line current"><span class="ws">        </span>with open(&#39;../data/mockdata/userManage.json&#39;, &#39;a&#39;, encoding=&#39;utf-8&#39;) as f:
<span class="ws">        </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>add_user_info = {</pre>
<pre class="line after"><span class="ws">                </span>&#39;id&#39;: &#39;&#39;.join([random.choice(string.digits) for i in range(11)]),</pre>
<pre class="line after"><span class="ws">                </span>&#39;username&#39;: username,</pre>
<pre class="line after"><span class="ws">                </span>&#39;password&#39;: password,</pre>
<pre class="line after"><span class="ws">                </span>&#39;role_id&#39;: role_id,</pre></div>
</div>
</ul>
  <blockquote>FileNotFoundError: [Errno 2] No such file or directory: &#39;../data/mockdata/userManage.json&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\row_Test-Automation-Framework-main\mock_server\api_server\base\flask_service.py&#34;, line 188, in add_user
    with open(&#39;../data/mockdata/userManage.json&#39;, &#39;a&#39;, encoding=&#39;utf-8&#39;) as f:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: &#39;../data/mockdata/userManage.json&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\row_Test-Automation-Framework-main\mock_server\api_server\base\flask_service.py", line 188, in add_user
    with open('../data/mockdata/userManage.json', 'a', encoding='utf-8') as f:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: '../data/mockdata/userManage.json'


-->

INFO - 2025-05-06 13:43:43,909 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:43:43,910 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:43:43,911 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：新增用户
INFO - 2025-05-06 13:43:43,911 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/addUser
INFO - 2025-05-06 13:43:43,912 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:43:43,912 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效新增·缺少token
INFO - 2025-05-06 13:43:43,912 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:43:43,912 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:43:43,913 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789890', 'role_id': 123456789, 'dates': '2023-12-31', 'phone': 13800000000, 'token': None}}
INFO - 2025-05-06 13:43:43,915 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u65b0\u589e\u5931\u8d25",
  "msg_code": 9001
}

INFO - 2025-05-06 13:43:43,915 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'status_code': 200}}, {'contains': {'msg': '新增失败'}}]
INFO - 2025-05-06 13:43:43,916 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【新增失败】,实际结果【新增失败】
INFO - 2025-05-06 13:43:43,916 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:43:43,916 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:43:43,917 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:43:43,918 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：新增用户
INFO - 2025-05-06 13:43:43,918 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/addUser
INFO - 2025-05-06 13:43:43,918 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:43:43,918 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效新增·缺少必填参数username
INFO - 2025-05-06 13:43:43,918 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:43:43,919 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:43:43,919 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'password': 'tset6789890', 'role_id': 123456789, 'dates': '2023-12-31', 'phone': 13800000000, 'token': None}}
INFO - 2025-05-06 13:43:43,920 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u65b0\u589e\u5931\u8d25",
  "msg_code": 9001
}

INFO - 2025-05-06 13:43:43,921 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'status_code': 200}}, {'contains': {'msg': '新增失败'}}]
INFO - 2025-05-06 13:43:43,921 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【新增失败】,实际结果【新增失败】
INFO - 2025-05-06 13:43:43,921 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:43:43,921 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:43:43,921 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:43:43,923 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：新增用户
INFO - 2025-05-06 13:43:43,923 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/addUser
INFO - 2025-05-06 13:43:43,923 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:43:43,923 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效新增·缺少必填参数role_id
INFO - 2025-05-06 13:43:43,923 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:43:43,923 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:43:43,923 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789890', 'dates': '2023-12-31', 'phone': 13800000000, 'token': None}}
INFO - 2025-05-06 13:43:43,925 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u65b0\u589e\u5931\u8d25",
  "msg_code": 9001
}

INFO - 2025-05-06 13:43:43,925 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'status_code': 200}}, {'contains': {'msg': '新增失败'}}]
INFO - 2025-05-06 13:43:43,925 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【新增失败】,实际结果【新增失败】
INFO - 2025-05-06 13:43:43,926 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:43:43,926 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:43:43,926 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:43:43,928 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：商品详情
INFO - 2025-05-06 13:43:43,928 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/productDetail
INFO - 2025-05-06 13:43:43,928 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:43:43,929 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：获取商品详情
INFO - 2025-05-06 13:43:43,929 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:43:43,929 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:43:43,929 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'pro_id': '18382788819,33809635011,56996760797,82193785267,74190550836', 'page': 1, 'size': 20}}
INFO - 2025-05-06 13:43:43,931 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error": "\u4e0d\u5b58\u5728\u8be5\u5546\u54c1",
  "error_code": "4000",
  "goodsId": "",
  "item": {},
  "secache_date": "2025-05-06 13:43:43",
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:43:43,931 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': '4000'}}]
INFO - 2025-05-06 13:43:43,931 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【4000】,实际结果【4000】
INFO - 2025-05-06 13:43:43,931 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:43:43,931 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:43:43,932 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:43:43,933 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：修改用户
INFO - 2025-05-06 13:43:43,933 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/updateUser
INFO - 2025-05-06 13:43:43,933 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:43:43,933 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：正常修改用户信息
INFO - 2025-05-06 13:43:43,933 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:43:43,933 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:43:43,933 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789#$123', 'role_id': 89588181111112343, 'dates': '2023-12-31', 'phone': 13800000000}}
INFO - 2025-05-06 13:43:43,952 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u66f4\u65b0\u6210\u529f",
  "msg_code": 200
}

INFO - 2025-05-06 13:43:43,953 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'status_code': 200}}, {'contains': {'msg': '更新成功'}}]
INFO - 2025-05-06 13:43:43,953 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【更新成功】,实际结果【更新成功】
INFO - 2025-05-06 13:43:43,953 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:43:43,954 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:43:43,954 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:43:43,956 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：提交订单
INFO - 2025-05-06 13:43:43,956 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/placeAnOrder
INFO - 2025-05-06 13:43:43,956 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:43:43,957 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：提交订单
INFO - 2025-05-06 13:43:43,957 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:43:43,957 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:43:43,957 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'goods_id': '56996760797', 'number': 2, 'propertyChildIds': '2:9', 'inviter_id': '127839112', 'price': '128', 'freight_insurance': '0.0', 'discount_code': '002399', 'consignee_info': {'name': '张三', 'phone': 13800000000, 'address': '北京市海淀区西三环北路74号院4栋3单元1008'}}}
INFO - 2025-05-06 13:43:43,985 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "crateTime": "2025-05-06 13:43:43",
  "error": "",
  "error_code": "0000",
  "message": "\u63d0\u4ea4\u8ba2\u5355\u6210\u529f",
  "orderNumber": "730097466284236933014",
  "translate_language": "zh-CN",
  "userId": "9623557772977266982"
}

INFO - 2025-05-06 13:43:43,985 - apiutil.py:154 -[apiutil:extract_data] - 提取接口的返回值：
INFO - 2025-05-06 13:43:43,986 - apiutil.py:154 -[apiutil:extract_data] - 提取接口的返回值：
INFO - 2025-05-06 13:43:43,987 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'message': '提交订单成功'}}, {'eq': {'error_code': '0000'}}]
INFO - 2025-05-06 13:43:43,987 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'message': '提交订单成功'}，等于预期结果：{'message': '提交订单成功'}
INFO - 2025-05-06 13:43:43,987 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'error_code': '0000'}，等于预期结果：{'error_code': '0000'}
INFO - 2025-05-06 13:43:43,987 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:43:43,988 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:43:43,989 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:43:43,991 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-05-06 13:43:43,992 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-05-06 13:43:43,992 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:43:43,992 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：有效删除用户
INFO - 2025-05-06 13:43:43,992 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:43:43,992 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:43:43,993 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 123839387391912}}
INFO - 2025-05-06 13:43:43,995 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u5220\u9664\u6210\u529f!",
  "msg_code": 200
}

INFO - 2025-05-06 13:43:43,996 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除成功'}}]
INFO - 2025-05-06 13:43:43,996 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除成功】,实际结果【删除成功!】
INFO - 2025-05-06 13:43:43,996 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:43:43,997 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:43:43,997 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:43:43,999 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-05-06 13:43:43,999 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-05-06 13:43:43,999 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:43:43,999 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效删除用户·userid不存在
INFO - 2025-05-06 13:43:43,999 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:43:43,999 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:43:44,000 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 1238393873922}}
INFO - 2025-05-06 13:43:44,015 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u5220\u9664\u5931\u8d25\uff0c\u7528\u6237id\u4e0d\u5b58\u5728!",
  "msg_code": 9001
}

INFO - 2025-05-06 13:43:44,015 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除失败'}}]
INFO - 2025-05-06 13:43:44,015 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除失败】,实际结果【删除失败，用户id不存在!】
INFO - 2025-05-06 13:43:44,015 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:43:44,016 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:43:44,017 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:43:44,018 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-05-06 13:43:44,018 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-05-06 13:43:44,018 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:43:44,019 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效删除用户·userid为空
INFO - 2025-05-06 13:43:44,019 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:43:44,019 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:43:44,019 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 1238393873922}}
INFO - 2025-05-06 13:43:44,046 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u5220\u9664\u5931\u8d25\uff0c\u7528\u6237id\u4e0d\u5b58\u5728!",
  "msg_code": 9001
}

INFO - 2025-05-06 13:43:44,046 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除失败'}}]
INFO - 2025-05-06 13:43:44,047 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除失败】,实际结果【删除失败，用户id不存在!】
INFO - 2025-05-06 13:43:44,047 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:43:44,048 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:43:44,049 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:43:44,051 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-05-06 13:43:44,051 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-05-06 13:43:44,052 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:43:44,052 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效删除用户·缺少必填参数
INFO - 2025-05-06 13:43:44,052 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:43:44,053 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:43:44,076 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u5220\u9664\u5931\u8d25\uff0c\u7528\u6237id\u4e0d\u5b58\u5728!",
  "msg_code": 9001
}

INFO - 2025-05-06 13:43:44,077 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除失败'}}]
INFO - 2025-05-06 13:43:44,077 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除失败】,实际结果【删除失败，用户id不存在!】
INFO - 2025-05-06 13:43:44,077 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:43:44,077 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:43:44,078 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:43:44,084 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：订单支付
INFO - 2025-05-06 13:43:44,084 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/orderPay
INFO - 2025-05-06 13:43:44,084 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:43:44,084 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：订单支付
INFO - 2025-05-06 13:43:44,084 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:43:44,084 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:43:44,084 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'orderNumber': '730097466284236933014', 'userId': '9623557772977266982', 'timeStamp': '1746510224'}}
INFO - 2025-05-06 13:43:44,108 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "createTime": "2025-05-06 13:43:44",
  "error": "",
  "error_code": "0000",
  "message": "\u8ba2\u5355\u652f\u4ed8\u6210\u529f",
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:43:44,108 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'message': '订单支付成功'}}, {'contains': {'error_code': '0000'}}]
INFO - 2025-05-06 13:43:44,109 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【订单支付成功】,实际结果【订单支付成功】
INFO - 2025-05-06 13:43:44,109 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【0000】,实际结果【0000】
INFO - 2025-05-06 13:43:44,110 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:43:44,110 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:43:44,111 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:43:44,113 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：用户查询
INFO - 2025-05-06 13:43:44,114 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/queryUser
INFO - 2025-05-06 13:43:44,114 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:43:44,114 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：有效查询用户
INFO - 2025-05-06 13:43:44,114 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:43:44,114 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:43:44,114 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 123839387391912}}
INFO - 2025-05-06 13:43:44,117 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u67e5\u8be2\u6210\u529f!",
  "msg_code": 200
}

INFO - 2025-05-06 13:43:44,117 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '查询成功'}}, {'eq': {'msg_code': 200}}]
INFO - 2025-05-06 13:43:44,117 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【查询成功】,实际结果【查询成功!】
INFO - 2025-05-06 13:43:44,117 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'msg_code': 200}，等于预期结果：{'msg_code': 200}
INFO - 2025-05-06 13:43:44,117 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:43:44,117 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:43:44,118 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:43:44,120 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：商品列表
INFO - 2025-05-06 13:43:44,121 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/goodsList
INFO - 2025-05-06 13:43:44,121 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：Get
INFO - 2025-05-06 13:43:44,121 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：获取商品列表
INFO - 2025-05-06 13:43:44,121 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8', 'token': '281C2Af9BCc50156e0febDEec9b82'}
INFO - 2025-05-06 13:43:44,121 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:43:44,121 - sendrequest.py:150 -[sendrequest:run_main] - 请求参数：{'params': {'msgType': 'getHandsetListOfCust', 'page': 1, 'size': 20}}
INFO - 2025-05-06 13:43:44,123 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "api_info": "today:21 max:10000 all[90=21+33+36];expires:2030-12-31",
  "cache": 0,
  "error_code": "0000",
  "goodsList": [
    {
      "goodsId": "18382788819",
      "goods_count": "233",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/bcf848aa71c6389607ae7a84b70f1543.jpeg",
      "goods_name": "\u30102\u4ef6\u5957\u3011\u5957\u88c5\u79cb\u51ac\u65b0\u6b3e\u4eff\u736d\u5154\u6bdb\u9489\u73e0\u76ae\u8349\u6bdb\u6bdb\u77ed\u5916\u5957\u52a0\u539a\u5927\u8863\u5973\u88c5",
      "original_price": "",
      "unit_price": "\uffe599.00"
    },
    {
      "goodsId": "33809635011",
      "goods_count": "521",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/176019babfdecffa1d9f98f40b7e99b4.jpeg",
      "goods_name": "\u597d\u5947\u5c0f\u68ee\u6797\u5fc3\u94bb\u88c5\u7eb8\u5c3f\u88e4M22\u62c9\u62c9\u88e4L18/XL14\u8d85\u8584\u900f\u6c14\u88e4\u578b\u5c3f\u4e0d\u6e7f 1\u4ef6\u88c5",
      "original_price": "",
      "unit_price": "\uffe5108.00"
    },
    {
      "goodsId": "56996760797",
      "goods_count": "1181",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u51bb\u5e72\u9e21\u5c0f\u80f8\u6574\u5757\u589e\u80a5\u8425\u517b\u53d1\u816e\u72d7\u72d7\u96f6\u98df\u65b0\u624b\u517b\u732b\u96f6\u98df\u5e7c\u732b\u96f6\u98df100g",
      "original_price": "",
      "unit_price": "\uffe517.80"
    },
    {
      "goodsId": "82193785267",
      "goods_count": "3000+",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u3010\u81ea\u8425\u3011ISB\u4f0a\u73ca\u5a1c\u610f\u5927\u5229\u6c34\u679c\u7cfb\u5217\u5ba0\u7269\u72ac\u732b\u6c90\u6d74\u9732\u9664\u81ed\u9999\u6ce2\u62a4\u6bdb\u7d20",
      "original_price": "",
      "unit_price": "\uffe5650.00"
    },
    {
      "goodsId": "74190550836",
      "goods_count": "1000+",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u3010\u65b0\u54c1\u96f60CM\u5d4c\u5165\u5f0f\u3011\u6d77\u5c14\u7535\u51b0\u7bb1410L\u5bb6\u7528\u6cd5\u5f0f\u56db\u95e8\u591a\u95e8\u5b98\u65b9\u6b63\u54c1",
      "original_price": "",
      "unit_price": "\uffe55746.00"
    }
  ],
  "reason": "",
  "request_id": "request_id",
  "secache": "c98b29872e8a4b28859db207944ba817",
  "secache_date": "2025-05-06 13:36:12",
  "secache_time": 1746509772000,
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:43:44,124 - apiutil_business.py:198 -[apiutil_business:extract_data_list] - json提取到参数：{'goodsIds': ['18382788819', '33809635011', '56996760797', '82193785267', '74190550836']}
INFO - 2025-05-06 13:43:44,125 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': '0000'}}]
INFO - 2025-05-06 13:43:44,125 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【0000】,实际结果【0000】
INFO - 2025-05-06 13:43:44,125 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:43:44,125 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:43:44,126 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:43:44,127 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：商品详情
INFO - 2025-05-06 13:43:44,128 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/productDetail
INFO - 2025-05-06 13:43:44,128 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:43:44,128 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：获取商品详情
INFO - 2025-05-06 13:43:44,128 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:43:44,128 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:43:44,128 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'pro_id': '18382788819', 'page': 1, 'size': 20}}
INFO - 2025-05-06 13:43:44,131 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "api_info": "today:21 max:10000 all[90=21+33+36];expires:2030-12-31",
  "api_type": "pinduoduo",
  "cache": 0,
  "call_args": {
    "num_iid": "1620002566"
  },
  "client_ip": "106.6.39.223",
  "error": "",
  "error_code": "0000",
  "execution_time": "0.437",
  "goodsId": "33809635011",
  "item": {
    "AmountOnSale": 3188,
    "CategoryId": 8484,
    "Coupon": null,
    "Delivery": {
      "From": null,
      "Info": null,
      "MarkInfo": null,
      "Postage": "\u5feb\u9012 \u514d\u8fd0\u8d39",
      "To": null,
      "extras": null
    },
    "DescUrl": null,
    "Detail": "<img src=\"https://img.pddpic.com/mms-material-img/2022-09-18/3f89d470-1af8-4dee-b529-6d62aa2ea3b7.png\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2019-02-15/ddf6fe7b-b536-4183-932d-69a1189a3f59.png\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/20f659b04d3e7e5851c27ff9931c96fc.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2019-11-14/4420a8c3-49ed-46d8-ab55-15e7a638ca31.jpg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/26c3e9d5cfbaf4e8f13b2bdd38f48d71.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/0aa872fa74599dad7b6aefe6b6c035c0.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/6bc959e32a30424c7a5284a37676999c.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/1fa9861a8c99c5e9e8119fd2239fef5a.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/b62cabf1d2320c5761e3f4c15203fb20.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/6f6e54376a66cbc78e16700d4c424fe1.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/2f60753dfc875a6876adc35833a69d31.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/ae0116e589d8de712f8dafd0c356cefe.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/da910c98fcc8de1b4d2d1498cd7899fd.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/140349649d8b7d08c8e88bfbbaa2f900.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/a953bae2eeb7364ef3ef2976a97d07eb.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/4da59828136c3b1308aad0aa990778a7.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/4a365b61a80e47288c8609ccd5982396.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-11-17/cd0a8a96b783a51236812ce24c59a329.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-11-17/16008ac19768d05e7dee16406ff958a1.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-11-17/ef1d17b69ebf9449a8bb52459b168c26.jpeg\" style=\"width:100%;\"/>",
    "FansCount": null,
    "ImageUrls": [
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/bcf848aa71c6389607ae7a84b70f1543.jpeg",
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/176019babfdecffa1d9f98f40b7e99b4.jpeg",
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/d209ef7bcc9183c3bb8ca1dfdb108d49.jpeg",
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/74257ab65f3f00da7a90fde9042fe640.jpeg",
      "https://t00img.yangkeduo.com/goods/images/2019-08-17/e8fbd9cb-cc74-4caa-9380-84c46d27b008.jpg",
      "https://t00img.yangkeduo.com/goods/images/2019-08-17/d76f515b-e375-4060-b94e-cf64f6b0964e.jpg",
      "https://t00img.yangkeduo.com/goods/images/2019-08-17/f2f279b5-6000-4fbe-b99b-7c1cbd7884ea.jpg"
    ],
    "MainImageVideo": null,
    "OfferId": 1620002566,
    "OriginalPriceRangeInfos": [
      {
        "ConvertPrice": 0,
        "Price": 115,
        "Range": "3"
      }
    ],
    "PriceRangeInfos": [
      {
        "ConvertPrice": 0,
        "Price": 95.4,
        "Range": "3"
      }
    ],
    "ProductFeatureTuples": [
      {
        "Item1": "\u9762\u6599\u6750\u8d28",
        "Item2": "\u4eff\u76ae\u8349"
      },
      {
        "Item1": "\u6210\u5206\u542b\u91cf",
        "Item2": "71%\uff08\u542b\uff09\u201480%\uff08\u542b\uff09"
      },
      {
        "Item1": "\u7248\u578b",
        "Item2": "\u4fee\u8eab"
      },
      {
        "Item1": "\u9886\u578b",
        "Item2": "\u5706\u9886"
      },
      {
        "Item1": "\u8863\u957f",
        "Item2": "\u77ed\u6b3e"
      },
      {
        "Item1": "\u662f\u5426\u5e26\u6bdb\u9886",
        "Item2": "\u4e0d\u5e26\u6bdb\u9886"
      },
      {
        "Item1": "\u4e3b\u98ce\u683c",
        "Item2": "\u6c14\u8d28\u540d\u5a9b"
      }
    ],
    "ProductFeatures": {
      "\u4e3b\u98ce\u683c": "\u6c14\u8d28\u540d\u5a9b",
      "\u6210\u5206\u542b\u91cf": "71%\uff08\u542b\uff09\u201480%\uff08\u542b\uff09",
      "\u662f\u5426\u5e26\u6bdb\u9886": "\u4e0d\u5e26\u6bdb\u9886",
      "\u7248\u578b": "\u4fee\u8eab",
      "\u8863\u957f": "\u77ed\u6b3e",
      "\u9762\u6599\u6750\u8d28": "\u4eff\u76ae\u8349",
      "\u9886\u578b": "\u5706\u9886"
    },
    "RateCount": null,
    "RetryCount": 0,
    "SellCount": "\u5df2\u62fc4.2\u4e07\u4ef6",
    "SellerId": null,
    "SellerNick": null,
    "ShopId": "461742",
    "ShopInfo": null,
    "ShopName": "\u679c\u679c\u5bb6\u6c14\u8d28\u5973\u88c5",
    "ShopUrl": "http://yangkeduo.com/mall_page.html?mall_id=461742",
    "SkuMaps": [
      {
        "AmountOnSale": 73,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:119128",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357891",
        "SpecAttributes": {
          "\u5c3a\u7801": "S\uff0890\u65a4\u4ee5\u4e0b\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 65,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:96784",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357892",
        "SpecAttributes": {
          "\u5c3a\u7801": "M\uff0890-100\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 82,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:33651",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357893",
        "SpecAttributes": {
          "\u5c3a\u7801": "L\uff08100-110\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 89,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:33652",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357894",
        "SpecAttributes": {
          "\u5c3a\u7801": "XL\uff08110-120\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 94,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:33653",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357895",
        "SpecAttributes": {
          "\u5c3a\u7801": "2XL\uff08120-130\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 105,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:33656",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357896",
        "SpecAttributes": {
          "\u5c3a\u7801": "3XL\uff08130-140\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 1051,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:119128",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357897",
        "SpecAttributes": {
          "\u5c3a\u7801": "S\uff0890\u65a4\u4ee5\u4e0b\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 88,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:96784",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357898",
        "SpecAttributes": {
          "\u5c3a\u7801": "M\uff0890-100\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 80,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:33651",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357899",
        "SpecAttributes": {
          "\u5c3a\u7801": "L\uff08100-110\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 660,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:33652",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357900",
        "SpecAttributes": {
          "\u5c3a\u7801": "XL\uff08110-120\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 126,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:33653",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357901",
        "SpecAttributes": {
          "\u5c3a\u7801": "2XL\uff08120-130\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 89,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:33656",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357902",
        "SpecAttributes": {
          "\u5c3a\u7801": "3XL\uff08130-140\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 98,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/48b30664f0f7e526ab1b956e813f25cf.jpeg",
        "Key": "1215:105309781;1226:119128",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107855",
        "SpecAttributes": {
          "\u5c3a\u7801": "S\uff0890\u65a4\u4ee5\u4e0b\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 95,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/3660b7893ca5cda1ffcea745d10b2506.jpeg",
        "Key": "1215:105309781;1226:96784",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107856",
        "SpecAttributes": {
          "\u5c3a\u7801": "M\uff0890-100\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 97,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/a4a5a671afbb2d8e1f4c21c0ced3bea8.jpeg",
        "Key": "1215:105309781;1226:33651",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107857",
        "SpecAttributes": {
          "\u5c3a\u7801": "L\uff08100-110\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 97,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/f0551176629bf81f25757c160198dba1.jpeg",
        "Key": "1215:105309781;1226:33652",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107858",
        "SpecAttributes": {
          "\u5c3a\u7801": "XL\uff08110-120\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 99,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/801a2e23140bfe76229f02aab0a8a5fe.jpeg",
        "Key": "1215:105309781;1226:33653",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107853",
        "SpecAttributes": {
          "\u5c3a\u7801": "2XL\uff08120-130\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 100,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/2f202934f16f0eee41257b77bf489262.jpeg",
        "Key": "1215:105309781;1226:33656",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107854",
        "SpecAttributes": {
          "\u5c3a\u7801": "3XL\uff08130-140\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      }
    ],
    "SkuProps": [
      {
        "IsImg": true,
        "Prop": "\u989c\u8272",
        "Value": [
          {
            "imageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
            "name": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)",
            "value": "1215:1115500378"
          },
          {
            "imageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
            "name": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09",
            "value": "1215:1115501666"
          },
          {
            "imageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/48b30664f0f7e526ab1b956e813f25cf.jpeg",
            "name": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09",
            "value": "1215:105309781"
          }
        ]
      },
      {
        "IsImg": false,
        "Prop": "\u5c3a\u7801",
        "Value": [
          {
            "name": "S\uff0890\u65a4\u4ee5\u4e0b\uff09",
            "value": "1226:119128"
          },
          {
            "name": "M\uff0890-100\u65a4\uff09",
            "value": "1226:96784"
          },
          {
            "name": "L\uff08100-110\u65a4\uff09",
            "value": "1226:33651"
          },
          {
            "name": "XL\uff08110-120\u65a4\uff09",
            "value": "1226:33652"
          },
          {
            "name": "2XL\uff08120-130\u65a4\uff09",
            "value": "1226:33653"
          },
          {
            "name": "3XL\uff08130-140\u65a4\uff09",
            "value": "1226:33656"
          }
        ]
      }
    ],
    "SourceType": 6,
    "Subject": "\u30102\u4ef6\u5957\u3011\u5957\u88c5\u79cb\u51ac\u65b0\u6b3e\u4eff\u736d\u5154\u6bdb\u9489\u73e0\u76ae\u8349\u6bdb\u6bdb\u77ed\u5916\u5957\u52a0\u539a\u5927\u8863\u5973\u88c5",
    "Tag": null,
    "Unit": null,
    "UserId": "461742",
    "_ddf": "app",
    "format_check": "ok"
  },
  "reason": "",
  "request_id": "gw-4.63510267214bd",
  "secache": "c98b29872e8a4b28859db207944ba817",
  "secache_date": "2025-05-06 13:43:44",
  "secache_time": 1666253415,
  "server_memory": "0.84MB",
  "server_time": "Beijing/2023-10-20 16:10:15",
  "translate_engine": "baidu",
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:43:44,136 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'error_code': '0000'}}]
INFO - 2025-05-06 13:43:44,136 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'error_code': '0000'}，等于预期结果：{'error_code': '0000'}
INFO - 2025-05-06 13:43:44,136 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:43:44,137 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:43:44,137 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:43:44,139 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：提交订单
INFO - 2025-05-06 13:43:44,139 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/placeAnOrder
INFO - 2025-05-06 13:43:44,139 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:43:44,139 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：详情页面选择规格，提交订单
INFO - 2025-05-06 13:43:44,139 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:43:44,140 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:43:44,140 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'goods_id': '18382788819', 'number': 2, 'propertyChildIds': '2:9', 'inviter_id': 127839112, 'price': '128', 'freight_insurance': '0.00', 'discount_code': '002399', 'consignee_info': {'name': '张三', 'phone': 13800000000, 'address': '北京市海淀区西三环北路74号院4栋3单元1008'}}}
INFO - 2025-05-06 13:43:44,153 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "crateTime": "2025-05-06 13:43:44",
  "error": "",
  "error_code": "0000",
  "message": "\u63d0\u4ea4\u8ba2\u5355\u6210\u529f",
  "orderNumber": "350996920563052381059",
  "translate_language": "zh-CN",
  "userId": "9623557772977266982"
}

INFO - 2025-05-06 13:43:44,153 - apiutil_business.py:171 -[apiutil_business:extract_data] - json提取到参数：{'orderNumber': '350996920563052381059'}
INFO - 2025-05-06 13:43:44,154 - apiutil_business.py:171 -[apiutil_business:extract_data] - json提取到参数：{'userId': '9623557772977266982'}
INFO - 2025-05-06 13:43:44,154 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'message': '提交订单成功'}}]
INFO - 2025-05-06 13:43:44,155 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'message': '提交订单成功'}，等于预期结果：{'message': '提交订单成功'}
INFO - 2025-05-06 13:43:44,155 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:43:44,155 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:43:44,156 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:43:44,160 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：订单支付
INFO - 2025-05-06 13:43:44,160 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/orderPay
INFO - 2025-05-06 13:43:44,160 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:43:44,161 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：订单支付
INFO - 2025-05-06 13:43:44,161 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:43:44,161 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:43:44,161 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'orderNumber': '350996920563052381059', 'userId': '9623557772977266982', 'timeStamp': '1746510224'}}
INFO - 2025-05-06 13:43:44,164 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "createTime": "2025-05-06 13:43:44",
  "error": "",
  "error_code": "0000",
  "message": "\u8ba2\u5355\u652f\u4ed8\u6210\u529f",
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:43:44,164 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'message': '订单支付成功'}}]
INFO - 2025-05-06 13:43:44,164 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'message': '订单支付成功'}，等于预期结果：{'message': '订单支付成功'}
INFO - 2025-05-06 13:43:44,164 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:43:44,165 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:43:44,166 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:43:44,168 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：校验订单状态
INFO - 2025-05-06 13:43:44,168 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/checkOrderStatus
INFO - 2025-05-06 13:43:44,168 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:43:44,168 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：校验商品订单状态
INFO - 2025-05-06 13:43:44,169 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:43:44,169 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:43:44,170 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'orderNumber': '350996920563052381059', 'timeStamp': '1746510224'}}
INFO - 2025-05-06 13:43:44,172 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error": "",
  "error_code": "",
  "queryTime": "2025-05-06 13:43:44",
  "status": "0",
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:43:44,172 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'status': '0'}}]
INFO - 2025-05-06 13:43:44,172 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'status': '0'}，等于预期结果：{'status': '0'}
INFO - 2025-05-06 13:43:44,173 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:43:44,173 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:44:18,027 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：用户登录
INFO - 2025-05-06 13:44:18,028 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/login
INFO - 2025-05-06 13:44:18,028 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:44:18,028 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：用户名和密码正确登录验证
INFO - 2025-05-06 13:44:18,028 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:44:18,028 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:44:18,028 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_name': 'test01', 'passwd': 'admin123'}}
INFO - 2025-05-06 13:44:18,048 - sendrequest.py:107 -[sendrequest:send_request] - cookie：{'Cookie': {'access_token_cookie': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTc0NjUxMDI1OCwianRpIjoiMWIyMDcwOGUtNDZiYy00NTFjLWE5NDgtYWRhZTM0OTcwY2U5IiwidHlwZSI6ImFjY2VzcyIsInN1YiI6ImV4YW1wbGVfdXNlciIsIm5iZiI6MTc0NjUxMDI1OCwiY3NyZiI6ImJkNmZkNzI4LTg0OTctNGI0MC1hZDg0LTYxYmI3ODg1NmYzZiIsImV4cCI6MTc0NjUxMTE1OH0.JRLKpRbhV468JtsNp_6NZoCt4ANDEcLJtvd_z1FsmM8', 'csrf_access_token': 'bd6fd728-8497-4b40-ad84-61bb78856f3f'}}
INFO - 2025-05-06 13:44:18,049 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u767b\u5f55\u6210\u529f",
  "msg_code": 200,
  "orgId": "4140913758110176843",
  "token": "afccf00edAF8173d2E7E99408d1a2",
  "userId": "9623557772977266982"
}

INFO - 2025-05-06 13:44:18,049 - apiutil.py:154 -[apiutil:extract_data] - 提取接口的返回值：
INFO - 2025-05-06 13:44:18,050 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': 'none'}}, {'eq': {'msg': '登录成功'}}]
INFO - 2025-05-06 13:44:18,050 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【None】,实际结果【[None]】
INFO - 2025-05-06 13:44:18,050 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'msg': '登录成功'}，等于预期结果：{'msg': '登录成功'}
INFO - 2025-05-06 13:44:18,050 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:44:18,050 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
ERROR - 2025-05-06 13:44:18,052 - readyaml.py:113 -[readyaml:get_extract_yaml] - 【extract.yaml】没有找到：cookie,--'cookie'
ERROR - 2025-05-06 13:44:18,053 - readyaml.py:113 -[readyaml:get_extract_yaml] - 【extract.yaml】没有找到：cookie,--'cookie'
INFO - 2025-05-06 13:44:18,053 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：商品列表
INFO - 2025-05-06 13:44:18,053 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/goodsList
INFO - 2025-05-06 13:44:18,053 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：Get
INFO - 2025-05-06 13:44:18,053 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：获取商品列表
INFO - 2025-05-06 13:44:18,053 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8', 'token': 'None'}
INFO - 2025-05-06 13:44:18,053 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:44:18,054 - sendrequest.py:150 -[sendrequest:run_main] - 请求参数：{'params': {'msgType': 'getHandsetListOfCust', 'page': 1, 'size': 20}}
INFO - 2025-05-06 13:44:18,056 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "api_info": "today:21 max:10000 all[90=21+33+36];expires:2030-12-31",
  "cache": 0,
  "error_code": "0000",
  "goodsList": [
    {
      "goodsId": "18382788819",
      "goods_count": "233",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/bcf848aa71c6389607ae7a84b70f1543.jpeg",
      "goods_name": "\u30102\u4ef6\u5957\u3011\u5957\u88c5\u79cb\u51ac\u65b0\u6b3e\u4eff\u736d\u5154\u6bdb\u9489\u73e0\u76ae\u8349\u6bdb\u6bdb\u77ed\u5916\u5957\u52a0\u539a\u5927\u8863\u5973\u88c5",
      "original_price": "",
      "unit_price": "\uffe599.00"
    },
    {
      "goodsId": "33809635011",
      "goods_count": "521",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/176019babfdecffa1d9f98f40b7e99b4.jpeg",
      "goods_name": "\u597d\u5947\u5c0f\u68ee\u6797\u5fc3\u94bb\u88c5\u7eb8\u5c3f\u88e4M22\u62c9\u62c9\u88e4L18/XL14\u8d85\u8584\u900f\u6c14\u88e4\u578b\u5c3f\u4e0d\u6e7f 1\u4ef6\u88c5",
      "original_price": "",
      "unit_price": "\uffe5108.00"
    },
    {
      "goodsId": "56996760797",
      "goods_count": "1181",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u51bb\u5e72\u9e21\u5c0f\u80f8\u6574\u5757\u589e\u80a5\u8425\u517b\u53d1\u816e\u72d7\u72d7\u96f6\u98df\u65b0\u624b\u517b\u732b\u96f6\u98df\u5e7c\u732b\u96f6\u98df100g",
      "original_price": "",
      "unit_price": "\uffe517.80"
    },
    {
      "goodsId": "82193785267",
      "goods_count": "3000+",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u3010\u81ea\u8425\u3011ISB\u4f0a\u73ca\u5a1c\u610f\u5927\u5229\u6c34\u679c\u7cfb\u5217\u5ba0\u7269\u72ac\u732b\u6c90\u6d74\u9732\u9664\u81ed\u9999\u6ce2\u62a4\u6bdb\u7d20",
      "original_price": "",
      "unit_price": "\uffe5650.00"
    },
    {
      "goodsId": "74190550836",
      "goods_count": "1000+",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u3010\u65b0\u54c1\u96f60CM\u5d4c\u5165\u5f0f\u3011\u6d77\u5c14\u7535\u51b0\u7bb1410L\u5bb6\u7528\u6cd5\u5f0f\u56db\u95e8\u591a\u95e8\u5b98\u65b9\u6b63\u54c1",
      "original_price": "",
      "unit_price": "\uffe55746.00"
    }
  ],
  "reason": "",
  "request_id": "request_id",
  "secache": "c98b29872e8a4b28859db207944ba817",
  "secache_date": "2025-05-06 13:36:12",
  "secache_time": 1746509772000,
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:44:18,056 - apiutil.py:183 -[apiutil:extract_data_list] - json提取到参数：{'goodsId': ['18382788819', '33809635011', '56996760797', '82193785267', '74190550836']}
INFO - 2025-05-06 13:44:18,057 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': '0000'}}]
INFO - 2025-05-06 13:44:18,057 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【0000】,实际结果【0000】
INFO - 2025-05-06 13:44:18,057 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:44:18,058 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:44:18,059 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:44:18,061 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：新增用户
INFO - 2025-05-06 13:44:18,061 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/addUser
INFO - 2025-05-06 13:44:18,061 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:44:18,061 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：正常新增用户
INFO - 2025-05-06 13:44:18,061 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:44:18,061 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:44:18,062 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789890', 'role_id': 123456789, 'dates': '2023-12-31', 'phone': 13800000000, 'token': 'afccf00edAF8173d2E7E99408d1a2'}}
INFO - 2025-05-06 13:44:18,080 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：<!doctype html>
<html lang=en>
  <head>
    <title>FileNotFoundError: [Errno 2] No such file or directory: &#39;../data/mockdata/userManage.json&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "3Pv5OqYGgocJHOylQscb";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>FileNotFoundError</h1>
<div class="detail">
  <p class="errormsg">FileNotFoundError: [Errno 2] No such file or directory: &#39;../data/mockdata/userManage.json&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2183487086816">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2183487083360">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2183487086384">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2183487088400">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2183487088112">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2183487087968">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2183487081488">
  <h4>File <cite class="filename">"C:\tocode\Project\Pyproject\row_Test-Automation-Framework-main\mock_server\api_server\base\flask_service.py"</cite>,
      line <em class="line">188</em>,
      in <code class="function">add_user</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>role_id = flask.request.form.get(&#39;role_id&#39;)</pre>
<pre class="line before"><span class="ws">    </span>dates = flask.request.form.get(&#39;dates&#39;)</pre>
<pre class="line before"><span class="ws">    </span>phone = flask.request.form.get(&#39;phone&#39;)</pre>
<pre class="line before"><span class="ws">    </span>token = flask.request.form.get(&#39;token&#39;)</pre>
<pre class="line before"><span class="ws">    </span>if all([username, password, role_id, dates, phone]) and token == get_token[&#39;token&#39;]:</pre>
<pre class="line current"><span class="ws">        </span>with open(&#39;../data/mockdata/userManage.json&#39;, &#39;a&#39;, encoding=&#39;utf-8&#39;) as f:
<span class="ws">        </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>add_user_info = {</pre>
<pre class="line after"><span class="ws">                </span>&#39;id&#39;: &#39;&#39;.join([random.choice(string.digits) for i in range(11)]),</pre>
<pre class="line after"><span class="ws">                </span>&#39;username&#39;: username,</pre>
<pre class="line after"><span class="ws">                </span>&#39;password&#39;: password,</pre>
<pre class="line after"><span class="ws">                </span>&#39;role_id&#39;: role_id,</pre></div>
</div>
</ul>
  <blockquote>FileNotFoundError: [Errno 2] No such file or directory: &#39;../data/mockdata/userManage.json&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\tocode\Project\Pyproject\row_Test-Automation-Framework-main\mock_server\api_server\base\flask_service.py&#34;, line 188, in add_user
    with open(&#39;../data/mockdata/userManage.json&#39;, &#39;a&#39;, encoding=&#39;utf-8&#39;) as f:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: &#39;../data/mockdata/userManage.json&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\testProject\venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\tocode\Project\Pyproject\row_Test-Automation-Framework-main\mock_server\api_server\base\flask_service.py", line 188, in add_user
    with open('../data/mockdata/userManage.json', 'a', encoding='utf-8') as f:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: '../data/mockdata/userManage.json'


-->

INFO - 2025-05-06 13:44:18,238 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:44:18,238 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:44:18,240 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：新增用户
INFO - 2025-05-06 13:44:18,240 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/addUser
INFO - 2025-05-06 13:44:18,240 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:44:18,241 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效新增·缺少token
INFO - 2025-05-06 13:44:18,241 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:44:18,241 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:44:18,242 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789890', 'role_id': 123456789, 'dates': '2023-12-31', 'phone': 13800000000, 'token': None}}
INFO - 2025-05-06 13:44:18,264 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u65b0\u589e\u5931\u8d25",
  "msg_code": 9001
}

INFO - 2025-05-06 13:44:18,264 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'status_code': 200}}, {'contains': {'msg': '新增失败'}}]
INFO - 2025-05-06 13:44:18,264 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【新增失败】,实际结果【新增失败】
INFO - 2025-05-06 13:44:18,265 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:44:18,265 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:44:18,266 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:44:18,267 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：新增用户
INFO - 2025-05-06 13:44:18,267 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/addUser
INFO - 2025-05-06 13:44:18,267 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:44:18,267 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效新增·缺少必填参数username
INFO - 2025-05-06 13:44:18,267 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:44:18,267 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:44:18,268 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'password': 'tset6789890', 'role_id': 123456789, 'dates': '2023-12-31', 'phone': 13800000000, 'token': None}}
INFO - 2025-05-06 13:44:18,270 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u65b0\u589e\u5931\u8d25",
  "msg_code": 9001
}

INFO - 2025-05-06 13:44:18,270 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'status_code': 200}}, {'contains': {'msg': '新增失败'}}]
INFO - 2025-05-06 13:44:18,270 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【新增失败】,实际结果【新增失败】
INFO - 2025-05-06 13:44:18,270 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:44:18,271 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:44:18,271 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:44:18,272 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：新增用户
INFO - 2025-05-06 13:44:18,272 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/addUser
INFO - 2025-05-06 13:44:18,273 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:44:18,273 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效新增·缺少必填参数role_id
INFO - 2025-05-06 13:44:18,273 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:44:18,273 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:44:18,273 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789890', 'dates': '2023-12-31', 'phone': 13800000000, 'token': None}}
INFO - 2025-05-06 13:44:18,294 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u65b0\u589e\u5931\u8d25",
  "msg_code": 9001
}

INFO - 2025-05-06 13:44:18,294 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'status_code': 200}}, {'contains': {'msg': '新增失败'}}]
INFO - 2025-05-06 13:44:18,294 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【新增失败】,实际结果【新增失败】
INFO - 2025-05-06 13:44:18,295 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:44:18,295 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:44:18,296 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:44:18,298 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：商品详情
INFO - 2025-05-06 13:44:18,298 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/productDetail
INFO - 2025-05-06 13:44:18,298 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:44:18,298 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：获取商品详情
INFO - 2025-05-06 13:44:18,299 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:44:18,299 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:44:18,299 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'pro_id': '18382788819,33809635011,56996760797,82193785267,74190550836', 'page': 1, 'size': 20}}
INFO - 2025-05-06 13:44:18,325 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error": "\u4e0d\u5b58\u5728\u8be5\u5546\u54c1",
  "error_code": "4000",
  "goodsId": "",
  "item": {},
  "secache_date": "2025-05-06 13:44:18",
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:44:18,326 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': '4000'}}]
INFO - 2025-05-06 13:44:18,326 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【4000】,实际结果【4000】
INFO - 2025-05-06 13:44:18,327 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:44:18,327 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:44:18,328 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:44:18,329 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：修改用户
INFO - 2025-05-06 13:44:18,329 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/updateUser
INFO - 2025-05-06 13:44:18,330 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:44:18,330 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：正常修改用户信息
INFO - 2025-05-06 13:44:18,330 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:44:18,330 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:44:18,331 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789#$123', 'role_id': 89588181111112343, 'dates': '2023-12-31', 'phone': 13800000000}}
INFO - 2025-05-06 13:44:18,356 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u66f4\u65b0\u6210\u529f",
  "msg_code": 200
}

INFO - 2025-05-06 13:44:18,356 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'status_code': 200}}, {'contains': {'msg': '更新成功'}}]
INFO - 2025-05-06 13:44:18,356 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【更新成功】,实际结果【更新成功】
INFO - 2025-05-06 13:44:18,357 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:44:18,357 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:44:18,358 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:44:18,360 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：提交订单
INFO - 2025-05-06 13:44:18,361 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/placeAnOrder
INFO - 2025-05-06 13:44:18,361 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:44:18,361 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：提交订单
INFO - 2025-05-06 13:44:18,361 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:44:18,361 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:44:18,362 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'goods_id': '82193785267', 'number': 2, 'propertyChildIds': '2:9', 'inviter_id': '127839112', 'price': '128', 'freight_insurance': '0.0', 'discount_code': '002399', 'consignee_info': {'name': '张三', 'phone': 13800000000, 'address': '北京市海淀区西三环北路74号院4栋3单元1008'}}}
INFO - 2025-05-06 13:44:18,387 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "crateTime": "2025-05-06 13:44:18",
  "error": "",
  "error_code": "0000",
  "message": "\u63d0\u4ea4\u8ba2\u5355\u6210\u529f",
  "orderNumber": "563079753302901034384",
  "translate_language": "zh-CN",
  "userId": "9623557772977266982"
}

INFO - 2025-05-06 13:44:18,387 - apiutil.py:154 -[apiutil:extract_data] - 提取接口的返回值：
INFO - 2025-05-06 13:44:18,388 - apiutil.py:154 -[apiutil:extract_data] - 提取接口的返回值：
INFO - 2025-05-06 13:44:18,388 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'message': '提交订单成功'}}, {'eq': {'error_code': '0000'}}]
INFO - 2025-05-06 13:44:18,389 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'message': '提交订单成功'}，等于预期结果：{'message': '提交订单成功'}
INFO - 2025-05-06 13:44:18,389 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'error_code': '0000'}，等于预期结果：{'error_code': '0000'}
INFO - 2025-05-06 13:44:18,389 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:44:18,389 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:44:18,390 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:44:18,393 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-05-06 13:44:18,393 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-05-06 13:44:18,394 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:44:18,394 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：有效删除用户
INFO - 2025-05-06 13:44:18,394 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:44:18,395 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:44:18,395 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 123839387391912}}
INFO - 2025-05-06 13:44:18,417 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u5220\u9664\u6210\u529f!",
  "msg_code": 200
}

INFO - 2025-05-06 13:44:18,418 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除成功'}}]
INFO - 2025-05-06 13:44:18,418 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除成功】,实际结果【删除成功!】
INFO - 2025-05-06 13:44:18,418 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:44:18,418 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:44:18,419 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:44:18,420 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-05-06 13:44:18,420 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-05-06 13:44:18,420 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:44:18,421 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效删除用户·userid不存在
INFO - 2025-05-06 13:44:18,421 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:44:18,421 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:44:18,421 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 1238393873922}}
INFO - 2025-05-06 13:44:18,449 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u5220\u9664\u5931\u8d25\uff0c\u7528\u6237id\u4e0d\u5b58\u5728!",
  "msg_code": 9001
}

INFO - 2025-05-06 13:44:18,449 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除失败'}}]
INFO - 2025-05-06 13:44:18,449 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除失败】,实际结果【删除失败，用户id不存在!】
INFO - 2025-05-06 13:44:18,449 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:44:18,450 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:44:18,450 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:44:18,452 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-05-06 13:44:18,452 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-05-06 13:44:18,452 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:44:18,452 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效删除用户·userid为空
INFO - 2025-05-06 13:44:18,452 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:44:18,452 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:44:18,453 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 1238393873922}}
INFO - 2025-05-06 13:44:18,480 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u5220\u9664\u5931\u8d25\uff0c\u7528\u6237id\u4e0d\u5b58\u5728!",
  "msg_code": 9001
}

INFO - 2025-05-06 13:44:18,480 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除失败'}}]
INFO - 2025-05-06 13:44:18,481 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除失败】,实际结果【删除失败，用户id不存在!】
INFO - 2025-05-06 13:44:18,481 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:44:18,482 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:44:18,483 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:44:18,486 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-05-06 13:44:18,486 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-05-06 13:44:18,487 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:44:18,487 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效删除用户·缺少必填参数
INFO - 2025-05-06 13:44:18,488 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:44:18,488 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:44:18,510 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u5220\u9664\u5931\u8d25\uff0c\u7528\u6237id\u4e0d\u5b58\u5728!",
  "msg_code": 9001
}

INFO - 2025-05-06 13:44:18,511 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除失败'}}]
INFO - 2025-05-06 13:44:18,511 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除失败】,实际结果【删除失败，用户id不存在!】
INFO - 2025-05-06 13:44:18,511 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:44:18,512 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:44:18,513 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:44:18,518 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：订单支付
INFO - 2025-05-06 13:44:18,518 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/orderPay
INFO - 2025-05-06 13:44:18,518 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:44:18,518 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：订单支付
INFO - 2025-05-06 13:44:18,519 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:44:18,519 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:44:18,519 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'orderNumber': '563079753302901034384', 'userId': '9623557772977266982', 'timeStamp': '1746510258'}}
INFO - 2025-05-06 13:44:18,542 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "createTime": "2025-05-06 13:44:18",
  "error": "",
  "error_code": "0000",
  "message": "\u8ba2\u5355\u652f\u4ed8\u6210\u529f",
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:44:18,542 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'message': '订单支付成功'}}, {'contains': {'error_code': '0000'}}]
INFO - 2025-05-06 13:44:18,542 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【订单支付成功】,实际结果【订单支付成功】
INFO - 2025-05-06 13:44:18,542 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【0000】,实际结果【0000】
INFO - 2025-05-06 13:44:18,543 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:44:18,543 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:44:18,544 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:44:18,545 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：用户查询
INFO - 2025-05-06 13:44:18,546 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/queryUser
INFO - 2025-05-06 13:44:18,546 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:44:18,546 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：有效查询用户
INFO - 2025-05-06 13:44:18,546 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:44:18,546 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:44:18,547 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 123839387391912}}
INFO - 2025-05-06 13:44:18,575 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u67e5\u8be2\u6210\u529f!",
  "msg_code": 200
}

INFO - 2025-05-06 13:44:18,576 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '查询成功'}}, {'eq': {'msg_code': 200}}]
INFO - 2025-05-06 13:44:18,576 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【查询成功】,实际结果【查询成功!】
INFO - 2025-05-06 13:44:18,577 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'msg_code': 200}，等于预期结果：{'msg_code': 200}
INFO - 2025-05-06 13:44:18,578 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:44:18,579 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:44:18,581 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:44:18,586 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：商品列表
INFO - 2025-05-06 13:44:18,586 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/goodsList
INFO - 2025-05-06 13:44:18,587 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：Get
INFO - 2025-05-06 13:44:18,587 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：获取商品列表
INFO - 2025-05-06 13:44:18,587 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8', 'token': 'afccf00edAF8173d2E7E99408d1a2'}
INFO - 2025-05-06 13:44:18,588 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:44:18,588 - sendrequest.py:150 -[sendrequest:run_main] - 请求参数：{'params': {'msgType': 'getHandsetListOfCust', 'page': 1, 'size': 20}}
INFO - 2025-05-06 13:44:18,591 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "api_info": "today:21 max:10000 all[90=21+33+36];expires:2030-12-31",
  "cache": 0,
  "error_code": "0000",
  "goodsList": [
    {
      "goodsId": "18382788819",
      "goods_count": "233",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/bcf848aa71c6389607ae7a84b70f1543.jpeg",
      "goods_name": "\u30102\u4ef6\u5957\u3011\u5957\u88c5\u79cb\u51ac\u65b0\u6b3e\u4eff\u736d\u5154\u6bdb\u9489\u73e0\u76ae\u8349\u6bdb\u6bdb\u77ed\u5916\u5957\u52a0\u539a\u5927\u8863\u5973\u88c5",
      "original_price": "",
      "unit_price": "\uffe599.00"
    },
    {
      "goodsId": "33809635011",
      "goods_count": "521",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/176019babfdecffa1d9f98f40b7e99b4.jpeg",
      "goods_name": "\u597d\u5947\u5c0f\u68ee\u6797\u5fc3\u94bb\u88c5\u7eb8\u5c3f\u88e4M22\u62c9\u62c9\u88e4L18/XL14\u8d85\u8584\u900f\u6c14\u88e4\u578b\u5c3f\u4e0d\u6e7f 1\u4ef6\u88c5",
      "original_price": "",
      "unit_price": "\uffe5108.00"
    },
    {
      "goodsId": "56996760797",
      "goods_count": "1181",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u51bb\u5e72\u9e21\u5c0f\u80f8\u6574\u5757\u589e\u80a5\u8425\u517b\u53d1\u816e\u72d7\u72d7\u96f6\u98df\u65b0\u624b\u517b\u732b\u96f6\u98df\u5e7c\u732b\u96f6\u98df100g",
      "original_price": "",
      "unit_price": "\uffe517.80"
    },
    {
      "goodsId": "82193785267",
      "goods_count": "3000+",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u3010\u81ea\u8425\u3011ISB\u4f0a\u73ca\u5a1c\u610f\u5927\u5229\u6c34\u679c\u7cfb\u5217\u5ba0\u7269\u72ac\u732b\u6c90\u6d74\u9732\u9664\u81ed\u9999\u6ce2\u62a4\u6bdb\u7d20",
      "original_price": "",
      "unit_price": "\uffe5650.00"
    },
    {
      "goodsId": "74190550836",
      "goods_count": "1000+",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u3010\u65b0\u54c1\u96f60CM\u5d4c\u5165\u5f0f\u3011\u6d77\u5c14\u7535\u51b0\u7bb1410L\u5bb6\u7528\u6cd5\u5f0f\u56db\u95e8\u591a\u95e8\u5b98\u65b9\u6b63\u54c1",
      "original_price": "",
      "unit_price": "\uffe55746.00"
    }
  ],
  "reason": "",
  "request_id": "request_id",
  "secache": "c98b29872e8a4b28859db207944ba817",
  "secache_date": "2025-05-06 13:36:12",
  "secache_time": 1746509772000,
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:44:18,592 - apiutil_business.py:198 -[apiutil_business:extract_data_list] - json提取到参数：{'goodsIds': ['18382788819', '33809635011', '56996760797', '82193785267', '74190550836']}
INFO - 2025-05-06 13:44:18,593 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': '0000'}}]
INFO - 2025-05-06 13:44:18,594 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【0000】,实际结果【0000】
INFO - 2025-05-06 13:44:18,594 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:44:18,595 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:44:18,596 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:44:18,599 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：商品详情
INFO - 2025-05-06 13:44:18,599 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/productDetail
INFO - 2025-05-06 13:44:18,599 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:44:18,600 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：获取商品详情
INFO - 2025-05-06 13:44:18,600 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:44:18,600 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:44:18,601 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'pro_id': '18382788819', 'page': 1, 'size': 20}}
INFO - 2025-05-06 13:44:18,621 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "api_info": "today:21 max:10000 all[90=21+33+36];expires:2030-12-31",
  "api_type": "pinduoduo",
  "cache": 0,
  "call_args": {
    "num_iid": "1620002566"
  },
  "client_ip": "106.6.39.223",
  "error": "",
  "error_code": "0000",
  "execution_time": "0.437",
  "goodsId": "82193785267",
  "item": {
    "AmountOnSale": 3188,
    "CategoryId": 8484,
    "Coupon": null,
    "Delivery": {
      "From": null,
      "Info": null,
      "MarkInfo": null,
      "Postage": "\u5feb\u9012 \u514d\u8fd0\u8d39",
      "To": null,
      "extras": null
    },
    "DescUrl": null,
    "Detail": "<img src=\"https://img.pddpic.com/mms-material-img/2022-09-18/3f89d470-1af8-4dee-b529-6d62aa2ea3b7.png\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2019-02-15/ddf6fe7b-b536-4183-932d-69a1189a3f59.png\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/20f659b04d3e7e5851c27ff9931c96fc.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2019-11-14/4420a8c3-49ed-46d8-ab55-15e7a638ca31.jpg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/26c3e9d5cfbaf4e8f13b2bdd38f48d71.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/0aa872fa74599dad7b6aefe6b6c035c0.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/6bc959e32a30424c7a5284a37676999c.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/1fa9861a8c99c5e9e8119fd2239fef5a.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/b62cabf1d2320c5761e3f4c15203fb20.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/6f6e54376a66cbc78e16700d4c424fe1.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/2f60753dfc875a6876adc35833a69d31.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/ae0116e589d8de712f8dafd0c356cefe.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/da910c98fcc8de1b4d2d1498cd7899fd.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/140349649d8b7d08c8e88bfbbaa2f900.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/a953bae2eeb7364ef3ef2976a97d07eb.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/4da59828136c3b1308aad0aa990778a7.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/4a365b61a80e47288c8609ccd5982396.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-11-17/cd0a8a96b783a51236812ce24c59a329.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-11-17/16008ac19768d05e7dee16406ff958a1.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-11-17/ef1d17b69ebf9449a8bb52459b168c26.jpeg\" style=\"width:100%;\"/>",
    "FansCount": null,
    "ImageUrls": [
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/bcf848aa71c6389607ae7a84b70f1543.jpeg",
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/176019babfdecffa1d9f98f40b7e99b4.jpeg",
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/d209ef7bcc9183c3bb8ca1dfdb108d49.jpeg",
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/74257ab65f3f00da7a90fde9042fe640.jpeg",
      "https://t00img.yangkeduo.com/goods/images/2019-08-17/e8fbd9cb-cc74-4caa-9380-84c46d27b008.jpg",
      "https://t00img.yangkeduo.com/goods/images/2019-08-17/d76f515b-e375-4060-b94e-cf64f6b0964e.jpg",
      "https://t00img.yangkeduo.com/goods/images/2019-08-17/f2f279b5-6000-4fbe-b99b-7c1cbd7884ea.jpg"
    ],
    "MainImageVideo": null,
    "OfferId": 1620002566,
    "OriginalPriceRangeInfos": [
      {
        "ConvertPrice": 0,
        "Price": 115,
        "Range": "3"
      }
    ],
    "PriceRangeInfos": [
      {
        "ConvertPrice": 0,
        "Price": 95.4,
        "Range": "3"
      }
    ],
    "ProductFeatureTuples": [
      {
        "Item1": "\u9762\u6599\u6750\u8d28",
        "Item2": "\u4eff\u76ae\u8349"
      },
      {
        "Item1": "\u6210\u5206\u542b\u91cf",
        "Item2": "71%\uff08\u542b\uff09\u201480%\uff08\u542b\uff09"
      },
      {
        "Item1": "\u7248\u578b",
        "Item2": "\u4fee\u8eab"
      },
      {
        "Item1": "\u9886\u578b",
        "Item2": "\u5706\u9886"
      },
      {
        "Item1": "\u8863\u957f",
        "Item2": "\u77ed\u6b3e"
      },
      {
        "Item1": "\u662f\u5426\u5e26\u6bdb\u9886",
        "Item2": "\u4e0d\u5e26\u6bdb\u9886"
      },
      {
        "Item1": "\u4e3b\u98ce\u683c",
        "Item2": "\u6c14\u8d28\u540d\u5a9b"
      }
    ],
    "ProductFeatures": {
      "\u4e3b\u98ce\u683c": "\u6c14\u8d28\u540d\u5a9b",
      "\u6210\u5206\u542b\u91cf": "71%\uff08\u542b\uff09\u201480%\uff08\u542b\uff09",
      "\u662f\u5426\u5e26\u6bdb\u9886": "\u4e0d\u5e26\u6bdb\u9886",
      "\u7248\u578b": "\u4fee\u8eab",
      "\u8863\u957f": "\u77ed\u6b3e",
      "\u9762\u6599\u6750\u8d28": "\u4eff\u76ae\u8349",
      "\u9886\u578b": "\u5706\u9886"
    },
    "RateCount": null,
    "RetryCount": 0,
    "SellCount": "\u5df2\u62fc4.2\u4e07\u4ef6",
    "SellerId": null,
    "SellerNick": null,
    "ShopId": "461742",
    "ShopInfo": null,
    "ShopName": "\u679c\u679c\u5bb6\u6c14\u8d28\u5973\u88c5",
    "ShopUrl": "http://yangkeduo.com/mall_page.html?mall_id=461742",
    "SkuMaps": [
      {
        "AmountOnSale": 73,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:119128",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357891",
        "SpecAttributes": {
          "\u5c3a\u7801": "S\uff0890\u65a4\u4ee5\u4e0b\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 65,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:96784",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357892",
        "SpecAttributes": {
          "\u5c3a\u7801": "M\uff0890-100\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 82,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:33651",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357893",
        "SpecAttributes": {
          "\u5c3a\u7801": "L\uff08100-110\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 89,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:33652",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357894",
        "SpecAttributes": {
          "\u5c3a\u7801": "XL\uff08110-120\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 94,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:33653",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357895",
        "SpecAttributes": {
          "\u5c3a\u7801": "2XL\uff08120-130\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 105,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:33656",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357896",
        "SpecAttributes": {
          "\u5c3a\u7801": "3XL\uff08130-140\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 1051,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:119128",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357897",
        "SpecAttributes": {
          "\u5c3a\u7801": "S\uff0890\u65a4\u4ee5\u4e0b\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 88,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:96784",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357898",
        "SpecAttributes": {
          "\u5c3a\u7801": "M\uff0890-100\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 80,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:33651",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357899",
        "SpecAttributes": {
          "\u5c3a\u7801": "L\uff08100-110\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 660,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:33652",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357900",
        "SpecAttributes": {
          "\u5c3a\u7801": "XL\uff08110-120\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 126,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:33653",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357901",
        "SpecAttributes": {
          "\u5c3a\u7801": "2XL\uff08120-130\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 89,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:33656",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357902",
        "SpecAttributes": {
          "\u5c3a\u7801": "3XL\uff08130-140\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 98,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/48b30664f0f7e526ab1b956e813f25cf.jpeg",
        "Key": "1215:105309781;1226:119128",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107855",
        "SpecAttributes": {
          "\u5c3a\u7801": "S\uff0890\u65a4\u4ee5\u4e0b\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 95,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/3660b7893ca5cda1ffcea745d10b2506.jpeg",
        "Key": "1215:105309781;1226:96784",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107856",
        "SpecAttributes": {
          "\u5c3a\u7801": "M\uff0890-100\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 97,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/a4a5a671afbb2d8e1f4c21c0ced3bea8.jpeg",
        "Key": "1215:105309781;1226:33651",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107857",
        "SpecAttributes": {
          "\u5c3a\u7801": "L\uff08100-110\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 97,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/f0551176629bf81f25757c160198dba1.jpeg",
        "Key": "1215:105309781;1226:33652",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107858",
        "SpecAttributes": {
          "\u5c3a\u7801": "XL\uff08110-120\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 99,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/801a2e23140bfe76229f02aab0a8a5fe.jpeg",
        "Key": "1215:105309781;1226:33653",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107853",
        "SpecAttributes": {
          "\u5c3a\u7801": "2XL\uff08120-130\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 100,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/2f202934f16f0eee41257b77bf489262.jpeg",
        "Key": "1215:105309781;1226:33656",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107854",
        "SpecAttributes": {
          "\u5c3a\u7801": "3XL\uff08130-140\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      }
    ],
    "SkuProps": [
      {
        "IsImg": true,
        "Prop": "\u989c\u8272",
        "Value": [
          {
            "imageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
            "name": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)",
            "value": "1215:1115500378"
          },
          {
            "imageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
            "name": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09",
            "value": "1215:1115501666"
          },
          {
            "imageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/48b30664f0f7e526ab1b956e813f25cf.jpeg",
            "name": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09",
            "value": "1215:105309781"
          }
        ]
      },
      {
        "IsImg": false,
        "Prop": "\u5c3a\u7801",
        "Value": [
          {
            "name": "S\uff0890\u65a4\u4ee5\u4e0b\uff09",
            "value": "1226:119128"
          },
          {
            "name": "M\uff0890-100\u65a4\uff09",
            "value": "1226:96784"
          },
          {
            "name": "L\uff08100-110\u65a4\uff09",
            "value": "1226:33651"
          },
          {
            "name": "XL\uff08110-120\u65a4\uff09",
            "value": "1226:33652"
          },
          {
            "name": "2XL\uff08120-130\u65a4\uff09",
            "value": "1226:33653"
          },
          {
            "name": "3XL\uff08130-140\u65a4\uff09",
            "value": "1226:33656"
          }
        ]
      }
    ],
    "SourceType": 6,
    "Subject": "\u30102\u4ef6\u5957\u3011\u5957\u88c5\u79cb\u51ac\u65b0\u6b3e\u4eff\u736d\u5154\u6bdb\u9489\u73e0\u76ae\u8349\u6bdb\u6bdb\u77ed\u5916\u5957\u52a0\u539a\u5927\u8863\u5973\u88c5",
    "Tag": null,
    "Unit": null,
    "UserId": "461742",
    "_ddf": "app",
    "format_check": "ok"
  },
  "reason": "",
  "request_id": "gw-4.63510267214bd",
  "secache": "c98b29872e8a4b28859db207944ba817",
  "secache_date": "2025-05-06 13:44:18",
  "secache_time": 1666253415,
  "server_memory": "0.84MB",
  "server_time": "Beijing/2023-10-20 16:10:15",
  "translate_engine": "baidu",
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:44:18,627 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'error_code': '0000'}}]
INFO - 2025-05-06 13:44:18,627 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'error_code': '0000'}，等于预期结果：{'error_code': '0000'}
INFO - 2025-05-06 13:44:18,627 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:44:18,628 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:44:18,629 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:44:18,632 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：提交订单
INFO - 2025-05-06 13:44:18,632 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/placeAnOrder
INFO - 2025-05-06 13:44:18,632 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:44:18,633 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：详情页面选择规格，提交订单
INFO - 2025-05-06 13:44:18,633 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:44:18,633 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:44:18,633 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'goods_id': '18382788819', 'number': 2, 'propertyChildIds': '2:9', 'inviter_id': 127839112, 'price': '128', 'freight_insurance': '0.00', 'discount_code': '002399', 'consignee_info': {'name': '张三', 'phone': 13800000000, 'address': '北京市海淀区西三环北路74号院4栋3单元1008'}}}
INFO - 2025-05-06 13:44:18,636 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "crateTime": "2025-05-06 13:44:18",
  "error": "",
  "error_code": "0000",
  "message": "\u63d0\u4ea4\u8ba2\u5355\u6210\u529f",
  "orderNumber": "841689185678251287300",
  "translate_language": "zh-CN",
  "userId": "9623557772977266982"
}

INFO - 2025-05-06 13:44:18,636 - apiutil_business.py:171 -[apiutil_business:extract_data] - json提取到参数：{'orderNumber': '841689185678251287300'}
INFO - 2025-05-06 13:44:18,637 - apiutil_business.py:171 -[apiutil_business:extract_data] - json提取到参数：{'userId': '9623557772977266982'}
INFO - 2025-05-06 13:44:18,637 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'message': '提交订单成功'}}]
INFO - 2025-05-06 13:44:18,637 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'message': '提交订单成功'}，等于预期结果：{'message': '提交订单成功'}
INFO - 2025-05-06 13:44:18,638 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:44:18,638 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:44:18,638 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:44:18,642 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：订单支付
INFO - 2025-05-06 13:44:18,643 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/orderPay
INFO - 2025-05-06 13:44:18,643 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:44:18,643 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：订单支付
INFO - 2025-05-06 13:44:18,643 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:44:18,643 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:44:18,643 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'orderNumber': '841689185678251287300', 'userId': '9623557772977266982', 'timeStamp': '1746510258'}}
INFO - 2025-05-06 13:44:18,665 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "createTime": "2025-05-06 13:44:18",
  "error": "",
  "error_code": "0000",
  "message": "\u8ba2\u5355\u652f\u4ed8\u6210\u529f",
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:44:18,666 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'message': '订单支付成功'}}]
INFO - 2025-05-06 13:44:18,666 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'message': '订单支付成功'}，等于预期结果：{'message': '订单支付成功'}
INFO - 2025-05-06 13:44:18,667 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:44:18,668 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:44:18,669 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:44:18,675 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：校验订单状态
INFO - 2025-05-06 13:44:18,675 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/checkOrderStatus
INFO - 2025-05-06 13:44:18,675 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:44:18,676 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：校验商品订单状态
INFO - 2025-05-06 13:44:18,676 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:44:18,676 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:44:18,677 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'orderNumber': '841689185678251287300', 'timeStamp': '1746510258'}}
INFO - 2025-05-06 13:44:18,695 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error": "",
  "error_code": "",
  "queryTime": "2025-05-06 13:44:18",
  "status": "0",
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:44:18,696 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'status': '0'}}]
INFO - 2025-05-06 13:44:18,696 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'status': '0'}，等于预期结果：{'status': '0'}
INFO - 2025-05-06 13:44:18,696 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:44:18,697 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:44:44,904 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：用户登录
INFO - 2025-05-06 13:44:44,905 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/login
INFO - 2025-05-06 13:44:44,905 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:44:44,905 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：用户名和密码正确登录验证
INFO - 2025-05-06 13:44:44,905 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:44:44,906 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:44:44,906 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_name': 'test01', 'passwd': 'admin123'}}
INFO - 2025-05-06 13:44:44,932 - sendrequest.py:107 -[sendrequest:send_request] - cookie：{'Cookie': {'access_token_cookie': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTc0NjUxMDI4NCwianRpIjoiNzI0N2EwMDQtMjczOS00ZTJlLTlhMDQtODhjN2QwNWIxMjZjIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6ImV4YW1wbGVfdXNlciIsIm5iZiI6MTc0NjUxMDI4NCwiY3NyZiI6ImY1YmM4MWIwLTQyYTUtNDI5Ni04ZGVjLTFhZDA0YTNjYWIxMCIsImV4cCI6MTc0NjUxMTE4NH0.Aj5J8Mlp3W0PVa_MeX-WLCha2EP2jGsiOw8xZKBTN0Q', 'csrf_access_token': 'f5bc81b0-42a5-4296-8dec-1ad04a3cab10'}}
INFO - 2025-05-06 13:44:44,932 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u767b\u5f55\u6210\u529f",
  "msg_code": 200,
  "orgId": "4140913758110176843",
  "token": "095F46980F9f0c3cbBc8bEFdBaC12",
  "userId": "9623557772977266982"
}

INFO - 2025-05-06 13:44:44,933 - apiutil.py:154 -[apiutil:extract_data] - 提取接口的返回值：
INFO - 2025-05-06 13:44:44,933 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': 'none'}}, {'eq': {'msg': '登录成功'}}]
INFO - 2025-05-06 13:44:44,934 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【None】,实际结果【[None]】
INFO - 2025-05-06 13:44:44,934 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'msg': '登录成功'}，等于预期结果：{'msg': '登录成功'}
INFO - 2025-05-06 13:44:44,934 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:44:44,934 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
ERROR - 2025-05-06 13:44:44,936 - readyaml.py:113 -[readyaml:get_extract_yaml] - 【extract.yaml】没有找到：cookie,--'cookie'
ERROR - 2025-05-06 13:44:44,937 - readyaml.py:113 -[readyaml:get_extract_yaml] - 【extract.yaml】没有找到：cookie,--'cookie'
INFO - 2025-05-06 13:44:44,937 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：商品列表
INFO - 2025-05-06 13:44:44,937 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/goodsList
INFO - 2025-05-06 13:44:44,937 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：Get
INFO - 2025-05-06 13:44:44,937 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：获取商品列表
INFO - 2025-05-06 13:44:44,937 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8', 'token': 'None'}
INFO - 2025-05-06 13:44:44,938 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:44:44,938 - sendrequest.py:150 -[sendrequest:run_main] - 请求参数：{'params': {'msgType': 'getHandsetListOfCust', 'page': 1, 'size': 20}}
INFO - 2025-05-06 13:44:44,962 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "api_info": "today:21 max:10000 all[90=21+33+36];expires:2030-12-31",
  "cache": 0,
  "error_code": "0000",
  "goodsList": [
    {
      "goodsId": "18382788819",
      "goods_count": "233",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/bcf848aa71c6389607ae7a84b70f1543.jpeg",
      "goods_name": "\u30102\u4ef6\u5957\u3011\u5957\u88c5\u79cb\u51ac\u65b0\u6b3e\u4eff\u736d\u5154\u6bdb\u9489\u73e0\u76ae\u8349\u6bdb\u6bdb\u77ed\u5916\u5957\u52a0\u539a\u5927\u8863\u5973\u88c5",
      "original_price": "",
      "unit_price": "\uffe599.00"
    },
    {
      "goodsId": "33809635011",
      "goods_count": "521",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/176019babfdecffa1d9f98f40b7e99b4.jpeg",
      "goods_name": "\u597d\u5947\u5c0f\u68ee\u6797\u5fc3\u94bb\u88c5\u7eb8\u5c3f\u88e4M22\u62c9\u62c9\u88e4L18/XL14\u8d85\u8584\u900f\u6c14\u88e4\u578b\u5c3f\u4e0d\u6e7f 1\u4ef6\u88c5",
      "original_price": "",
      "unit_price": "\uffe5108.00"
    },
    {
      "goodsId": "56996760797",
      "goods_count": "1181",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u51bb\u5e72\u9e21\u5c0f\u80f8\u6574\u5757\u589e\u80a5\u8425\u517b\u53d1\u816e\u72d7\u72d7\u96f6\u98df\u65b0\u624b\u517b\u732b\u96f6\u98df\u5e7c\u732b\u96f6\u98df100g",
      "original_price": "",
      "unit_price": "\uffe517.80"
    },
    {
      "goodsId": "82193785267",
      "goods_count": "3000+",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u3010\u81ea\u8425\u3011ISB\u4f0a\u73ca\u5a1c\u610f\u5927\u5229\u6c34\u679c\u7cfb\u5217\u5ba0\u7269\u72ac\u732b\u6c90\u6d74\u9732\u9664\u81ed\u9999\u6ce2\u62a4\u6bdb\u7d20",
      "original_price": "",
      "unit_price": "\uffe5650.00"
    },
    {
      "goodsId": "74190550836",
      "goods_count": "1000+",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u3010\u65b0\u54c1\u96f60CM\u5d4c\u5165\u5f0f\u3011\u6d77\u5c14\u7535\u51b0\u7bb1410L\u5bb6\u7528\u6cd5\u5f0f\u56db\u95e8\u591a\u95e8\u5b98\u65b9\u6b63\u54c1",
      "original_price": "",
      "unit_price": "\uffe55746.00"
    }
  ],
  "reason": "",
  "request_id": "request_id",
  "secache": "c98b29872e8a4b28859db207944ba817",
  "secache_date": "2025-05-06 13:36:12",
  "secache_time": 1746509772000,
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:44:44,963 - apiutil.py:183 -[apiutil:extract_data_list] - json提取到参数：{'goodsId': ['18382788819', '33809635011', '56996760797', '82193785267', '74190550836']}
INFO - 2025-05-06 13:44:44,964 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': '0000'}}]
INFO - 2025-05-06 13:44:44,965 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【0000】,实际结果【0000】
INFO - 2025-05-06 13:44:44,965 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:44:44,966 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:44:44,967 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:44:44,969 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：商品详情
INFO - 2025-05-06 13:44:44,970 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/productDetail
INFO - 2025-05-06 13:44:44,970 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:44:44,970 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：获取商品详情
INFO - 2025-05-06 13:44:44,970 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:44:44,970 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:44:44,970 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'pro_id': '18382788819,33809635011,56996760797,82193785267,74190550836', 'page': 1, 'size': 20}}
INFO - 2025-05-06 13:44:44,993 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error": "\u4e0d\u5b58\u5728\u8be5\u5546\u54c1",
  "error_code": "4000",
  "goodsId": "",
  "item": {},
  "secache_date": "2025-05-06 13:44:44",
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:44:44,994 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': '4000'}}]
INFO - 2025-05-06 13:44:44,994 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【4000】,实际结果【4000】
INFO - 2025-05-06 13:44:44,994 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:44:44,995 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:44:44,996 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:44:44,998 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：修改用户
INFO - 2025-05-06 13:44:44,998 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/updateUser
INFO - 2025-05-06 13:44:44,998 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:44:44,999 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：正常修改用户信息
INFO - 2025-05-06 13:44:44,999 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:44:44,999 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:44:44,999 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789#$123', 'role_id': 89588181111112343, 'dates': '2023-12-31', 'phone': 13800000000}}
INFO - 2025-05-06 13:44:45,001 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u66f4\u65b0\u6210\u529f",
  "msg_code": 200
}

INFO - 2025-05-06 13:44:45,002 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'status_code': 200}}, {'contains': {'msg': '更新成功'}}]
INFO - 2025-05-06 13:44:45,002 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【更新成功】,实际结果【更新成功】
INFO - 2025-05-06 13:44:45,002 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:44:45,003 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:44:45,003 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:44:45,005 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：提交订单
INFO - 2025-05-06 13:44:45,005 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/placeAnOrder
INFO - 2025-05-06 13:44:45,006 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:44:45,006 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：提交订单
INFO - 2025-05-06 13:44:45,006 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:44:45,006 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:44:45,006 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'goods_id': '74190550836', 'number': 2, 'propertyChildIds': '2:9', 'inviter_id': '127839112', 'price': '128', 'freight_insurance': '0.0', 'discount_code': '002399', 'consignee_info': {'name': '张三', 'phone': 13800000000, 'address': '北京市海淀区西三环北路74号院4栋3单元1008'}}}
INFO - 2025-05-06 13:44:45,024 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "crateTime": "2025-05-06 13:44:45",
  "error": "",
  "error_code": "0000",
  "message": "\u63d0\u4ea4\u8ba2\u5355\u6210\u529f",
  "orderNumber": "147793414448122858471",
  "translate_language": "zh-CN",
  "userId": "9623557772977266982"
}

INFO - 2025-05-06 13:44:45,024 - apiutil.py:154 -[apiutil:extract_data] - 提取接口的返回值：
INFO - 2025-05-06 13:44:45,025 - apiutil.py:154 -[apiutil:extract_data] - 提取接口的返回值：
INFO - 2025-05-06 13:44:45,026 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'message': '提交订单成功'}}, {'eq': {'error_code': '0000'}}]
INFO - 2025-05-06 13:44:45,026 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'message': '提交订单成功'}，等于预期结果：{'message': '提交订单成功'}
INFO - 2025-05-06 13:44:45,027 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'error_code': '0000'}，等于预期结果：{'error_code': '0000'}
INFO - 2025-05-06 13:44:45,027 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:44:45,028 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:44:45,029 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:44:45,030 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-05-06 13:44:45,031 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-05-06 13:44:45,031 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:44:45,031 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：有效删除用户
INFO - 2025-05-06 13:44:45,031 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:44:45,031 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:44:45,032 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 123839387391912}}
INFO - 2025-05-06 13:44:45,054 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u5220\u9664\u6210\u529f!",
  "msg_code": 200
}

INFO - 2025-05-06 13:44:45,054 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除成功'}}]
INFO - 2025-05-06 13:44:45,054 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除成功】,实际结果【删除成功!】
INFO - 2025-05-06 13:44:45,055 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:44:45,055 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:44:45,056 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:44:45,057 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-05-06 13:44:45,057 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-05-06 13:44:45,057 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:44:45,057 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效删除用户·userid不存在
INFO - 2025-05-06 13:44:45,057 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:44:45,057 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:44:45,058 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 1238393873922}}
INFO - 2025-05-06 13:44:45,084 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u5220\u9664\u5931\u8d25\uff0c\u7528\u6237id\u4e0d\u5b58\u5728!",
  "msg_code": 9001
}

INFO - 2025-05-06 13:44:45,085 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除失败'}}]
INFO - 2025-05-06 13:44:45,085 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除失败】,实际结果【删除失败，用户id不存在!】
INFO - 2025-05-06 13:44:45,085 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:44:45,086 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:44:45,087 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:44:45,088 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-05-06 13:44:45,088 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-05-06 13:44:45,088 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:44:45,088 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效删除用户·userid为空
INFO - 2025-05-06 13:44:45,088 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:44:45,089 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:44:45,089 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 1238393873922}}
INFO - 2025-05-06 13:44:45,115 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u5220\u9664\u5931\u8d25\uff0c\u7528\u6237id\u4e0d\u5b58\u5728!",
  "msg_code": 9001
}

INFO - 2025-05-06 13:44:45,115 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除失败'}}]
INFO - 2025-05-06 13:44:45,115 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除失败】,实际结果【删除失败，用户id不存在!】
INFO - 2025-05-06 13:44:45,115 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:44:45,116 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:44:45,117 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:44:45,118 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-05-06 13:44:45,118 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-05-06 13:44:45,118 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:44:45,118 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效删除用户·缺少必填参数
INFO - 2025-05-06 13:44:45,118 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:44:45,118 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:44:45,147 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u5220\u9664\u5931\u8d25\uff0c\u7528\u6237id\u4e0d\u5b58\u5728!",
  "msg_code": 9001
}

INFO - 2025-05-06 13:44:45,148 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除失败'}}]
INFO - 2025-05-06 13:44:45,149 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除失败】,实际结果【删除失败，用户id不存在!】
INFO - 2025-05-06 13:44:45,149 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:44:45,149 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:44:45,150 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:44:45,154 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：订单支付
INFO - 2025-05-06 13:44:45,155 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/orderPay
INFO - 2025-05-06 13:44:45,155 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:44:45,155 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：订单支付
INFO - 2025-05-06 13:44:45,155 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:44:45,155 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:44:45,156 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'orderNumber': '147793414448122858471', 'userId': '9623557772977266982', 'timeStamp': '1746510285'}}
INFO - 2025-05-06 13:44:45,158 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "createTime": "2025-05-06 13:44:45",
  "error": "",
  "error_code": "0000",
  "message": "\u8ba2\u5355\u652f\u4ed8\u6210\u529f",
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:44:45,158 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'message': '订单支付成功'}}, {'contains': {'error_code': '0000'}}]
INFO - 2025-05-06 13:44:45,159 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【订单支付成功】,实际结果【订单支付成功】
INFO - 2025-05-06 13:44:45,160 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【0000】,实际结果【0000】
INFO - 2025-05-06 13:44:45,160 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:44:45,160 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:44:45,161 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:44:45,162 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：用户查询
INFO - 2025-05-06 13:44:45,162 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/queryUser
INFO - 2025-05-06 13:44:45,163 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:44:45,163 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：有效查询用户
INFO - 2025-05-06 13:44:45,163 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:44:45,163 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:44:45,163 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 123839387391912}}
INFO - 2025-05-06 13:44:45,177 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u67e5\u8be2\u6210\u529f!",
  "msg_code": 200
}

INFO - 2025-05-06 13:44:45,177 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '查询成功'}}, {'eq': {'msg_code': 200}}]
INFO - 2025-05-06 13:44:45,177 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【查询成功】,实际结果【查询成功!】
INFO - 2025-05-06 13:44:45,178 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'msg_code': 200}，等于预期结果：{'msg_code': 200}
INFO - 2025-05-06 13:44:45,178 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:44:45,179 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:44:45,180 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:44:45,182 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：商品列表
INFO - 2025-05-06 13:44:45,182 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/goodsList
INFO - 2025-05-06 13:44:45,183 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：Get
INFO - 2025-05-06 13:44:45,183 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：获取商品列表
INFO - 2025-05-06 13:44:45,183 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8', 'token': '095F46980F9f0c3cbBc8bEFdBaC12'}
INFO - 2025-05-06 13:44:45,183 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:44:45,184 - sendrequest.py:150 -[sendrequest:run_main] - 请求参数：{'params': {'msgType': 'getHandsetListOfCust', 'page': 1, 'size': 20}}
INFO - 2025-05-06 13:44:45,208 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "api_info": "today:21 max:10000 all[90=21+33+36];expires:2030-12-31",
  "cache": 0,
  "error_code": "0000",
  "goodsList": [
    {
      "goodsId": "18382788819",
      "goods_count": "233",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/bcf848aa71c6389607ae7a84b70f1543.jpeg",
      "goods_name": "\u30102\u4ef6\u5957\u3011\u5957\u88c5\u79cb\u51ac\u65b0\u6b3e\u4eff\u736d\u5154\u6bdb\u9489\u73e0\u76ae\u8349\u6bdb\u6bdb\u77ed\u5916\u5957\u52a0\u539a\u5927\u8863\u5973\u88c5",
      "original_price": "",
      "unit_price": "\uffe599.00"
    },
    {
      "goodsId": "33809635011",
      "goods_count": "521",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/176019babfdecffa1d9f98f40b7e99b4.jpeg",
      "goods_name": "\u597d\u5947\u5c0f\u68ee\u6797\u5fc3\u94bb\u88c5\u7eb8\u5c3f\u88e4M22\u62c9\u62c9\u88e4L18/XL14\u8d85\u8584\u900f\u6c14\u88e4\u578b\u5c3f\u4e0d\u6e7f 1\u4ef6\u88c5",
      "original_price": "",
      "unit_price": "\uffe5108.00"
    },
    {
      "goodsId": "56996760797",
      "goods_count": "1181",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u51bb\u5e72\u9e21\u5c0f\u80f8\u6574\u5757\u589e\u80a5\u8425\u517b\u53d1\u816e\u72d7\u72d7\u96f6\u98df\u65b0\u624b\u517b\u732b\u96f6\u98df\u5e7c\u732b\u96f6\u98df100g",
      "original_price": "",
      "unit_price": "\uffe517.80"
    },
    {
      "goodsId": "82193785267",
      "goods_count": "3000+",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u3010\u81ea\u8425\u3011ISB\u4f0a\u73ca\u5a1c\u610f\u5927\u5229\u6c34\u679c\u7cfb\u5217\u5ba0\u7269\u72ac\u732b\u6c90\u6d74\u9732\u9664\u81ed\u9999\u6ce2\u62a4\u6bdb\u7d20",
      "original_price": "",
      "unit_price": "\uffe5650.00"
    },
    {
      "goodsId": "74190550836",
      "goods_count": "1000+",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u3010\u65b0\u54c1\u96f60CM\u5d4c\u5165\u5f0f\u3011\u6d77\u5c14\u7535\u51b0\u7bb1410L\u5bb6\u7528\u6cd5\u5f0f\u56db\u95e8\u591a\u95e8\u5b98\u65b9\u6b63\u54c1",
      "original_price": "",
      "unit_price": "\uffe55746.00"
    }
  ],
  "reason": "",
  "request_id": "request_id",
  "secache": "c98b29872e8a4b28859db207944ba817",
  "secache_date": "2025-05-06 13:36:12",
  "secache_time": 1746509772000,
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:44:45,209 - apiutil_business.py:198 -[apiutil_business:extract_data_list] - json提取到参数：{'goodsIds': ['18382788819', '33809635011', '56996760797', '82193785267', '74190550836']}
INFO - 2025-05-06 13:44:45,209 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': '0000'}}]
INFO - 2025-05-06 13:44:45,210 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【0000】,实际结果【0000】
INFO - 2025-05-06 13:44:45,210 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:44:45,211 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:44:45,212 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:44:45,214 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：商品详情
INFO - 2025-05-06 13:44:45,214 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/productDetail
INFO - 2025-05-06 13:44:45,214 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:44:45,214 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：获取商品详情
INFO - 2025-05-06 13:44:45,215 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:44:45,215 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:44:45,215 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'pro_id': '18382788819', 'page': 1, 'size': 20}}
INFO - 2025-05-06 13:44:45,240 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "api_info": "today:21 max:10000 all[90=21+33+36];expires:2030-12-31",
  "api_type": "pinduoduo",
  "cache": 0,
  "call_args": {
    "num_iid": "1620002566"
  },
  "client_ip": "106.6.39.223",
  "error": "",
  "error_code": "0000",
  "execution_time": "0.437",
  "goodsId": "56996760797",
  "item": {
    "AmountOnSale": 3188,
    "CategoryId": 8484,
    "Coupon": null,
    "Delivery": {
      "From": null,
      "Info": null,
      "MarkInfo": null,
      "Postage": "\u5feb\u9012 \u514d\u8fd0\u8d39",
      "To": null,
      "extras": null
    },
    "DescUrl": null,
    "Detail": "<img src=\"https://img.pddpic.com/mms-material-img/2022-09-18/3f89d470-1af8-4dee-b529-6d62aa2ea3b7.png\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2019-02-15/ddf6fe7b-b536-4183-932d-69a1189a3f59.png\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/20f659b04d3e7e5851c27ff9931c96fc.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2019-11-14/4420a8c3-49ed-46d8-ab55-15e7a638ca31.jpg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/26c3e9d5cfbaf4e8f13b2bdd38f48d71.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/0aa872fa74599dad7b6aefe6b6c035c0.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/6bc959e32a30424c7a5284a37676999c.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/1fa9861a8c99c5e9e8119fd2239fef5a.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/b62cabf1d2320c5761e3f4c15203fb20.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/6f6e54376a66cbc78e16700d4c424fe1.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/2f60753dfc875a6876adc35833a69d31.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/ae0116e589d8de712f8dafd0c356cefe.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/da910c98fcc8de1b4d2d1498cd7899fd.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/140349649d8b7d08c8e88bfbbaa2f900.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/a953bae2eeb7364ef3ef2976a97d07eb.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/4da59828136c3b1308aad0aa990778a7.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/4a365b61a80e47288c8609ccd5982396.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-11-17/cd0a8a96b783a51236812ce24c59a329.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-11-17/16008ac19768d05e7dee16406ff958a1.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-11-17/ef1d17b69ebf9449a8bb52459b168c26.jpeg\" style=\"width:100%;\"/>",
    "FansCount": null,
    "ImageUrls": [
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/bcf848aa71c6389607ae7a84b70f1543.jpeg",
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/176019babfdecffa1d9f98f40b7e99b4.jpeg",
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/d209ef7bcc9183c3bb8ca1dfdb108d49.jpeg",
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/74257ab65f3f00da7a90fde9042fe640.jpeg",
      "https://t00img.yangkeduo.com/goods/images/2019-08-17/e8fbd9cb-cc74-4caa-9380-84c46d27b008.jpg",
      "https://t00img.yangkeduo.com/goods/images/2019-08-17/d76f515b-e375-4060-b94e-cf64f6b0964e.jpg",
      "https://t00img.yangkeduo.com/goods/images/2019-08-17/f2f279b5-6000-4fbe-b99b-7c1cbd7884ea.jpg"
    ],
    "MainImageVideo": null,
    "OfferId": 1620002566,
    "OriginalPriceRangeInfos": [
      {
        "ConvertPrice": 0,
        "Price": 115,
        "Range": "3"
      }
    ],
    "PriceRangeInfos": [
      {
        "ConvertPrice": 0,
        "Price": 95.4,
        "Range": "3"
      }
    ],
    "ProductFeatureTuples": [
      {
        "Item1": "\u9762\u6599\u6750\u8d28",
        "Item2": "\u4eff\u76ae\u8349"
      },
      {
        "Item1": "\u6210\u5206\u542b\u91cf",
        "Item2": "71%\uff08\u542b\uff09\u201480%\uff08\u542b\uff09"
      },
      {
        "Item1": "\u7248\u578b",
        "Item2": "\u4fee\u8eab"
      },
      {
        "Item1": "\u9886\u578b",
        "Item2": "\u5706\u9886"
      },
      {
        "Item1": "\u8863\u957f",
        "Item2": "\u77ed\u6b3e"
      },
      {
        "Item1": "\u662f\u5426\u5e26\u6bdb\u9886",
        "Item2": "\u4e0d\u5e26\u6bdb\u9886"
      },
      {
        "Item1": "\u4e3b\u98ce\u683c",
        "Item2": "\u6c14\u8d28\u540d\u5a9b"
      }
    ],
    "ProductFeatures": {
      "\u4e3b\u98ce\u683c": "\u6c14\u8d28\u540d\u5a9b",
      "\u6210\u5206\u542b\u91cf": "71%\uff08\u542b\uff09\u201480%\uff08\u542b\uff09",
      "\u662f\u5426\u5e26\u6bdb\u9886": "\u4e0d\u5e26\u6bdb\u9886",
      "\u7248\u578b": "\u4fee\u8eab",
      "\u8863\u957f": "\u77ed\u6b3e",
      "\u9762\u6599\u6750\u8d28": "\u4eff\u76ae\u8349",
      "\u9886\u578b": "\u5706\u9886"
    },
    "RateCount": null,
    "RetryCount": 0,
    "SellCount": "\u5df2\u62fc4.2\u4e07\u4ef6",
    "SellerId": null,
    "SellerNick": null,
    "ShopId": "461742",
    "ShopInfo": null,
    "ShopName": "\u679c\u679c\u5bb6\u6c14\u8d28\u5973\u88c5",
    "ShopUrl": "http://yangkeduo.com/mall_page.html?mall_id=461742",
    "SkuMaps": [
      {
        "AmountOnSale": 73,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:119128",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357891",
        "SpecAttributes": {
          "\u5c3a\u7801": "S\uff0890\u65a4\u4ee5\u4e0b\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 65,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:96784",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357892",
        "SpecAttributes": {
          "\u5c3a\u7801": "M\uff0890-100\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 82,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:33651",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357893",
        "SpecAttributes": {
          "\u5c3a\u7801": "L\uff08100-110\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 89,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:33652",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357894",
        "SpecAttributes": {
          "\u5c3a\u7801": "XL\uff08110-120\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 94,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:33653",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357895",
        "SpecAttributes": {
          "\u5c3a\u7801": "2XL\uff08120-130\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 105,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:33656",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357896",
        "SpecAttributes": {
          "\u5c3a\u7801": "3XL\uff08130-140\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 1051,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:119128",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357897",
        "SpecAttributes": {
          "\u5c3a\u7801": "S\uff0890\u65a4\u4ee5\u4e0b\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 88,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:96784",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357898",
        "SpecAttributes": {
          "\u5c3a\u7801": "M\uff0890-100\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 80,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:33651",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357899",
        "SpecAttributes": {
          "\u5c3a\u7801": "L\uff08100-110\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 660,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:33652",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357900",
        "SpecAttributes": {
          "\u5c3a\u7801": "XL\uff08110-120\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 126,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:33653",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357901",
        "SpecAttributes": {
          "\u5c3a\u7801": "2XL\uff08120-130\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 89,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:33656",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357902",
        "SpecAttributes": {
          "\u5c3a\u7801": "3XL\uff08130-140\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 98,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/48b30664f0f7e526ab1b956e813f25cf.jpeg",
        "Key": "1215:105309781;1226:119128",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107855",
        "SpecAttributes": {
          "\u5c3a\u7801": "S\uff0890\u65a4\u4ee5\u4e0b\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 95,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/3660b7893ca5cda1ffcea745d10b2506.jpeg",
        "Key": "1215:105309781;1226:96784",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107856",
        "SpecAttributes": {
          "\u5c3a\u7801": "M\uff0890-100\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 97,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/a4a5a671afbb2d8e1f4c21c0ced3bea8.jpeg",
        "Key": "1215:105309781;1226:33651",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107857",
        "SpecAttributes": {
          "\u5c3a\u7801": "L\uff08100-110\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 97,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/f0551176629bf81f25757c160198dba1.jpeg",
        "Key": "1215:105309781;1226:33652",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107858",
        "SpecAttributes": {
          "\u5c3a\u7801": "XL\uff08110-120\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 99,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/801a2e23140bfe76229f02aab0a8a5fe.jpeg",
        "Key": "1215:105309781;1226:33653",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107853",
        "SpecAttributes": {
          "\u5c3a\u7801": "2XL\uff08120-130\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 100,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/2f202934f16f0eee41257b77bf489262.jpeg",
        "Key": "1215:105309781;1226:33656",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107854",
        "SpecAttributes": {
          "\u5c3a\u7801": "3XL\uff08130-140\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      }
    ],
    "SkuProps": [
      {
        "IsImg": true,
        "Prop": "\u989c\u8272",
        "Value": [
          {
            "imageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
            "name": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)",
            "value": "1215:1115500378"
          },
          {
            "imageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
            "name": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09",
            "value": "1215:1115501666"
          },
          {
            "imageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/48b30664f0f7e526ab1b956e813f25cf.jpeg",
            "name": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09",
            "value": "1215:105309781"
          }
        ]
      },
      {
        "IsImg": false,
        "Prop": "\u5c3a\u7801",
        "Value": [
          {
            "name": "S\uff0890\u65a4\u4ee5\u4e0b\uff09",
            "value": "1226:119128"
          },
          {
            "name": "M\uff0890-100\u65a4\uff09",
            "value": "1226:96784"
          },
          {
            "name": "L\uff08100-110\u65a4\uff09",
            "value": "1226:33651"
          },
          {
            "name": "XL\uff08110-120\u65a4\uff09",
            "value": "1226:33652"
          },
          {
            "name": "2XL\uff08120-130\u65a4\uff09",
            "value": "1226:33653"
          },
          {
            "name": "3XL\uff08130-140\u65a4\uff09",
            "value": "1226:33656"
          }
        ]
      }
    ],
    "SourceType": 6,
    "Subject": "\u30102\u4ef6\u5957\u3011\u5957\u88c5\u79cb\u51ac\u65b0\u6b3e\u4eff\u736d\u5154\u6bdb\u9489\u73e0\u76ae\u8349\u6bdb\u6bdb\u77ed\u5916\u5957\u52a0\u539a\u5927\u8863\u5973\u88c5",
    "Tag": null,
    "Unit": null,
    "UserId": "461742",
    "_ddf": "app",
    "format_check": "ok"
  },
  "reason": "",
  "request_id": "gw-4.63510267214bd",
  "secache": "c98b29872e8a4b28859db207944ba817",
  "secache_date": "2025-05-06 13:44:45",
  "secache_time": 1666253415,
  "server_memory": "0.84MB",
  "server_time": "Beijing/2023-10-20 16:10:15",
  "translate_engine": "baidu",
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:44:45,243 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'error_code': '0000'}}]
INFO - 2025-05-06 13:44:45,244 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'error_code': '0000'}，等于预期结果：{'error_code': '0000'}
INFO - 2025-05-06 13:44:45,244 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:44:45,244 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:44:45,245 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:44:45,247 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：提交订单
INFO - 2025-05-06 13:44:45,247 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/placeAnOrder
INFO - 2025-05-06 13:44:45,247 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:44:45,247 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：详情页面选择规格，提交订单
INFO - 2025-05-06 13:44:45,247 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:44:45,247 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:44:45,248 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'goods_id': '18382788819', 'number': 2, 'propertyChildIds': '2:9', 'inviter_id': 127839112, 'price': '128', 'freight_insurance': '0.00', 'discount_code': '002399', 'consignee_info': {'name': '张三', 'phone': 13800000000, 'address': '北京市海淀区西三环北路74号院4栋3单元1008'}}}
INFO - 2025-05-06 13:44:45,250 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "crateTime": "2025-05-06 13:44:45",
  "error": "",
  "error_code": "0000",
  "message": "\u63d0\u4ea4\u8ba2\u5355\u6210\u529f",
  "orderNumber": "510725256272364397817",
  "translate_language": "zh-CN",
  "userId": "9623557772977266982"
}

INFO - 2025-05-06 13:44:45,250 - apiutil_business.py:171 -[apiutil_business:extract_data] - json提取到参数：{'orderNumber': '510725256272364397817'}
INFO - 2025-05-06 13:44:45,251 - apiutil_business.py:171 -[apiutil_business:extract_data] - json提取到参数：{'userId': '9623557772977266982'}
INFO - 2025-05-06 13:44:45,251 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'message': '提交订单成功'}}]
INFO - 2025-05-06 13:44:45,252 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'message': '提交订单成功'}，等于预期结果：{'message': '提交订单成功'}
INFO - 2025-05-06 13:44:45,252 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:44:45,252 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:44:45,252 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:44:45,257 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：订单支付
INFO - 2025-05-06 13:44:45,257 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/orderPay
INFO - 2025-05-06 13:44:45,257 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:44:45,257 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：订单支付
INFO - 2025-05-06 13:44:45,257 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:44:45,257 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:44:45,257 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'orderNumber': '510725256272364397817', 'userId': '9623557772977266982', 'timeStamp': '1746510285'}}
INFO - 2025-05-06 13:44:45,270 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "createTime": "2025-05-06 13:44:45",
  "error": "",
  "error_code": "0000",
  "message": "\u8ba2\u5355\u652f\u4ed8\u6210\u529f",
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:44:45,270 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'message': '订单支付成功'}}]
INFO - 2025-05-06 13:44:45,270 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'message': '订单支付成功'}，等于预期结果：{'message': '订单支付成功'}
INFO - 2025-05-06 13:44:45,271 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:44:45,272 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:44:45,272 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:44:45,277 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：校验订单状态
INFO - 2025-05-06 13:44:45,277 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/checkOrderStatus
INFO - 2025-05-06 13:44:45,277 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:44:45,277 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：校验商品订单状态
INFO - 2025-05-06 13:44:45,278 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:44:45,278 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:44:45,278 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'orderNumber': '510725256272364397817', 'timeStamp': '1746510285'}}
INFO - 2025-05-06 13:44:45,281 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error": "",
  "error_code": "",
  "queryTime": "2025-05-06 13:44:45",
  "status": "0",
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:44:45,282 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'status': '0'}}]
INFO - 2025-05-06 13:44:45,282 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'status': '0'}，等于预期结果：{'status': '0'}
INFO - 2025-05-06 13:44:45,282 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:44:45,283 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:45:01,388 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：用户登录
INFO - 2025-05-06 13:45:01,389 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/login
INFO - 2025-05-06 13:45:01,389 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:45:01,389 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：用户名和密码正确登录验证
INFO - 2025-05-06 13:45:01,389 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:45:01,390 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:45:01,390 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_name': 'test01', 'passwd': 'admin123'}}
INFO - 2025-05-06 13:45:01,404 - sendrequest.py:107 -[sendrequest:send_request] - cookie：{'Cookie': {'access_token_cookie': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTc0NjUxMDMwMSwianRpIjoiYTE3MmZmNjEtM2M4ZS00NWVmLWJjMzUtM2RjNGU5NTQwZDA5IiwidHlwZSI6ImFjY2VzcyIsInN1YiI6ImV4YW1wbGVfdXNlciIsIm5iZiI6MTc0NjUxMDMwMSwiY3NyZiI6IjhlYzkwNzU2LWIzODAtNDczMC1iMzljLTE2ODBjMzg0ZjMxOCIsImV4cCI6MTc0NjUxMTIwMX0.qh2c-T9-VonhnT-PeLH5zcLBH-ivzLUBeQjV-Nk9J-Q', 'csrf_access_token': '8ec90756-b380-4730-b39c-1680c384f318'}}
INFO - 2025-05-06 13:45:01,404 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u767b\u5f55\u6210\u529f",
  "msg_code": 200,
  "orgId": "4140913758110176843",
  "token": "d9EBE55CFcF30a4CFFb2652a2fAE5",
  "userId": "9623557772977266982"
}

INFO - 2025-05-06 13:45:01,405 - apiutil.py:154 -[apiutil:extract_data] - 提取接口的返回值：
INFO - 2025-05-06 13:45:01,405 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': 'none'}}, {'eq': {'msg': '登录成功'}}]
INFO - 2025-05-06 13:45:01,406 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【None】,实际结果【[None]】
INFO - 2025-05-06 13:45:01,406 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'msg': '登录成功'}，等于预期结果：{'msg': '登录成功'}
INFO - 2025-05-06 13:45:01,406 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:45:01,407 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
ERROR - 2025-05-06 13:45:01,409 - readyaml.py:113 -[readyaml:get_extract_yaml] - 【extract.yaml】没有找到：cookie,--'cookie'
ERROR - 2025-05-06 13:45:01,409 - readyaml.py:113 -[readyaml:get_extract_yaml] - 【extract.yaml】没有找到：cookie,--'cookie'
INFO - 2025-05-06 13:45:01,410 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：商品列表
INFO - 2025-05-06 13:45:01,410 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/goodsList
INFO - 2025-05-06 13:45:01,410 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：Get
INFO - 2025-05-06 13:45:01,410 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：获取商品列表
INFO - 2025-05-06 13:45:01,410 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8', 'token': 'None'}
INFO - 2025-05-06 13:45:01,411 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:45:01,411 - sendrequest.py:150 -[sendrequest:run_main] - 请求参数：{'params': {'msgType': 'getHandsetListOfCust', 'page': 1, 'size': 20}}
INFO - 2025-05-06 13:45:01,434 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "api_info": "today:21 max:10000 all[90=21+33+36];expires:2030-12-31",
  "cache": 0,
  "error_code": "0000",
  "goodsList": [
    {
      "goodsId": "18382788819",
      "goods_count": "233",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/bcf848aa71c6389607ae7a84b70f1543.jpeg",
      "goods_name": "\u30102\u4ef6\u5957\u3011\u5957\u88c5\u79cb\u51ac\u65b0\u6b3e\u4eff\u736d\u5154\u6bdb\u9489\u73e0\u76ae\u8349\u6bdb\u6bdb\u77ed\u5916\u5957\u52a0\u539a\u5927\u8863\u5973\u88c5",
      "original_price": "",
      "unit_price": "\uffe599.00"
    },
    {
      "goodsId": "33809635011",
      "goods_count": "521",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/176019babfdecffa1d9f98f40b7e99b4.jpeg",
      "goods_name": "\u597d\u5947\u5c0f\u68ee\u6797\u5fc3\u94bb\u88c5\u7eb8\u5c3f\u88e4M22\u62c9\u62c9\u88e4L18/XL14\u8d85\u8584\u900f\u6c14\u88e4\u578b\u5c3f\u4e0d\u6e7f 1\u4ef6\u88c5",
      "original_price": "",
      "unit_price": "\uffe5108.00"
    },
    {
      "goodsId": "56996760797",
      "goods_count": "1181",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u51bb\u5e72\u9e21\u5c0f\u80f8\u6574\u5757\u589e\u80a5\u8425\u517b\u53d1\u816e\u72d7\u72d7\u96f6\u98df\u65b0\u624b\u517b\u732b\u96f6\u98df\u5e7c\u732b\u96f6\u98df100g",
      "original_price": "",
      "unit_price": "\uffe517.80"
    },
    {
      "goodsId": "82193785267",
      "goods_count": "3000+",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u3010\u81ea\u8425\u3011ISB\u4f0a\u73ca\u5a1c\u610f\u5927\u5229\u6c34\u679c\u7cfb\u5217\u5ba0\u7269\u72ac\u732b\u6c90\u6d74\u9732\u9664\u81ed\u9999\u6ce2\u62a4\u6bdb\u7d20",
      "original_price": "",
      "unit_price": "\uffe5650.00"
    },
    {
      "goodsId": "74190550836",
      "goods_count": "1000+",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u3010\u65b0\u54c1\u96f60CM\u5d4c\u5165\u5f0f\u3011\u6d77\u5c14\u7535\u51b0\u7bb1410L\u5bb6\u7528\u6cd5\u5f0f\u56db\u95e8\u591a\u95e8\u5b98\u65b9\u6b63\u54c1",
      "original_price": "",
      "unit_price": "\uffe55746.00"
    }
  ],
  "reason": "",
  "request_id": "request_id",
  "secache": "c98b29872e8a4b28859db207944ba817",
  "secache_date": "2025-05-06 13:36:12",
  "secache_time": 1746509772000,
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:45:01,435 - apiutil.py:183 -[apiutil:extract_data_list] - json提取到参数：{'goodsId': ['18382788819', '33809635011', '56996760797', '82193785267', '74190550836']}
INFO - 2025-05-06 13:45:01,436 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': '0000'}}]
INFO - 2025-05-06 13:45:01,437 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【0000】,实际结果【0000】
INFO - 2025-05-06 13:45:01,437 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:45:01,438 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:45:01,439 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:45:01,441 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：商品详情
INFO - 2025-05-06 13:45:01,442 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/productDetail
INFO - 2025-05-06 13:45:01,442 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:45:01,442 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：获取商品详情
INFO - 2025-05-06 13:45:01,443 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:45:01,443 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:45:01,443 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'pro_id': '18382788819,33809635011,56996760797,82193785267,74190550836', 'page': 1, 'size': 20}}
INFO - 2025-05-06 13:45:01,466 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error": "\u4e0d\u5b58\u5728\u8be5\u5546\u54c1",
  "error_code": "4000",
  "goodsId": "",
  "item": {},
  "secache_date": "2025-05-06 13:45:01",
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:45:01,466 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': '4000'}}]
INFO - 2025-05-06 13:45:01,467 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【4000】,实际结果【4000】
INFO - 2025-05-06 13:45:01,467 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:45:01,467 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:45:01,468 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:45:01,470 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：修改用户
INFO - 2025-05-06 13:45:01,470 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/updateUser
INFO - 2025-05-06 13:45:01,470 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:45:01,471 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：正常修改用户信息
INFO - 2025-05-06 13:45:01,471 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:45:01,471 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:45:01,471 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789#$123', 'role_id': 89588181111112343, 'dates': '2023-12-31', 'phone': 13800000000}}
INFO - 2025-05-06 13:45:01,496 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u66f4\u65b0\u6210\u529f",
  "msg_code": 200
}

INFO - 2025-05-06 13:45:01,497 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'status_code': 200}}, {'contains': {'msg': '更新成功'}}]
INFO - 2025-05-06 13:45:01,498 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【更新成功】,实际结果【更新成功】
INFO - 2025-05-06 13:45:01,498 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:45:01,499 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:45:01,500 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:45:01,503 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：提交订单
INFO - 2025-05-06 13:45:01,504 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/placeAnOrder
INFO - 2025-05-06 13:45:01,504 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:45:01,504 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：提交订单
INFO - 2025-05-06 13:45:01,504 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:45:01,504 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:45:01,505 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'goods_id': '18382788819', 'number': 2, 'propertyChildIds': '2:9', 'inviter_id': '127839112', 'price': '128', 'freight_insurance': '0.0', 'discount_code': '002399', 'consignee_info': {'name': '张三', 'phone': 13800000000, 'address': '北京市海淀区西三环北路74号院4栋3单元1008'}}}
INFO - 2025-05-06 13:45:01,508 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "crateTime": "2025-05-06 13:45:01",
  "error": "",
  "error_code": "0000",
  "message": "\u63d0\u4ea4\u8ba2\u5355\u6210\u529f",
  "orderNumber": "033930701741900083652",
  "translate_language": "zh-CN",
  "userId": "9623557772977266982"
}

INFO - 2025-05-06 13:45:01,509 - apiutil.py:154 -[apiutil:extract_data] - 提取接口的返回值：
INFO - 2025-05-06 13:45:01,510 - apiutil.py:154 -[apiutil:extract_data] - 提取接口的返回值：
INFO - 2025-05-06 13:45:01,511 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'message': '提交订单成功'}}, {'eq': {'error_code': '0000'}}]
INFO - 2025-05-06 13:45:01,511 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'message': '提交订单成功'}，等于预期结果：{'message': '提交订单成功'}
INFO - 2025-05-06 13:45:01,511 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'error_code': '0000'}，等于预期结果：{'error_code': '0000'}
INFO - 2025-05-06 13:45:01,512 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:45:01,512 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:45:01,513 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:45:01,514 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-05-06 13:45:01,514 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-05-06 13:45:01,514 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:45:01,514 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：有效删除用户
INFO - 2025-05-06 13:45:01,514 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:45:01,515 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:45:01,515 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 123839387391912}}
INFO - 2025-05-06 13:45:01,544 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u5220\u9664\u6210\u529f!",
  "msg_code": 200
}

INFO - 2025-05-06 13:45:01,545 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除成功'}}]
INFO - 2025-05-06 13:45:01,546 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除成功】,实际结果【删除成功!】
INFO - 2025-05-06 13:45:01,546 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:45:01,548 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:45:01,550 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:45:01,552 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-05-06 13:45:01,553 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-05-06 13:45:01,553 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:45:01,554 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效删除用户·userid不存在
INFO - 2025-05-06 13:45:01,554 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:45:01,555 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:45:01,555 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 1238393873922}}
INFO - 2025-05-06 13:45:01,573 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u5220\u9664\u5931\u8d25\uff0c\u7528\u6237id\u4e0d\u5b58\u5728!",
  "msg_code": 9001
}

INFO - 2025-05-06 13:45:01,573 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除失败'}}]
INFO - 2025-05-06 13:45:01,574 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除失败】,实际结果【删除失败，用户id不存在!】
INFO - 2025-05-06 13:45:01,574 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:45:01,575 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:45:01,576 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:45:01,578 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-05-06 13:45:01,578 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-05-06 13:45:01,578 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:45:01,578 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效删除用户·userid为空
INFO - 2025-05-06 13:45:01,579 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:45:01,579 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:45:01,579 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 1238393873922}}
INFO - 2025-05-06 13:45:01,605 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u5220\u9664\u5931\u8d25\uff0c\u7528\u6237id\u4e0d\u5b58\u5728!",
  "msg_code": 9001
}

INFO - 2025-05-06 13:45:01,606 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除失败'}}]
INFO - 2025-05-06 13:45:01,607 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除失败】,实际结果【删除失败，用户id不存在!】
INFO - 2025-05-06 13:45:01,607 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:45:01,609 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:45:01,610 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:45:01,612 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-05-06 13:45:01,612 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-05-06 13:45:01,613 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:45:01,613 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效删除用户·缺少必填参数
INFO - 2025-05-06 13:45:01,613 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:45:01,613 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:45:01,635 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u5220\u9664\u5931\u8d25\uff0c\u7528\u6237id\u4e0d\u5b58\u5728!",
  "msg_code": 9001
}

INFO - 2025-05-06 13:45:01,635 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除失败'}}]
INFO - 2025-05-06 13:45:01,635 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除失败】,实际结果【删除失败，用户id不存在!】
INFO - 2025-05-06 13:45:01,635 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:45:01,636 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:45:01,637 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:45:01,641 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：订单支付
INFO - 2025-05-06 13:45:01,641 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/orderPay
INFO - 2025-05-06 13:45:01,641 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:45:01,641 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：订单支付
INFO - 2025-05-06 13:45:01,642 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:45:01,642 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:45:01,642 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'orderNumber': '033930701741900083652', 'userId': '9623557772977266982', 'timeStamp': '1746510301'}}
INFO - 2025-05-06 13:45:01,666 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "createTime": "2025-05-06 13:45:01",
  "error": "",
  "error_code": "0000",
  "message": "\u8ba2\u5355\u652f\u4ed8\u6210\u529f",
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:45:01,667 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'message': '订单支付成功'}}, {'contains': {'error_code': '0000'}}]
INFO - 2025-05-06 13:45:01,667 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【订单支付成功】,实际结果【订单支付成功】
INFO - 2025-05-06 13:45:01,668 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【0000】,实际结果【0000】
INFO - 2025-05-06 13:45:01,668 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:45:01,669 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:45:01,670 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:45:01,671 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：用户查询
INFO - 2025-05-06 13:45:01,672 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/queryUser
INFO - 2025-05-06 13:45:01,672 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-05-06 13:45:01,672 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：有效查询用户
INFO - 2025-05-06 13:45:01,673 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:45:01,673 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:45:01,673 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 123839387391912}}
INFO - 2025-05-06 13:45:01,697 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u67e5\u8be2\u6210\u529f!",
  "msg_code": 200
}

INFO - 2025-05-06 13:45:01,698 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '查询成功'}}, {'eq': {'msg_code': 200}}]
INFO - 2025-05-06 13:45:01,698 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【查询成功】,实际结果【查询成功!】
INFO - 2025-05-06 13:45:01,699 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'msg_code': 200}，等于预期结果：{'msg_code': 200}
INFO - 2025-05-06 13:45:01,699 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:45:01,700 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:45:01,701 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:45:01,704 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：商品列表
INFO - 2025-05-06 13:45:01,704 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/goodsList
INFO - 2025-05-06 13:45:01,704 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：Get
INFO - 2025-05-06 13:45:01,704 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：获取商品列表
INFO - 2025-05-06 13:45:01,704 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8', 'token': 'd9EBE55CFcF30a4CFFb2652a2fAE5'}
INFO - 2025-05-06 13:45:01,704 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:45:01,705 - sendrequest.py:150 -[sendrequest:run_main] - 请求参数：{'params': {'msgType': 'getHandsetListOfCust', 'page': 1, 'size': 20}}
INFO - 2025-05-06 13:45:01,728 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "api_info": "today:21 max:10000 all[90=21+33+36];expires:2030-12-31",
  "cache": 0,
  "error_code": "0000",
  "goodsList": [
    {
      "goodsId": "18382788819",
      "goods_count": "233",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/bcf848aa71c6389607ae7a84b70f1543.jpeg",
      "goods_name": "\u30102\u4ef6\u5957\u3011\u5957\u88c5\u79cb\u51ac\u65b0\u6b3e\u4eff\u736d\u5154\u6bdb\u9489\u73e0\u76ae\u8349\u6bdb\u6bdb\u77ed\u5916\u5957\u52a0\u539a\u5927\u8863\u5973\u88c5",
      "original_price": "",
      "unit_price": "\uffe599.00"
    },
    {
      "goodsId": "33809635011",
      "goods_count": "521",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/176019babfdecffa1d9f98f40b7e99b4.jpeg",
      "goods_name": "\u597d\u5947\u5c0f\u68ee\u6797\u5fc3\u94bb\u88c5\u7eb8\u5c3f\u88e4M22\u62c9\u62c9\u88e4L18/XL14\u8d85\u8584\u900f\u6c14\u88e4\u578b\u5c3f\u4e0d\u6e7f 1\u4ef6\u88c5",
      "original_price": "",
      "unit_price": "\uffe5108.00"
    },
    {
      "goodsId": "56996760797",
      "goods_count": "1181",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u51bb\u5e72\u9e21\u5c0f\u80f8\u6574\u5757\u589e\u80a5\u8425\u517b\u53d1\u816e\u72d7\u72d7\u96f6\u98df\u65b0\u624b\u517b\u732b\u96f6\u98df\u5e7c\u732b\u96f6\u98df100g",
      "original_price": "",
      "unit_price": "\uffe517.80"
    },
    {
      "goodsId": "82193785267",
      "goods_count": "3000+",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u3010\u81ea\u8425\u3011ISB\u4f0a\u73ca\u5a1c\u610f\u5927\u5229\u6c34\u679c\u7cfb\u5217\u5ba0\u7269\u72ac\u732b\u6c90\u6d74\u9732\u9664\u81ed\u9999\u6ce2\u62a4\u6bdb\u7d20",
      "original_price": "",
      "unit_price": "\uffe5650.00"
    },
    {
      "goodsId": "74190550836",
      "goods_count": "1000+",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u3010\u65b0\u54c1\u96f60CM\u5d4c\u5165\u5f0f\u3011\u6d77\u5c14\u7535\u51b0\u7bb1410L\u5bb6\u7528\u6cd5\u5f0f\u56db\u95e8\u591a\u95e8\u5b98\u65b9\u6b63\u54c1",
      "original_price": "",
      "unit_price": "\uffe55746.00"
    }
  ],
  "reason": "",
  "request_id": "request_id",
  "secache": "c98b29872e8a4b28859db207944ba817",
  "secache_date": "2025-05-06 13:36:12",
  "secache_time": 1746509772000,
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:45:01,730 - apiutil_business.py:198 -[apiutil_business:extract_data_list] - json提取到参数：{'goodsIds': ['18382788819', '33809635011', '56996760797', '82193785267', '74190550836']}
INFO - 2025-05-06 13:45:01,732 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': '0000'}}]
INFO - 2025-05-06 13:45:01,732 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【0000】,实际结果【0000】
INFO - 2025-05-06 13:45:01,732 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:45:01,733 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:45:01,733 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:45:01,736 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：商品详情
INFO - 2025-05-06 13:45:01,736 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/productDetail
INFO - 2025-05-06 13:45:01,736 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:45:01,736 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：获取商品详情
INFO - 2025-05-06 13:45:01,736 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:45:01,737 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:45:01,737 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'pro_id': '18382788819', 'page': 1, 'size': 20}}
INFO - 2025-05-06 13:45:01,760 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "api_info": "today:21 max:10000 all[90=21+33+36];expires:2030-12-31",
  "api_type": "pinduoduo",
  "cache": 0,
  "call_args": {
    "num_iid": "1620002566"
  },
  "client_ip": "106.6.39.223",
  "error": "",
  "error_code": "0000",
  "execution_time": "0.437",
  "goodsId": "33809635011",
  "item": {
    "AmountOnSale": 3188,
    "CategoryId": 8484,
    "Coupon": null,
    "Delivery": {
      "From": null,
      "Info": null,
      "MarkInfo": null,
      "Postage": "\u5feb\u9012 \u514d\u8fd0\u8d39",
      "To": null,
      "extras": null
    },
    "DescUrl": null,
    "Detail": "<img src=\"https://img.pddpic.com/mms-material-img/2022-09-18/3f89d470-1af8-4dee-b529-6d62aa2ea3b7.png\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2019-02-15/ddf6fe7b-b536-4183-932d-69a1189a3f59.png\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/20f659b04d3e7e5851c27ff9931c96fc.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2019-11-14/4420a8c3-49ed-46d8-ab55-15e7a638ca31.jpg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/26c3e9d5cfbaf4e8f13b2bdd38f48d71.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/0aa872fa74599dad7b6aefe6b6c035c0.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/6bc959e32a30424c7a5284a37676999c.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/1fa9861a8c99c5e9e8119fd2239fef5a.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/b62cabf1d2320c5761e3f4c15203fb20.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/6f6e54376a66cbc78e16700d4c424fe1.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/2f60753dfc875a6876adc35833a69d31.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/ae0116e589d8de712f8dafd0c356cefe.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/da910c98fcc8de1b4d2d1498cd7899fd.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/140349649d8b7d08c8e88bfbbaa2f900.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/a953bae2eeb7364ef3ef2976a97d07eb.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/4da59828136c3b1308aad0aa990778a7.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/4a365b61a80e47288c8609ccd5982396.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-11-17/cd0a8a96b783a51236812ce24c59a329.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-11-17/16008ac19768d05e7dee16406ff958a1.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-11-17/ef1d17b69ebf9449a8bb52459b168c26.jpeg\" style=\"width:100%;\"/>",
    "FansCount": null,
    "ImageUrls": [
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/bcf848aa71c6389607ae7a84b70f1543.jpeg",
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/176019babfdecffa1d9f98f40b7e99b4.jpeg",
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/d209ef7bcc9183c3bb8ca1dfdb108d49.jpeg",
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/74257ab65f3f00da7a90fde9042fe640.jpeg",
      "https://t00img.yangkeduo.com/goods/images/2019-08-17/e8fbd9cb-cc74-4caa-9380-84c46d27b008.jpg",
      "https://t00img.yangkeduo.com/goods/images/2019-08-17/d76f515b-e375-4060-b94e-cf64f6b0964e.jpg",
      "https://t00img.yangkeduo.com/goods/images/2019-08-17/f2f279b5-6000-4fbe-b99b-7c1cbd7884ea.jpg"
    ],
    "MainImageVideo": null,
    "OfferId": 1620002566,
    "OriginalPriceRangeInfos": [
      {
        "ConvertPrice": 0,
        "Price": 115,
        "Range": "3"
      }
    ],
    "PriceRangeInfos": [
      {
        "ConvertPrice": 0,
        "Price": 95.4,
        "Range": "3"
      }
    ],
    "ProductFeatureTuples": [
      {
        "Item1": "\u9762\u6599\u6750\u8d28",
        "Item2": "\u4eff\u76ae\u8349"
      },
      {
        "Item1": "\u6210\u5206\u542b\u91cf",
        "Item2": "71%\uff08\u542b\uff09\u201480%\uff08\u542b\uff09"
      },
      {
        "Item1": "\u7248\u578b",
        "Item2": "\u4fee\u8eab"
      },
      {
        "Item1": "\u9886\u578b",
        "Item2": "\u5706\u9886"
      },
      {
        "Item1": "\u8863\u957f",
        "Item2": "\u77ed\u6b3e"
      },
      {
        "Item1": "\u662f\u5426\u5e26\u6bdb\u9886",
        "Item2": "\u4e0d\u5e26\u6bdb\u9886"
      },
      {
        "Item1": "\u4e3b\u98ce\u683c",
        "Item2": "\u6c14\u8d28\u540d\u5a9b"
      }
    ],
    "ProductFeatures": {
      "\u4e3b\u98ce\u683c": "\u6c14\u8d28\u540d\u5a9b",
      "\u6210\u5206\u542b\u91cf": "71%\uff08\u542b\uff09\u201480%\uff08\u542b\uff09",
      "\u662f\u5426\u5e26\u6bdb\u9886": "\u4e0d\u5e26\u6bdb\u9886",
      "\u7248\u578b": "\u4fee\u8eab",
      "\u8863\u957f": "\u77ed\u6b3e",
      "\u9762\u6599\u6750\u8d28": "\u4eff\u76ae\u8349",
      "\u9886\u578b": "\u5706\u9886"
    },
    "RateCount": null,
    "RetryCount": 0,
    "SellCount": "\u5df2\u62fc4.2\u4e07\u4ef6",
    "SellerId": null,
    "SellerNick": null,
    "ShopId": "461742",
    "ShopInfo": null,
    "ShopName": "\u679c\u679c\u5bb6\u6c14\u8d28\u5973\u88c5",
    "ShopUrl": "http://yangkeduo.com/mall_page.html?mall_id=461742",
    "SkuMaps": [
      {
        "AmountOnSale": 73,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:119128",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357891",
        "SpecAttributes": {
          "\u5c3a\u7801": "S\uff0890\u65a4\u4ee5\u4e0b\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 65,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:96784",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357892",
        "SpecAttributes": {
          "\u5c3a\u7801": "M\uff0890-100\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 82,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:33651",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357893",
        "SpecAttributes": {
          "\u5c3a\u7801": "L\uff08100-110\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 89,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:33652",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357894",
        "SpecAttributes": {
          "\u5c3a\u7801": "XL\uff08110-120\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 94,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:33653",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357895",
        "SpecAttributes": {
          "\u5c3a\u7801": "2XL\uff08120-130\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 105,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:33656",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357896",
        "SpecAttributes": {
          "\u5c3a\u7801": "3XL\uff08130-140\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 1051,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:119128",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357897",
        "SpecAttributes": {
          "\u5c3a\u7801": "S\uff0890\u65a4\u4ee5\u4e0b\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 88,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:96784",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357898",
        "SpecAttributes": {
          "\u5c3a\u7801": "M\uff0890-100\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 80,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:33651",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357899",
        "SpecAttributes": {
          "\u5c3a\u7801": "L\uff08100-110\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 660,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:33652",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357900",
        "SpecAttributes": {
          "\u5c3a\u7801": "XL\uff08110-120\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 126,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:33653",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357901",
        "SpecAttributes": {
          "\u5c3a\u7801": "2XL\uff08120-130\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 89,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:33656",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357902",
        "SpecAttributes": {
          "\u5c3a\u7801": "3XL\uff08130-140\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 98,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/48b30664f0f7e526ab1b956e813f25cf.jpeg",
        "Key": "1215:105309781;1226:119128",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107855",
        "SpecAttributes": {
          "\u5c3a\u7801": "S\uff0890\u65a4\u4ee5\u4e0b\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 95,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/3660b7893ca5cda1ffcea745d10b2506.jpeg",
        "Key": "1215:105309781;1226:96784",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107856",
        "SpecAttributes": {
          "\u5c3a\u7801": "M\uff0890-100\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 97,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/a4a5a671afbb2d8e1f4c21c0ced3bea8.jpeg",
        "Key": "1215:105309781;1226:33651",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107857",
        "SpecAttributes": {
          "\u5c3a\u7801": "L\uff08100-110\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 97,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/f0551176629bf81f25757c160198dba1.jpeg",
        "Key": "1215:105309781;1226:33652",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107858",
        "SpecAttributes": {
          "\u5c3a\u7801": "XL\uff08110-120\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 99,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/801a2e23140bfe76229f02aab0a8a5fe.jpeg",
        "Key": "1215:105309781;1226:33653",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107853",
        "SpecAttributes": {
          "\u5c3a\u7801": "2XL\uff08120-130\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 100,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/2f202934f16f0eee41257b77bf489262.jpeg",
        "Key": "1215:105309781;1226:33656",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107854",
        "SpecAttributes": {
          "\u5c3a\u7801": "3XL\uff08130-140\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      }
    ],
    "SkuProps": [
      {
        "IsImg": true,
        "Prop": "\u989c\u8272",
        "Value": [
          {
            "imageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
            "name": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)",
            "value": "1215:1115500378"
          },
          {
            "imageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
            "name": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09",
            "value": "1215:1115501666"
          },
          {
            "imageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/48b30664f0f7e526ab1b956e813f25cf.jpeg",
            "name": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09",
            "value": "1215:105309781"
          }
        ]
      },
      {
        "IsImg": false,
        "Prop": "\u5c3a\u7801",
        "Value": [
          {
            "name": "S\uff0890\u65a4\u4ee5\u4e0b\uff09",
            "value": "1226:119128"
          },
          {
            "name": "M\uff0890-100\u65a4\uff09",
            "value": "1226:96784"
          },
          {
            "name": "L\uff08100-110\u65a4\uff09",
            "value": "1226:33651"
          },
          {
            "name": "XL\uff08110-120\u65a4\uff09",
            "value": "1226:33652"
          },
          {
            "name": "2XL\uff08120-130\u65a4\uff09",
            "value": "1226:33653"
          },
          {
            "name": "3XL\uff08130-140\u65a4\uff09",
            "value": "1226:33656"
          }
        ]
      }
    ],
    "SourceType": 6,
    "Subject": "\u30102\u4ef6\u5957\u3011\u5957\u88c5\u79cb\u51ac\u65b0\u6b3e\u4eff\u736d\u5154\u6bdb\u9489\u73e0\u76ae\u8349\u6bdb\u6bdb\u77ed\u5916\u5957\u52a0\u539a\u5927\u8863\u5973\u88c5",
    "Tag": null,
    "Unit": null,
    "UserId": "461742",
    "_ddf": "app",
    "format_check": "ok"
  },
  "reason": "",
  "request_id": "gw-4.63510267214bd",
  "secache": "c98b29872e8a4b28859db207944ba817",
  "secache_date": "2025-05-06 13:45:01",
  "secache_time": 1666253415,
  "server_memory": "0.84MB",
  "server_time": "Beijing/2023-10-20 16:10:15",
  "translate_engine": "baidu",
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:45:01,764 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'error_code': '0000'}}]
INFO - 2025-05-06 13:45:01,765 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'error_code': '0000'}，等于预期结果：{'error_code': '0000'}
INFO - 2025-05-06 13:45:01,765 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:45:01,765 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:45:01,766 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:45:01,769 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：提交订单
INFO - 2025-05-06 13:45:01,769 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/placeAnOrder
INFO - 2025-05-06 13:45:01,770 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:45:01,770 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：详情页面选择规格，提交订单
INFO - 2025-05-06 13:45:01,770 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:45:01,770 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:45:01,771 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'goods_id': '18382788819', 'number': 2, 'propertyChildIds': '2:9', 'inviter_id': 127839112, 'price': '128', 'freight_insurance': '0.00', 'discount_code': '002399', 'consignee_info': {'name': '张三', 'phone': 13800000000, 'address': '北京市海淀区西三环北路74号院4栋3单元1008'}}}
INFO - 2025-05-06 13:45:01,791 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "crateTime": "2025-05-06 13:45:01",
  "error": "",
  "error_code": "0000",
  "message": "\u63d0\u4ea4\u8ba2\u5355\u6210\u529f",
  "orderNumber": "160577801903565062764",
  "translate_language": "zh-CN",
  "userId": "9623557772977266982"
}

INFO - 2025-05-06 13:45:01,791 - apiutil_business.py:171 -[apiutil_business:extract_data] - json提取到参数：{'orderNumber': '160577801903565062764'}
INFO - 2025-05-06 13:45:01,792 - apiutil_business.py:171 -[apiutil_business:extract_data] - json提取到参数：{'userId': '9623557772977266982'}
INFO - 2025-05-06 13:45:01,793 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'message': '提交订单成功'}}]
INFO - 2025-05-06 13:45:01,793 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'message': '提交订单成功'}，等于预期结果：{'message': '提交订单成功'}
INFO - 2025-05-06 13:45:01,794 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:45:01,795 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:45:01,796 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:45:01,801 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：订单支付
INFO - 2025-05-06 13:45:01,801 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/orderPay
INFO - 2025-05-06 13:45:01,801 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:45:01,801 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：订单支付
INFO - 2025-05-06 13:45:01,801 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:45:01,801 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:45:01,802 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'orderNumber': '160577801903565062764', 'userId': '9623557772977266982', 'timeStamp': '1746510301'}}
INFO - 2025-05-06 13:45:01,819 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "createTime": "2025-05-06 13:45:01",
  "error": "",
  "error_code": "0000",
  "message": "\u8ba2\u5355\u652f\u4ed8\u6210\u529f",
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:45:01,819 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'message': '订单支付成功'}}]
INFO - 2025-05-06 13:45:01,820 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'message': '订单支付成功'}，等于预期结果：{'message': '订单支付成功'}
INFO - 2025-05-06 13:45:01,820 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:45:01,820 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:45:01,821 - conftest.py:19 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-05-06 13:45:01,823 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：校验订单状态
INFO - 2025-05-06 13:45:01,824 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/checkOrderStatus
INFO - 2025-05-06 13:45:01,824 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:45:01,824 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：校验商品订单状态
INFO - 2025-05-06 13:45:01,824 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-05-06 13:45:01,824 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:45:01,824 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'orderNumber': '160577801903565062764', 'timeStamp': '1746510301'}}
INFO - 2025-05-06 13:45:01,826 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error": "",
  "error_code": "",
  "queryTime": "2025-05-06 13:45:01",
  "status": "0",
  "translate_language": "zh-CN"
}

INFO - 2025-05-06 13:45:01,827 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'status': '0'}}]
INFO - 2025-05-06 13:45:01,827 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'status': '0'}，等于预期结果：{'status': '0'}
INFO - 2025-05-06 13:45:01,827 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:45:01,827 - conftest.py:21 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-05-06 13:52:22,279 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：用户登录
INFO - 2025-05-06 13:52:22,279 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/login
INFO - 2025-05-06 13:52:22,279 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:52:22,279 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：用户名和密码确登录验证
INFO - 2025-05-06 13:52:22,279 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:52:22,279 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:52:22,279 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_name': 'test01', 'passwd': 'admin123'}}
INFO - 2025-05-06 13:52:22,283 - sendrequest.py:107 -[sendrequest:send_request] - cookie：{'Cookie': {'access_token_cookie': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTc0NjUxMDc0MiwianRpIjoiNzA1ZTdlYWMtMjQyNi00ZTBiLWE4NzUtYjQ5ZDZmNzM5NDhmIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6ImV4YW1wbGVfdXNlciIsIm5iZiI6MTc0NjUxMDc0MiwiY3NyZiI6ImIxYjU0NGIzLWU3NzAtNDgwOS05NDJjLWE3ZTRjOWRiNzZiMyIsImV4cCI6MTc0NjUxMTY0Mn0.k3M8s2quUn9rh9YXDldJkK_mBYq62AIBATrA4UFVcgg', 'csrf_access_token': 'b1b544b3-e770-4809-942c-a7e4c9db76b3'}}
INFO - 2025-05-06 13:52:22,283 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u767b\u5f55\u6210\u529f",
  "msg_code": 200,
  "orgId": "4140913758110176843",
  "token": "f1c0DAE4d2da8be80fA3CC61B5c3f",
  "userId": "9623557772977266982"
}

ERROR - 2025-05-06 13:52:22,284 - apiutil.py:159 -[apiutil:extract_data] - 'bool' object is not subscriptable
INFO - 2025-05-06 13:52:22,284 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': 'none'}}, {'eq': {'msg': '登录成功'}}]
INFO - 2025-05-06 13:52:22,284 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【None】,实际结果【[None]】
INFO - 2025-05-06 13:52:22,284 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'msg': '登录成功'}，等于预期结果：{'msg': '登录成功'}
INFO - 2025-05-06 13:52:22,284 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:55:49,500 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：用户登录
INFO - 2025-05-06 13:55:49,500 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/login
INFO - 2025-05-06 13:55:49,500 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:55:49,500 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：用户名和密码确登录验证
INFO - 2025-05-06 13:55:49,500 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:55:49,500 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:55:49,500 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_name': 'test01', 'passwd': 'admin123'}}
INFO - 2025-05-06 13:55:49,520 - sendrequest.py:107 -[sendrequest:send_request] - cookie：{'Cookie': {'access_token_cookie': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTc0NjUxMDk0OSwianRpIjoiNDEwMDg2NmEtYTYzNC00OTVlLWI5ZTUtY2FlM2U0MGY2NzU1IiwidHlwZSI6ImFjY2VzcyIsInN1YiI6ImV4YW1wbGVfdXNlciIsIm5iZiI6MTc0NjUxMDk0OSwiY3NyZiI6ImNjMmU4OTliLWZjM2MtNGU3Ny1hZjE1LTU1NGMwY2MxNzE3OCIsImV4cCI6MTc0NjUxMTg0OX0.S4dk2oL4NBOp3D7ZIx3h9gZxNK6XS85HEG-AqWRgdK0', 'csrf_access_token': 'cc2e899b-fc3c-4e77-af15-554c0cc17178'}}
INFO - 2025-05-06 13:55:49,520 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u767b\u5f55\u6210\u529f",
  "msg_code": 200,
  "orgId": "4140913758110176843",
  "token": "Ad8Fd3cbF276DFD5E3C4BFD4B783A",
  "userId": "9623557772977266982"
}

ERROR - 2025-05-06 13:55:49,521 - apiutil.py:159 -[apiutil:extract_data] - 'bool' object is not subscriptable
INFO - 2025-05-06 13:55:49,521 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': 'none'}}, {'eq': {'msg': '登录成功'}}]
INFO - 2025-05-06 13:55:49,521 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【None】,实际结果【[None]】
INFO - 2025-05-06 13:55:49,521 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'msg': '登录成功'}，等于预期结果：{'msg': '登录成功'}
INFO - 2025-05-06 13:55:49,521 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 13:56:02,531 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：用户登录
INFO - 2025-05-06 13:56:02,531 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/login
INFO - 2025-05-06 13:56:02,532 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 13:56:02,532 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：用户名和密码确登录验证
INFO - 2025-05-06 13:56:02,532 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 13:56:02,532 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 13:56:02,532 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_name': 'test01', 'passwd': 'admin123'}}
INFO - 2025-05-06 13:56:02,555 - sendrequest.py:107 -[sendrequest:send_request] - cookie：{'Cookie': {'access_token_cookie': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTc0NjUxMDk2MiwianRpIjoiN2VkYmQ3ZmQtYjFjNS00NWI3LWI0ZWEtZDcxMDliYmJkNzE2IiwidHlwZSI6ImFjY2VzcyIsInN1YiI6ImV4YW1wbGVfdXNlciIsIm5iZiI6MTc0NjUxMDk2MiwiY3NyZiI6ImNiNmU2MjlmLTlmMDctNDdhYi05OTY4LWVkMGI1ZDE4M2MyMSIsImV4cCI6MTc0NjUxMTg2Mn0.0YpA5_WvZZMcUEOFefQ-VKFJ_T02TTOdeWdcjtOluww', 'csrf_access_token': 'cb6e629f-9f07-47ab-9968-ed0b5d183c21'}}
INFO - 2025-05-06 13:56:02,555 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u767b\u5f55\u6210\u529f",
  "msg_code": 200,
  "orgId": "6140913758128971280",
  "token": "0cBd23FaD0ca5475fe5FF3eFe3357",
  "userId": "9623557772977266982"
}

ERROR - 2025-05-06 13:56:02,555 - apiutil.py:159 -[apiutil:extract_data] - 'bool' object is not subscriptable
INFO - 2025-05-06 13:56:02,555 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': 'none'}}, {'eq': {'msg': '登录成功'}}]
INFO - 2025-05-06 13:56:02,555 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【None】,实际结果【[None]】
INFO - 2025-05-06 13:56:02,555 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'msg': '登录成功'}，等于预期结果：{'msg': '登录成功'}
INFO - 2025-05-06 13:56:02,555 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 15:47:26,750 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：用户登录
INFO - 2025-05-06 15:47:26,751 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/login
INFO - 2025-05-06 15:47:26,751 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 15:47:26,751 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：用户名和密码确登录验证
INFO - 2025-05-06 15:47:26,752 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 15:47:26,752 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 15:47:26,753 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_name': 'test01', 'passwd': 'admin123'}}
INFO - 2025-05-06 15:47:26,791 - sendrequest.py:107 -[sendrequest:send_request] - cookie：{'Cookie': {'access_token_cookie': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTc0NjUxNzY0NiwianRpIjoiY2RhZGUyNTItYzc4OC00NTFhLWE3ZjMtOTY0YmRkOTc0ODU5IiwidHlwZSI6ImFjY2VzcyIsInN1YiI6ImV4YW1wbGVfdXNlciIsIm5iZiI6MTc0NjUxNzY0NiwiY3NyZiI6IjMxYjJiYWIzLTkxOTMtNDA1Ny04NmQxLTdlM2QyNDM3Mzc0YiIsImV4cCI6MTc0NjUxODU0Nn0.jsbW6CXvEqPRb5GeRFRjBjW7PhU_BoPeMk1xEHWDu1I', 'csrf_access_token': '31b2bab3-9193-4057-86d1-7e3d2437374b'}}
INFO - 2025-05-06 15:47:26,792 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u767b\u5f55\u6210\u529f",
  "msg_code": 200,
  "orgId": "6140913758128971280",
  "token": "ca64D241FfD5BAE0d8fabE4ebBe5e",
  "userId": "9623557772977266982"
}

ERROR - 2025-05-06 15:47:26,793 - apiutil.py:163 -[apiutil:extract_data] - 'bool' object is not subscriptable
INFO - 2025-05-06 15:47:26,793 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': 'none'}}, {'eq': {'msg': '登录成功'}}]
INFO - 2025-05-06 15:47:26,793 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【None】,实际结果【[None]】
INFO - 2025-05-06 15:47:26,793 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'msg': '登录成功'}，等于预期结果：{'msg': '登录成功'}
INFO - 2025-05-06 15:47:26,793 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 15:51:02,512 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：用户登录
INFO - 2025-05-06 15:51:07,186 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/login
INFO - 2025-05-06 15:51:07,618 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 15:51:08,009 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：用户名和密码确登录验证
INFO - 2025-05-06 15:51:08,430 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 15:51:08,861 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 15:51:32,859 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_name': 'test01', 'passwd': 'admin123'}}
INFO - 2025-05-06 15:59:57,026 - sendrequest.py:107 -[sendrequest:send_request] - cookie：{'Cookie': {'access_token_cookie': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTc0NjUxODE4NCwianRpIjoiMzM2M2FjYzctYmNhNy00M2YzLWJjNzMtMmY5YjNlNjQ3YmMyIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6ImV4YW1wbGVfdXNlciIsIm5iZiI6MTc0NjUxODE4NCwiY3NyZiI6IjU1NjhhZjgxLTRmNmQtNDU4YS04ZDIxLWU0NDgzNjQyYTRlZiIsImV4cCI6MTc0NjUxOTA4NH0.ho8XtzHYrdB6zvQONoCvUmWbLuprKzjlzcSw1uYELrw', 'csrf_access_token': '5568af81-4f6d-458a-8d21-e4483642a4ef'}}
INFO - 2025-05-06 16:00:07,125 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u767b\u5f55\u6210\u529f",
  "msg_code": 200,
  "orgId": "6140913758128971280",
  "token": "d6F404Da6f291EBEb6Ef2f0C2DD59",
  "userId": "9623557772977266982"
}

ERROR - 2025-05-06 16:08:33,091 - apiutil.py:163 -[apiutil:extract_data] - 'bool' object is not subscriptable
INFO - 2025-05-06 16:08:33,092 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': 'none'}}, {'eq': {'msg': '登录成功'}}]
INFO - 2025-05-06 16:08:33,093 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【None】,实际结果【[None]】
INFO - 2025-05-06 16:08:33,093 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'msg': '登录成功'}，等于预期结果：{'msg': '登录成功'}
INFO - 2025-05-06 16:08:33,093 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 16:08:50,895 - sendrequest.py:142 -[sendrequest:run_main] - 接口名称：用户登录
INFO - 2025-05-06 16:08:50,895 - sendrequest.py:143 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/login
INFO - 2025-05-06 16:08:50,896 - sendrequest.py:144 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 16:08:50,896 - sendrequest.py:145 -[sendrequest:run_main] - 测试用例名称：用户名和密码确登录验证
INFO - 2025-05-06 16:08:50,896 - sendrequest.py:146 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 16:08:50,896 - sendrequest.py:147 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 16:08:50,896 - sendrequest.py:151 -[sendrequest:run_main] - 请求参数：{'data': {'user_name': 'test01', 'passwd': 'admin123'}}
INFO - 2025-05-06 16:08:50,921 - sendrequest.py:107 -[sendrequest:send_request] - cookie：{'Cookie': {'access_token_cookie': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTc0NjUxODkzMCwianRpIjoiZTcwNmE3MTktYzEwNi00ZjQ2LWE1ODUtYjAwMDQ0ODE1NjIzIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6ImV4YW1wbGVfdXNlciIsIm5iZiI6MTc0NjUxODkzMCwiY3NyZiI6IjVkYzM1NWFhLTlkNjMtNDlmYS1hNjVhLTg5MzU0YmMwMDkxZCIsImV4cCI6MTc0NjUxOTgzMH0.DZFz7v7wF7WpcBrrQpfpBaj009TTC6geAdMj5xmbV5c', 'csrf_access_token': '5dc355aa-9d63-49fa-a65a-89354bc0091d'}}
INFO - 2025-05-06 16:08:50,921 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u767b\u5f55\u6210\u529f",
  "msg_code": 200,
  "orgId": "4140913758110176843",
  "token": "A996374eD1Df8eFD4De1729A1FdC5",
  "userId": "9623557772977266982"
}

ERROR - 2025-05-06 16:08:50,922 - apiutil.py:163 -[apiutil:extract_data] - 'bool' object is not subscriptable
INFO - 2025-05-06 16:08:50,923 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': 'none'}}, {'eq': {'msg': '登录成功'}}]
INFO - 2025-05-06 16:08:50,923 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【None】,实际结果【[None]】
INFO - 2025-05-06 16:08:50,923 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'msg': '登录成功'}，等于预期结果：{'msg': '登录成功'}
INFO - 2025-05-06 16:08:50,923 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 16:09:02,291 - sendrequest.py:142 -[sendrequest:run_main] - 接口名称：用户登录
INFO - 2025-05-06 16:09:02,292 - sendrequest.py:143 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/login
INFO - 2025-05-06 16:09:02,292 - sendrequest.py:144 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 16:09:02,292 - sendrequest.py:145 -[sendrequest:run_main] - 测试用例名称：用户名和密码确登录验证
INFO - 2025-05-06 16:09:02,292 - sendrequest.py:146 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 16:09:02,292 - sendrequest.py:147 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 16:09:02,293 - sendrequest.py:151 -[sendrequest:run_main] - 请求参数：{'data': {'user_name': 'test01', 'passwd': 'admin123'}}
INFO - 2025-05-06 16:09:02,323 - sendrequest.py:107 -[sendrequest:send_request] - cookie：{'Cookie': {'access_token_cookie': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTc0NjUxODk0MiwianRpIjoiOGUxMGVhMmYtNDAwOC00ZWI1LWE4ZTQtNzJiZjdlMDIwYTFiIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6ImV4YW1wbGVfdXNlciIsIm5iZiI6MTc0NjUxODk0MiwiY3NyZiI6IjdiNmExNGZiLWIyZWYtNDFhNS05ZWQyLTZhYmNlNjEyNjhjNCIsImV4cCI6MTc0NjUxOTg0Mn0.YZ_sTMCW66LW-sUYMIh8pu2gX-0kFhSqxahPmwbOa4k', 'csrf_access_token': '7b6a14fb-b2ef-41a5-9ed2-6abce61268c4'}}
INFO - 2025-05-06 16:09:02,323 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u767b\u5f55\u6210\u529f",
  "msg_code": 200,
  "orgId": "6140913758128971280",
  "token": "60cdFA5aEebEc573fc5f8E2A82A5e",
  "userId": "9623557772977266982"
}

ERROR - 2025-05-06 16:09:02,326 - apiutil.py:163 -[apiutil:extract_data] - 'bool' object is not subscriptable
INFO - 2025-05-06 16:09:02,326 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': 'none'}}, {'eq': {'msg': '登录成功'}}]
INFO - 2025-05-06 16:09:02,327 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【None】,实际结果【[None]】
INFO - 2025-05-06 16:09:02,327 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'msg': '登录成功'}，等于预期结果：{'msg': '登录成功'}
INFO - 2025-05-06 16:09:02,327 - assertions.py:198 -[assertions:assert_result] - 测试成功
ERROR - 2025-05-06 16:09:33,289 - readyaml.py:28 -[readyaml:get_testcase_yaml] - [C:\tocode\Project\Pyproject\row_Test-Automation-Framework-main/LoginAPI/login.yaml]文件未找到，请检查路径是否正确
INFO - 2025-05-06 16:10:15,509 - sendrequest.py:142 -[sendrequest:run_main] - 接口名称：用户登录
INFO - 2025-05-06 16:10:15,509 - sendrequest.py:143 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/login
INFO - 2025-05-06 16:10:15,509 - sendrequest.py:144 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 16:10:15,509 - sendrequest.py:145 -[sendrequest:run_main] - 测试用例名称：用户名和密码确登录验证
INFO - 2025-05-06 16:10:15,509 - sendrequest.py:146 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 16:10:15,510 - sendrequest.py:147 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 16:10:15,510 - sendrequest.py:151 -[sendrequest:run_main] - 请求参数：{'data': {'user_name': 'test01', 'passwd': 'admin123'}}
INFO - 2025-05-06 16:10:15,546 - sendrequest.py:107 -[sendrequest:send_request] - cookie：{'Cookie': {'access_token_cookie': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTc0NjUxOTAxNSwianRpIjoiYjkwNmU1MzItZTZkZC00YjllLTg3YzMtMWIwNGEzOTBhMmU0IiwidHlwZSI6ImFjY2VzcyIsInN1YiI6ImV4YW1wbGVfdXNlciIsIm5iZiI6MTc0NjUxOTAxNSwiY3NyZiI6IjNlZjY0MjY2LWMxYWYtNGUwNi1iYTQ4LTJiNjQyMTNlMWE5NCIsImV4cCI6MTc0NjUxOTkxNX0.oAZvKUCsR6uzP1mot0ItxcZZJoz5DBw27Lou8s3G-lQ', 'csrf_access_token': '3ef64266-c1af-4e06-ba48-2b64213e1a94'}}
INFO - 2025-05-06 16:10:15,547 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u767b\u5f55\u6210\u529f",
  "msg_code": 200,
  "orgId": "4140913758110176843",
  "token": "BDbA1EB287E3F2cCDD9d3e8438FF5",
  "userId": "9623557772977266982"
}

ERROR - 2025-05-06 16:11:34,644 - apiutil.py:163 -[apiutil:extract_data] - 'bool' object is not subscriptable
INFO - 2025-05-06 16:12:10,054 - sendrequest.py:142 -[sendrequest:run_main] - 接口名称：用户登录
INFO - 2025-05-06 16:12:10,055 - sendrequest.py:143 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/login
INFO - 2025-05-06 16:12:10,055 - sendrequest.py:144 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 16:12:10,055 - sendrequest.py:145 -[sendrequest:run_main] - 测试用例名称：用户名和密码确登录验证
INFO - 2025-05-06 16:12:10,056 - sendrequest.py:146 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 16:12:10,056 - sendrequest.py:147 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 16:12:10,056 - sendrequest.py:151 -[sendrequest:run_main] - 请求参数：{'data': {'user_name': 'test01', 'passwd': 'admin123'}}
INFO - 2025-05-06 16:12:10,091 - sendrequest.py:107 -[sendrequest:send_request] - cookie：{'Cookie': {'access_token_cookie': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTc0NjUxOTEzMCwianRpIjoiMTExOTViYTQtZDA2Yi00YmQ2LWJjMTctYjJhYzFmODA2MDRhIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6ImV4YW1wbGVfdXNlciIsIm5iZiI6MTc0NjUxOTEzMCwiY3NyZiI6ImUwMzNlMWIwLTAyOGItNDA5YS05YzgyLWM4N2RlMGY5YWZjMyIsImV4cCI6MTc0NjUyMDAzMH0.z-HQrqMdmg7oeyQ9qDKrbOZcv5gqovAOjRd5GN5ZPFM', 'csrf_access_token': 'e033e1b0-028b-409a-9c82-c87de0f9afc3'}}
INFO - 2025-05-06 16:12:10,092 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u767b\u5f55\u6210\u529f",
  "msg_code": 200,
  "orgId": "4140913758110176843",
  "token": "96baCdC41fB8bD38AdA41FEaffF53",
  "userId": "9623557772977266982"
}

ERROR - 2025-05-06 16:12:25,451 - apiutil.py:163 -[apiutil:extract_data] - 'bool' object is not subscriptable
INFO - 2025-05-06 16:12:36,540 - sendrequest.py:142 -[sendrequest:run_main] - 接口名称：用户登录
INFO - 2025-05-06 16:12:36,540 - sendrequest.py:143 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/login
INFO - 2025-05-06 16:12:36,541 - sendrequest.py:144 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 16:12:36,541 - sendrequest.py:145 -[sendrequest:run_main] - 测试用例名称：用户名和密码确登录验证
INFO - 2025-05-06 16:12:36,541 - sendrequest.py:146 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 16:12:36,541 - sendrequest.py:147 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 16:12:36,541 - sendrequest.py:151 -[sendrequest:run_main] - 请求参数：{'data': {'user_name': 'test01', 'passwd': 'admin123'}}
INFO - 2025-05-06 16:12:36,582 - sendrequest.py:107 -[sendrequest:send_request] - cookie：{'Cookie': {'access_token_cookie': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTc0NjUxOTE1NiwianRpIjoiZDcyMjhiMWUtOThjZi00MjQxLWExZjgtMjMyZGI0NzVkMDkxIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6ImV4YW1wbGVfdXNlciIsIm5iZiI6MTc0NjUxOTE1NiwiY3NyZiI6ImVhZTI1M2ZmLWM1YjQtNDc0YS05OWE5LTBkOTA2NDljM2NkMiIsImV4cCI6MTc0NjUyMDA1Nn0.eYlPtf4S__Hneb4ZpzSS8oWFSkiIdIccsNBw4RuGnp8', 'csrf_access_token': 'eae253ff-c5b4-474a-99a9-0d90649c3cd2'}}
INFO - 2025-05-06 16:12:36,583 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u767b\u5f55\u6210\u529f",
  "msg_code": 200,
  "orgId": "6140913758128971280",
  "token": "3Ac70BC4e2Ddd5CdaC2F78756CfEb",
  "userId": "9623557772977266982"
}

ERROR - 2025-05-06 16:14:18,517 - apiutil.py:163 -[apiutil:extract_data] - 'bool' object is not subscriptable
INFO - 2025-05-06 16:15:20,863 - sendrequest.py:142 -[sendrequest:run_main] - 接口名称：用户登录
INFO - 2025-05-06 16:15:20,863 - sendrequest.py:143 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/login
INFO - 2025-05-06 16:15:20,863 - sendrequest.py:144 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 16:15:20,863 - sendrequest.py:145 -[sendrequest:run_main] - 测试用例名称：用户名和密码确登录验证
INFO - 2025-05-06 16:15:20,863 - sendrequest.py:146 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 16:15:20,863 - sendrequest.py:147 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 16:15:20,863 - sendrequest.py:151 -[sendrequest:run_main] - 请求参数：{'data': {'user_name': 'test01', 'passwd': 'admin123'}}
INFO - 2025-05-06 16:15:20,884 - sendrequest.py:107 -[sendrequest:send_request] - cookie：{'Cookie': {'access_token_cookie': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTc0NjUxOTMyMCwianRpIjoiMjM0NDI2MjMtMGM2ZS00NDRjLTg4YWQtODBjZGE5ZjQ3MWI5IiwidHlwZSI6ImFjY2VzcyIsInN1YiI6ImV4YW1wbGVfdXNlciIsIm5iZiI6MTc0NjUxOTMyMCwiY3NyZiI6Ijg0NDdiMzRlLTAyOWQtNDI2Mi05NDg5LWRjMzhlZTkxM2U0NSIsImV4cCI6MTc0NjUyMDIyMH0.2Im-Gz-aXWBFxnCX_RIlcYlWBIktT6ACxPy_vSSVZp8', 'csrf_access_token': '8447b34e-029d-4262-9489-dc38ee913e45'}}
INFO - 2025-05-06 16:15:20,884 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u767b\u5f55\u6210\u529f",
  "msg_code": 200,
  "orgId": "4140913758110176843",
  "token": "06cc602D51a0BBCB2Ac6C2FcE3115",
  "userId": "9623557772977266982"
}

INFO - 2025-05-06 16:16:06,170 - sendrequest.py:142 -[sendrequest:run_main] - 接口名称：用户登录
INFO - 2025-05-06 16:16:06,170 - sendrequest.py:143 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/login
INFO - 2025-05-06 16:16:06,171 - sendrequest.py:144 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 16:16:06,171 - sendrequest.py:145 -[sendrequest:run_main] - 测试用例名称：用户名和密码确登录验证
INFO - 2025-05-06 16:16:06,171 - sendrequest.py:146 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 16:16:06,171 - sendrequest.py:147 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 16:16:06,171 - sendrequest.py:151 -[sendrequest:run_main] - 请求参数：{'data': {'user_name': 'test01', 'passwd': 'admin123'}}
INFO - 2025-05-06 16:16:06,198 - sendrequest.py:107 -[sendrequest:send_request] - cookie：{'Cookie': {'access_token_cookie': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTc0NjUxOTM2NiwianRpIjoiYWVkNzk5NWEtMWI5OC00YmNkLTk2ZWMtNjc1ZWIxZDNkNzA2IiwidHlwZSI6ImFjY2VzcyIsInN1YiI6ImV4YW1wbGVfdXNlciIsIm5iZiI6MTc0NjUxOTM2NiwiY3NyZiI6ImMxNDAyOTBiLWM2MDUtNDMxMS05ZGExLTRjZmE4Mjk4OWFiOCIsImV4cCI6MTc0NjUyMDI2Nn0._BldNiIy12QCf-GlWu8HImyNiA4393tFmL_vJG-qOBk', 'csrf_access_token': 'c140290b-c605-4311-9da1-4cfa82989ab8'}}
INFO - 2025-05-06 16:16:06,198 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u767b\u5f55\u6210\u529f",
  "msg_code": 200,
  "orgId": "6140913758128971280",
  "token": "325De6C8d0B4fe2cF8Abcceede16a",
  "userId": "9623557772977266982"
}

ERROR - 2025-05-06 16:20:04,198 - readyaml.py:28 -[readyaml:get_testcase_yaml] - [./data/loginName.yaml]文件未找到，请检查路径是否正确
ERROR - 2025-05-06 16:21:29,789 - readyaml.py:28 -[readyaml:get_testcase_yaml] - [./data/loginName.yaml]文件未找到，请检查路径是否正确
INFO - 2025-05-06 16:26:30,864 - sendrequest.py:142 -[sendrequest:run_main] - 接口名称：用户登录
INFO - 2025-05-06 16:26:30,864 - sendrequest.py:143 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/login
INFO - 2025-05-06 16:26:30,864 - sendrequest.py:144 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 16:26:30,864 - sendrequest.py:145 -[sendrequest:run_main] - 测试用例名称：用户名和密码正确登录验证
INFO - 2025-05-06 16:26:30,865 - sendrequest.py:146 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 16:26:30,865 - sendrequest.py:147 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 16:26:30,865 - sendrequest.py:151 -[sendrequest:run_main] - 请求参数：{'data': {'user_name': 'test01', 'passwd': 'admin123'}}
INFO - 2025-05-06 16:26:30,887 - sendrequest.py:107 -[sendrequest:send_request] - cookie：{'Cookie': {'access_token_cookie': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTc0NjUxOTk5MCwianRpIjoiMzVkNzFhMzItYTVlYi00ZTEzLThkMGMtN2UxOGY1OTY5NzY5IiwidHlwZSI6ImFjY2VzcyIsInN1YiI6ImV4YW1wbGVfdXNlciIsIm5iZiI6MTc0NjUxOTk5MCwiY3NyZiI6ImM3MzA5MDk1LTkyMzktNDFjNS04YmM3LTk3NDUwNTEyNjhiOCIsImV4cCI6MTc0NjUyMDg5MH0.bg1LzM28rpHj0C0k1oDHDc5iWzgHf5jkQjERleo98NE', 'csrf_access_token': 'c7309095-9239-41c5-8bc7-9745051268b8'}}
INFO - 2025-05-06 16:26:30,888 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u767b\u5f55\u6210\u529f",
  "msg_code": 200,
  "orgId": "6140913758128971280",
  "token": "AC4aA2A3Eab9f6Eb981d8f5cC6C7a",
  "userId": "9623557772977266982"
}

INFO - 2025-05-06 16:33:46,590 - apiutil.py:158 -[apiutil:extract_data] - 提取接口的返回值：
INFO - 2025-05-06 16:38:23,151 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': 'none'}}, {'eq': {'msg': '登录成功'}}]
INFO - 2025-05-06 16:38:23,153 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【None】,实际结果【[None]】
INFO - 2025-05-06 16:38:23,153 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'msg': '登录成功'}，等于预期结果：{'msg': '登录成功'}
INFO - 2025-05-06 16:38:23,153 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-05-06 16:46:42,727 - sendrequest.py:142 -[sendrequest:run_main] - 接口名称：用户登录
INFO - 2025-05-06 16:46:42,727 - sendrequest.py:143 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/login
INFO - 2025-05-06 16:46:42,727 - sendrequest.py:144 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 16:46:42,727 - sendrequest.py:145 -[sendrequest:run_main] - 测试用例名称：用户名和密码正确登录验证
INFO - 2025-05-06 16:46:42,727 - sendrequest.py:146 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 16:46:42,727 - sendrequest.py:147 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 17:00:24,295 - sendrequest.py:142 -[sendrequest:run_main] - 接口名称：用户登录
INFO - 2025-05-06 17:00:24,295 - sendrequest.py:143 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/login
INFO - 2025-05-06 17:00:24,295 - sendrequest.py:144 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-05-06 17:00:24,295 - sendrequest.py:145 -[sendrequest:run_main] - 测试用例名称：用户名和密码正确登录验证
INFO - 2025-05-06 17:00:24,295 - sendrequest.py:146 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-05-06 17:00:24,295 - sendrequest.py:147 -[sendrequest:run_main] - Cookie：None
INFO - 2025-05-06 17:00:24,295 - sendrequest.py:151 -[sendrequest:run_main] - 请求参数：{'data': {'user_name': 'test01', 'passwd': 'admin123'}}
